[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003d $aveNUS"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "image:https://travis-ci.org/AY1920S1-CS2103T-F13-2/main.svg?branch\u003dmaster[\"Build Status\", link\u003d\"https://travis-ci.org/AY1920S1-CS2103T-F13-2/main\"]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "https://ci.appveyor.com/project/jon-chua/main[image:https://ci.appveyor.com/api/projects/status/6bknqbs43hquea89?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-F13-2/main[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-F13-2/main/badge.svg?branch\u003dmaster\u0026service\u003dgithub[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "* $aveNUS is a financial planning app for meal planning in NUS."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "* It is meant for  students who prefer to use a desktop app for managing their food expenditure"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "within NUS."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "* More importantly, $aveNUS is optimized for those who prefer to"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "work on a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "* Original code source is taken from the AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 6,
      "seanlowjk": 2,
      "jon-chua": 3,
      "-": 23
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "mainClassName \u003d \u0027seedu.savenus.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    archiveName \u003d \u0027savenus.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        \u0027site-name\u0027: \u0027$aveNUS\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103T-F13-2/main\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 3,
      "seanlowjk": 1,
      "-": 151
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "$aveNUS was developed by the https://ay1920s1-cs2103t-f13-2.github.io/main[F13-2] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "\u003d\u003d\u003d Roby Tanama"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "image::robytanama.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "link:https://github.com/robytanama[Github] | \u003c\u003cjohndoe#, Portfolio\u003e\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "Role: Project lead +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "Responsibilities: UI +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "Main project tasks: Information and UI features"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "\u003d\u003d\u003d Low Jun Kai Sean"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "image::seanlowjk.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "link:https://github.com/seanlowjk[Github] | \u003c\u003cjohndoe#, Portfolio\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "Role: Documentation +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "Responsibilities: Deliverables, and deadlines +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "Main project tasks: Recommend and Budgeting features"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "\u003d\u003d\u003d Chua Jia Cheng, Jon"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": "image::jon-chua.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "link:http://github.com/jon-chua[Github] | \u003c\u003cjohndoe#, Portfolio\u003e\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "Responsibilities: Recommendation, like and dislike features +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robytanama"
        },
        "content": "\u003d\u003d\u003d Koh Wee Lun Clarence"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robytanama"
        },
        "content": "image::fatclarence.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "link:http://github.com/fatclarence[Github] | \u003c\u003cjohndoe#, Portfolio\u003e\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robytanama"
        },
        "content": "Responsibilities: Implementing features +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robytanama"
        },
        "content": "Main project tasks: Updating and Editing features"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robytanama"
        },
        "content": "\u003d\u003d\u003d Choo Ze Yuan"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robytanama"
        },
        "content": "image::raikonen.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "link:http://github.com/raikonen[Github] | \u003c\u003cjohndoe#, Portfolio\u003e\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robytanama"
        },
        "content": "Responsibilities: Implementing features +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robytanama"
        },
        "content": "Main project tasks: Expenses and Wallet features"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "robytanama": 19,
      "jon-chua": 7,
      "-": 33,
      "Raikonen": 1
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-F13-2/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "* *Email us* : You can also reach us *at* the following emails:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "Jon Chua: `jonchua@u.nus.edu` +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "Choo Ze Yuan: `e0379456@u.nus.edu` +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "Roby Tanama: `e0323147@u.nus.edu` +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "Clarence Koh: `clarence.koh@u.nus.edu` +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "Sean Low: `sean.low.jk@u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 8,
      "-": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "\u003d $aveNUS - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F13-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "By: `Team-F13-2`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "* has a need to manage a significant number of food items"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "* has trouble tracking expenditure over a period of time"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "* wants meal recommendations within their specified budget"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "*Value proposition*: manage expenditure and get recommendations faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|`* * *` |user |know the total amount I have spent |plan my finances for the remaining days of the month."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|`* * *` |greedy user |have reminders when I am about to hit the limits I set for my expenditure |plan my budget better for the weeks ahead."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|`* * *` |meticulous user |sort the food items based on categories |see which items are the best or worst based on certain categories."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|`* * *` |forgetful user |track my expenses for the day using the app |know how much I have already spend in the day and plan for the remaining meals of the day."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|`* * *` |new user |view more information about command |learn how to use the app and its features."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|`* * *` |user |add a food item by specifying the item, price, description and category |update the food items that are available to me if I find new food item options within NUS."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|`* * *` |user |possess the ability to update existing food entries |update the existing food entries if there are changes in their prices/descriptions."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|`* * *` |user |only be able to see what I can afford for meals and beverages |save time scrolling through meals that fit my budget."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|`* *` |user |know the opening and closing timings of the food stores in NUS |closed shops are not recommended to me to prevent me from wasting time to travel to these shops."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|`* *` |smart user |put aliases to the commands available in the application | personalise the app and use it more effectively."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|`* *` |lazy user |obtain a recommended meal plan according to a specified daily allowance |save the time of having to plan for my meals for the day."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|`* *` |user |add my savings of the month into a customised fund |purchase rewards/gifts/items that I require when I have saved enough for them."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|`* *` |lazy user |load and save data from other computers |transfer data to an application onto another desktop."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|`* *` |user with dietary/religious restrictions |exclude meals that do not fulfil my dietary requirements |reduce my options to only meals that I can consume."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|`* *` |slow user |a guided tutorial to bring me through the basic functionality of the program |become more familiar with the program before I start using."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|`* *` |Japanese food lover |prioritise Japanese food options over other similarly priced products |find specific food types of our choice/cravings we have."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|`* *` |advanced user |shorten my commands |type faster and more efficiently."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|`* *` |lazy user |have autocomplete |find food items without having to type long keywords."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|`* *` |careful user |have a calendar function |keep track of the progress of my spending for the current month"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|`* *` |non-tech savvy user |have an easier way to understand how the works eg. through a video |use the app effectively without having to read long user guides."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|`*`|dyslexic user |an app with easy to read font| use the app comfortably with being hindered by my reading disabilities."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|`*` |user with ADHD |an app with simple commands and UI |use it comfortably without major distractions."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|`*` |user who loves to customize things |have a theme changing function of the app from a list of themes available | personalise the app to a theme that I like."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|`*` |user who hates travelling | sort places from the nearest to the furthest from my current location| find food places that are easy for me to get to."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|`*` |user |add the birthdays of my friends |set up reminders to buy gifts for my friends."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|`*` |user |receive sample suggestions and examples to understand how to use the program. |understand how to user the application effectively."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|`*` |forgetful user |save specific meal sets to reuse |save time on inputting my meals daily."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "\u003d\u003d\u003d Use case: Add food item"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "1. User requests to add food item, providing details such as price, description, category, location and so on."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "2. $aveNUS adds the food item."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "+"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "* 1a. The details are given in the wrong format or mandatory fields are omitted."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "** 1a1. $aveNUS diplays an error message."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "+"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "\u003d\u003d\u003d Use case: Delete food item"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "1. User requests to list food items."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "2. $aveNUS shows a list of food items."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "3. User requests to delete a specific food item in the list."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "4. $aveNUS deletes the food item."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "** 3a1. $aveNUS shows an error message."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "\u003d\u003d\u003d Use case: Search food item"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "1. User requests to search for a food item, providing a search query."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "2. $aveNUS shows a list of filtered food items according to their provided query."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "+"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "* 2a. User requests to add food item to their expenditure from the search results."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "+"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "** 2a1. $aveNUS adds the food item to their expenditure."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "+"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "* 2b. User requests to search without providing any query."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "+"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "** 2b1. $aveNUS displays the normal ordering of food items."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "+"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "\u003d\u003d\u003d Use case: Display recommendations"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "1. User requests to list recommendations."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "2. $aveNUS shows a list of recommended food items based on their specified budget."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "3. User requests to add a specific food item in the list into purchased food items."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "4. $aveNUS adds the food item into list of purchased food items."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "** 3a1. $aveNUS shows an error message."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "\u003d\u003d\u003d Use case: Tracking expenditure"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "1. User requests to track expenditure."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "2. $aveNUS shows a list of past purchases as expenses in a visual format."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "+"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "\u003d\u003d\u003d Use case: Set budget"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "1. User requests to set budget."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "2. $aveNUS calculates the daily budget based on the specified weekly budget."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "+"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "* 1a. The budget set is invalid (such as a negative number)."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "+"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "** 1a1. $aveNUS shows an error message."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "+"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "robytanama"
        },
        "content": "1. Should work on any mainstream OS that has JDK 11 installed."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "robytanama"
        },
        "content": "2. Should be usable by user with novice computing experience."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "robytanama"
        },
        "content": "3. Should be able to respond to user input within 2 seconds."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "robytanama"
        },
        "content": "4. Should be able to run fullscreen without any UI issues."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "robytanama"
        },
        "content": "5. Should be able to read easily by users."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 49,
      "robytanama": 6,
      "seanlowjk": 1,
      "jon-chua": 93,
      "-": 334,
      "Raikonen": 1
    }
  },
  {
    "path": "docs/Documentation.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003d $aveNUS - Documentation"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Template"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 1,
      "-": 122
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level3` repo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level3`), you should do the following:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocumentation#Docs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your Personal fork."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, AddressBook\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 1,
      "-": 83
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003d $aveNUS - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ":icons: font"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F13-2/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "By: `Team-F13-2`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "* $aveNUS is a desktop financial planning app that allows *NUS students* to *plan their meals according"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "to the amount of budget they set aside per meal* in NUS. With $aveNUS, you can more effectively manage your expenses,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "save your favourite meal options within NUS, edit meal options, and even receive recommendations"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "for meals that suit your budget."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "* More importantly, $aveNUS is optimized for those who prefer to"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "work on a Command Line Interface (CLI) while still having the benefits of a"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "* Interested in our app? \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Welcome to $aveNUS! If you are just starting out, this quick start will help you get $aveNUS up and running on"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "your computer. It will equip you with the basics you need to know to utilise $aveNUS optimally."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003d\u003d\u003d Using the User Guide"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "[width\u003d\"70%\",cols\u003d\"^15%,85%\"]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "a| `code` | Command that can be typed into the command box"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "a| icon:check[role\u003d\"green\", size\u003d\"2x\"] | Success execution of command"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "a| icon:lightbulb-o[role\u003d\"icon-tip\", size\u003d\"2x\"] | Tips that might be useful"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "a| icon:info-circle[role\u003d\"icon-note\", size\u003d\"2x\"] | Additional information that is good to know"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "a| icon:exclamation-circle[role\u003d\"icon-important\", size\u003d\"2x\"] | Important pointers to take note"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003d\u003d\u003d Pre-Requisites"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ".  Ensure you have Java *11* or above installed in your Computer."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "You can download Java 11 from"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html[here]."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for $aveNUS."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "* First, *add* a food item into the menu by typing **`add n/Halal chicken rice p/3.00 d/chicken and rice c/Malay` and"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "click kbd:[Enter]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "* You should see that a food item panel appear on the right of the window as shown below in Figure 1.2:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "image::Figure_1.2_mockup_add.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "* Now, try typing `delete 1` and then click kbd:[Enter]. Now the card labelled \"1. Halal chicken rice\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "should disappear."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "* Type *`exit`* and click kbd:[Enter] and the desktop application should close."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "* If everything above executes as stated, you can use $aveNUS to plan your expenditure in NUS now!"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003d\u003d\u003d Navigating $aveNUS"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "* TODO insert when we complete the user interface."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003d\u003d\u003d Using Commands"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "You can use the commands described in \u003c\u003cFeatures\u003e\u003e by typing them into"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "the command box and then hitting kbd:[Enter]."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "You have to provide additional parameters for some commands, and the format of each command"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "is provided in the command descriptions."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003d\u003d\u003d General Commands"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003d\u003d\u003d\u003d Alias"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Adds a custom ALIAS to a COMMAND. All future occurrences of that alias"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "will be executing that COMMAND. +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Format: `alias ALIAS_COMMAND`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Example: `alias roby exit`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003d\u003d\u003d\u003d Help"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Display the help screen that contains helpful information on how to use the application. +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003d\u003d\u003d\u003d History"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Display within the grey box right below the command line box, a list of"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "commands that were recently typed in order of which was most recent."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Format: `history` or `h`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003d\u003d\u003d\u003d Info"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "Displays the information of the command specified."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "Format: `info COMMAND`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "Example: `info edit`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003d\u003d\u003d\u003d Collapse"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "Makes the Food Card more or less compact, depending on the user\u0027s preference."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "Format `collapse`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "Example: `collapse`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003d\u003d\u003d\u003d Undo"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Undoes a command a specific number of TIMES. Note: TIMES must be a positive integer. +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Format: `undo TIMES`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Example: `undo 1`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003d\u003d\u003d\u003d Redo"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Redoes a command a specific number of TIMES. TIMES must be a positive integer. +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Format: `redo TIMES`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Example: `redo 1`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003d\u003d\u003d\u003d Exit"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Exits the app. +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003d\u003d\u003d\u003d Tutorial"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Displays the tutorial on how to use the app."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Format: `tutorial`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003d\u003d\u003d Food Items"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003d\u003d\u003d\u003d Add"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Adds a food item to the food list. Note: Price must be in integer or double value with at most 2 decimal places."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Note: Opening Hours must be in HHMM format."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Note: NAME, PRICE and CATEGORY are mandatory fields."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Format: `add n/NAME d/DESCRIPTION p/PRICE c/CATEGORY l/LOCATION o/OPENING HOURS r/RESTRICTIONS`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Example: `add n/Chicken Rice d/Rice with Chicken p/2.50 c/Chinese l/NUS o/0800 2000 r/NIL`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003d\u003d\u003d\u003d List"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "List all the food items in the list."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003d\u003d\u003d\u003d Edit"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Edits a food item at a INDEX based on a specific FIELD or fields. INDEX must be a positive integer. At least one FIELD must be given."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Format: `edit INDEX n/NAME d/DESCRIPTION ...`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Example: `edit 2 n/Fried Rice`"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003d\u003d\u003d\u003d Find"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Finds a food items based on a specific FIELD or fields. At least one FIELD must be given."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Format: `find n/NAME d/DESCRIPTION ...`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Example: `find n/Chicken d/Rice`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003d\u003d\u003d\u003d Filter"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "Filters the food items based on the criteria specified. Note: You can need to"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "have at least one of a `FIELD`, `QUANTIFIER` and `VALUE`."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "Format: `filter FIELD QUANTIFIER VALUE`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "Example: `filter PRICE LESS_THAN 4.00 CATEGORY EQUALS_TO Halal`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003d\u003d\u003d\u003d Delete"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Deletes a food items based on the given INDEX. INDEX must be a positive integer."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Example: `delete 2`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003d\u003d\u003d\u003d Clear"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Clears all the food items in the list."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003d\u003d\u003d\u003d Sort"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Sorts all the food items by one specific FIELD. The fields are as followed: NAME, DESCRIPTION, PRICE, CATEGORY,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "LOCATION, OPENING_HOURS, RESTRICTIONS."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Format: `sort FIELD`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Example: `sort OPENING_HOURS`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003d\u003d\u003d Budgeting"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003d\u003d\u003d\u003d Budget"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Allows the user to set a budget AMOUNT for food expenses for a certain number"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "of DAYS. DAYS must be a positive integer. AMOUNT must be a positive integer or double with 2 decimal places."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Format: `budget AMOUNT DAYS`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Example: `budget 100.00 10`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003d\u003d\u003d\u003d Buy"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Allows users to log a food expense into the application."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Format: `buy FOOD_INDEX`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Example: `buy 1`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003d\u003d\u003d\u003d Save"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Allows users to log an amount of money to save in his savings account from user\u0027s wallet."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "*Format*: `save` +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "*Example*: `save 10`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Make sure you have money in your wallet before you save! You cannot save"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "money without having money in your wallet."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"5%,95%\", grid\u003dnone]"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "ifdef::env-github[| :white_check_mark: a| You will see a success message and the amount of money you have saved in your savings account.]"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "ifndef::env-github[a| icon:check[role\u003d\"green\", size\u003d\"2x\"] a| You will see a success message and the amount of money you have saved in your savings account.]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "If you click the \"Savings\" tab on the right panel, you will be able to view your savings history."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Also the amount saved is deducted from your wallet."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003d\u003d\u003d\u003d Withdraw"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Allows users to log an amount of money to withdraw from his savings account into his wallet."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "*Format*: `withdraw` +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "*Example*: `withdraw 10`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "You must have money in your savings account before you can withdraw from it."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"5%,95%\", grid\u003dnone]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "ifdef::env-github[| :white_check_mark: a| You will see a success message and the amount of money you have withdrew from your savings account.]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "ifndef::env-github[a| icon:check[role\u003d\"green\", size\u003d\"2x\"] a| You will see a success message and the amount of money you have withdrew from your savings account.]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "If you click the \"Savings\" tab on the right panel, you will be able to view your savings history."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Also the amount withdrawn is added into your wallet."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003d\u003d\u003d Recommendations"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003d\u003d\u003d\u003d Recommend"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Allow users to get a recommendation from the application, based on the current budget"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "as well as the available food items entries. This also takes into account the"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "user\u0027s likes and dislikes (see below)."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "Format: `recommend`"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "To clear the recommendations, use the `list` or `add` commands."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"5%,95%\", grid\u003dnone]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "ifdef::env-github[| :white_check_mark: a| The list of recommendations will be shown.]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "ifndef::env-github[a| icon:check[role\u003d\"green\", size\u003d\"2x\"] a| The list of recommendations will be shown.]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003d\u003d\u003d\u003d Adding Likes and Dislikes"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Users can specify their liked and disliked categories, tags and/or locations. The"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "recommendation system (as mentioned above) will then be able to generate more"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "accurate recommendations with your preferences."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Users can provide multiple categories, tags and/or locations with each command."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "To list the user\u0027s likes and dislikes, use the command without providing any arguments."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "You cannot add what you have already liked into your current dislikes,"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "and vice versa. The user\u0027s likes and dislikes will be also saved into the hard disk"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "for their convenience."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "*To list likes/dislikes*:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "****"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "*Format*: `like` or `dislike`."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "****"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"5%,95%\", grid\u003dnone]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "ifdef::env-github[| :white_check_mark: a| The list of liked or disliked categories, tags and locations will be shown.]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "ifndef::env-github[a| icon:check[role\u003d\"green\", size\u003d\"2x\"] a| The list of liked or disliked categories, tags and locations will be shown.]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "*To add likes*:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "****"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "*Format*: `like c/CATEGORY t/TAG l/LOCATION` +"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "*Example*: `like c/Chinese c/Western t/Healthy l/Univeristy Town`"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "****"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"5%,95%\", grid\u003dnone]"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "ifdef::env-github[| :white_check_mark: a| You will see a success message and your liked categories, tags and locations would be added.]"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "ifndef::env-github[a| icon:check[role\u003d\"green\", size\u003d\"2x\"] a| You will see a success message and your liked categories, tags and locations would be added.]"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "*To add dislikes*:"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "****"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "*Format*: `dislike c/CATEGORY t/TAG l/LOCATION` +"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "*Example*: `dislike c/International t/Spicy l/The Deck l/The Terrace`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "****"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"5%,95%\", grid\u003dnone]"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "ifdef::env-github[| :white_check_mark: a| You will see a success message and your disliked categories, tags and locations would be added.]"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "ifndef::env-github[a| icon:check[role\u003d\"green\", size\u003d\"2x\"] a| You will see a success message and your disliked categories, tags and locations would be added.]"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003d\u003d\u003d\u003d Removing Likes and Dislikes"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Users are able to remove their previously added likes and dislikes (if they exist)"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "from the system."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Users can provide multiple categories, tags and/or locations with each command."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "To remove all likes or dislikes, use the command without providing any arguments."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Only use this command if you are sure that you want to clear your likes and dislikes!"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "*To remove likes*:"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "****"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "*Format*: `removelike c/CATEGORY t/TAG l/LOCATION` +"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "*Example*: `removelike c/Japanese t/Spicy t/Healthy l/The Tea Party`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "****"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"5%,95%\", grid\u003dnone]"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "ifdef::env-github[| :white_check_mark: a| You will see a success message and your liked categories, tags and locations would be removed.]"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "ifndef::env-github[a| icon:check[role\u003d\"green\", size\u003d\"2x\"] a| You will see a success message and your liked categories, tags and locations would be removed.]"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "*To remove dislikes*:"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "****"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "*Format*: `removedislike c/CATEGORY t/TAG l/LOCATION` +"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "*Example*: `removedislike c/Chinese t/Cheap t/Healthy l/The Deck`"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "****"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"5%,95%\", grid\u003dnone]"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "ifdef::env-github[| :white_check_mark: a| You will see a success message and your disliked categories, tags and locations would be removed.]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "ifndef::env-github[a| icon:check[role\u003d\"green\", size\u003d\"2x\"] a| You will see a success message and your disliked categories, tags and locations would be removed.]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "*To remove all likes*:"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "****"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "*Format*: `removelike`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "****"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"5%,95%\", grid\u003dnone]"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "ifdef::env-github[| :white_check_mark: a| You will see a success message and your liked categories, tags and locations would be cleared.]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "ifndef::env-github[a| icon:check[role\u003d\"green\", size\u003d\"2x\"] a| You will see a success message and your liked categories, tags and locations would be cleared.]"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "*To remove all dislikes*:"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "****"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "*Format*: `removedislike`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "****"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "[width\u003d\"100%\",cols\u003d\"5%,95%\", grid\u003dnone]"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "ifdef::env-github[| :white_check_mark: a| You will see a success message and your disliked categories, tags and locations would be cleared.]"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "ifndef::env-github[a| icon:check[role\u003d\"green\", size\u003d\"2x\"] a| You will see a success message and your disliked categories, tags and locations would be cleared.]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003d\u003d Frequently Asked Questions"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "* *Will the available food items only be localized around a certain location?"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "What if I am staying in a remote area will I still be able to use"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "this app?*"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "As a user, you are able to add your own restaurants and food items into the"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "app, hence allowing you to add restaurants in a remote location."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "* *Am I able to share my expenses with other people?*"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Yes, you are able to obtain a complete list of your expenses as a text file for"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "sharing."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "* *Do I need to install anything to use the app?*"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "You need to ensure that you have Java SE Development Kit version 11 or"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "later to run the app."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "* *Am I able to reset the app and remove all of my data?*"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Yes you can do this by using the “clear” command."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "* *Does this app support another language?*"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "Unfortunately you are unable to change the app’s language"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Command | Description"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Add \u003c\u003cAdd\u003e\u003e"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Add food item."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Budget \u003c\u003cBudget\u003e\u003e"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Allows the user to set a budget amount for food expenses for a certain number"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "of days."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Buy \u003c\u003cBuy\u003e\u003e"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Allows users the log a food expense into the application."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Clear \u003c\u003cClear\u003e\u003e"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Clears all food item"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "| Collapse \u003c\u003cCollapse\u003e\u003e"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "| Makes the Food Card more or less compact, depending on the user\u0027s preference."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Delete \u003c\u003cDelete\u003e\u003e"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Deletes a food items based on the given index."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Dislike \u003c\u003cAdding Likes and Dislikes\u003e\u003e"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Specifies the user\u0027s disliked categories, tags and locations"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Edit \u003c\u003cEdit\u003e\u003e"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Edits a food item at a index based on a specific field or fields."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Exit \u003c\u003cExit\u003e\u003e"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Exits the app."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "| Filter \u003c\u003cFilter\u003e\u003e"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "| Filters the food items based on the criteria specified."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Find \u003c\u003cFind\u003e\u003e"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Finds food items based on specified fields."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Help \u003c\u003cHelp\u003e\u003e"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Display possible uses of the application."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| History \u003c\u003cHistory\u003e\u003e"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Displays the list of commands that has been typed by the user."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "| Info \u003c\u003cInfo\u003e\u003e"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "| Displays the information of the command specified."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Like \u003c\u003cAdding Likes and Dislikes\u003e\u003e"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Specifies the user\u0027s liked categories, tags and locations"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| List \u003c\u003cList\u003e\u003e"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| List all saved food items"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Recommend \u003c\u003cRecommend\u003e\u003e"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Recommend a food item, based on the user\u0027s budget."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Like \u003c\u003cLikes and Dislikes\u003e\u003e"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Likes categories, tags and locations"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Dislike \u003c\u003cLikes and Dislikes\u003e\u003e"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Dislikes categories, tags and locations"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Redo \u003c\u003cRedo\u003e\u003e"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Redo a command a specified number of times."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Removedislike \u003c\u003cRemoving Likes and Dislikes\u003e\u003e"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Remove dislikes from the user\u0027s specified dislikes or clears the dislikes list"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Removelike \u003c\u003cRemoving Likes and Dislikes\u003e\u003e"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Remove likes from the user\u0027s specified likes or clears the likes list"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Sort \u003c\u003cSort\u003e\u003e"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Sort all the food items by a specified field."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Save \u003c\u003cSave\u003e\u003e"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Saves a specified amount of money from the user\u0027s wallet into his savings account."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Tutorial \u003c\u003cTutorial\u003e\u003e"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "| Give users a brief guide on how to use the application."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "|\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 350,
      "seanlowjk": 30,
      "jon-chua": 14,
      "-": 96
    }
  },
  {
    "path": "docs/UsingTravis.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Travis CI"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "This document was originally written for _AddressBook Level 4_ and hence its screenshots refer to `addressbook-level4`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "For use with _AddressBook Level 3_, wherever `addressbook-level4` is used in the screenshots, you should use *`addressbook-level3`*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/[Travis CI] is a _Continuous Integration_ platform for GitHub projects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Travis CI can run the projects\u0027 tests automatically whenever new code is pushed to the repo. This ensures that existing functionality and features have not been broken by the changes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "The current Travis CI set up performs the following things whenever someone push code to the repo:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* Runs the `./gradlew clean test coverage coveralls -i` command (see \u003c\u003cUsingGradle#, UsingGradle\u003e\u003e for more details on what this command means)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* Renders documentation from asciidoc to html and automatically publishes them using GitHub Pages."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* Runs additional link:#repository-wide-checks[repository-wide checks]."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "If you would like to customise your travis build further, you can learn more about Travis from https://docs.travis-ci.com/[Travis CI Documentation]."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up Travis CI"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".  Fork the repo to your own organization."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to https://travis-ci.org/ and click `Sign in with GitHub`, then enter your GitHub account details if needed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image:signing_in.png[Signing into Travis CI]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* If the organization is not shown, click `Review and add` as shown below:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "image:review_and_add.png[Review and add]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "This should bring you to a GitHub page that manages the access of third-party applications. Depending on whether you are the owner of the repository, you can either grant access"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "image:grant_access.png[Grant Access]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "or request access"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "image:request_access.png[Request Access]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "to Travis CI so that it can access your commits and build your code."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* If repository cannot be found, click `Sync account`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".  Activate the switch."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "image:flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ".  This repo comes with a link:../.travis.yml[`.travis.yml`] that tells Travis what to do. So there is no need for you to create one yourself."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".  To see the CI in action, push a commit to the master branch!"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Go to the repository and see the pushed commit. There should be an icon which will link you to the Travis build."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "image:build_pending.png[Commit build]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* As the build is run on a provided remote machine, we can only examine the logs it produces:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "image:travis_build.png[Travis build]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".  If the build is successful, you should be able to check the coverage details of the tests at http://coveralls.io/[Coveralls]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the link to the \u0027build status\u0027 badge at the top of the `README.adoc` to point to the build status of your own repo."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enabling auto-publishing of documentation"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure that you have followed the steps above to set up Travis CI."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".  On GitHub, create a new user account and give this account collaborator and admin access to the repo. +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "   Using this account, generate a Personal access token https://github.com/settings/tokens/new[here]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "Personal access tokens are like passwords so make sure you keep them secret! If the Personal access token is leaked, please delete it and generate a new one."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "We use a new user account to generate the token for team projects to prevent team members from gaining access to other team members\u0027 repos. +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "If you are the only one with write access to the repo, you can use your own account to generate the token."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a description for the token. (e.g. `Travis CI - deploy docs to gh-pages`)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* Check the `public_repo` checkbox."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "* Click `Generate Token` and copy your new Personal access token."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "We will use this token to grant Travis access to the repo."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:generate_token.png[Generate token]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ".  Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "image:flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".  Click on the settings button next to the switch. In the Environment Variables section, add a new environment variable with"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* name: `GITHUB_TOKEN`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "* value: Personal access token copied in step 1"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* Display value in build log: `OFF`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image:travis_add_token.png[Travis add token]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "*Make sure you set `Display value in build log` to `OFF`.* +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "Otherwise, other people will be able to see the Personal access token and thus have access this repo. +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, make sure you *do not print `$GITHUB_TOKEN` to the logs* in Travis scripts as the logs are viewable by the public."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".  Now, whenever there\u0027s a new commit to master branch, Travis will push the latest documentation to gh-pages branch."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "**To verify that it works,**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".  Trigger Travis to regenerate documentation. To do so, you need to push a new commit to the master branch of the fork. +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "   Suggested change: Remove the codacy badge from `README`."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".  Wait for Travis CI to finish running the build on your new commit."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to the URL `\\https://\u003cyour-username-or-organization-name\u003e.github.io/addressbook-level3/`. You should see your `README` file displayed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Repository-wide checks"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to running Gradle checks, we also configure Travis CI to run some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover _all_ files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "[source,shell]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "./config/travis/run-checks.sh"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Implementing new checks"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Checks are implemented as executable `check-*` scripts within the `config/travis/` directory. The `run-checks.sh` script will automatically pick up and run files named as such."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "Check scripts should print out errors in the following format:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "SEVERITY:FILENAME:LINE: MESSAGE"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "where `SEVERITY` is either `ERROR` or `WARN`, `FILENAME` is the path to the file relative to the current directory, `LINE` is the line of the file where the error occurred and `MESSAGE` is the message explaining the error."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Check scripts must exit with a non-zero exit code if any errors occur."
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 5,
      "-": 135
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `food` model to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `address` field from `food`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "The `address` field in `food` is actually an instance of the `seedu.address.model.food.Address` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "Other usages like in `EditFoodDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditFoodDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ". Safe delete the field `address` in `EditFoodDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "For example, removing the `address` field from the `food` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "You can find them by searching for instances of the word `address` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "For example, there is a `$address` in each `foodCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "A quick look at the `foodCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ".foodCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ".foodCard.fxml"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "\u003cLabel fx:id\u003d\"price\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$price\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ".invalidfoodAddressBook.json"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[source, json]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "  \"foods\": [ {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    \"name\": \"food with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    \"price\": \"9482424\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 16,
      "-": 101
    }
  },
  {
    "path": "docs/tutorials/TracingCode.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Tracing a Command Execution Path"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/tracing"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "part of the effort to write new code.  ...[Therefore,] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "path through the code base. One easy way to trace an execution path is to use a debugger to step through the code."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you will be using the IntelliJ IDEA\u0027s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture sequence diagram from the developer guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows _between_ the main components. That is, it does not show details of"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "the execution path _inside_ each component. By hiding those details, the diagram succeeds in informing the reader"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "about the overall execution path of a command without overwhelming the reader with too much details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Read the _Architecture_ section of the DG"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting a break point"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "user input i.e., somewhere in the UI component, and then trace through how the execution proceeds through the UI component."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "However, the execution path through a GUI is often somewhat obscure due to various _event-driven mechanisms_"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "`seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the `Search for target by name` feature. `Navigate` \u003e `Symbol`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "image::Execute.png[]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we\u0027re looking for. However, it is just an"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "`Interface`. Let\u0027s delve further and find the implementation of the interface by using the `Find Usages` feature in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ IDEA."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".`Find Usages` tool window. `Edit` \u003e `Find` \u003e `Find Usages`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::FindUsages.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo! `MainWindow#executeCommand()` seems to be exactly what we\u0027re looking for!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "image:LeftGutter.png[]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tracing the execution path"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PRICE] [e/EMAIL]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[a/ADDRESS] [t/TAG]...` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".Taking notes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Over the course of the debugging session, you will encounter every major component in the application. Try to jot down"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". To start the debugging session, simply `Run` \u003e `Debug Main`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". The Debugger tool window should show up and look something like this:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:DebuggerStep1.png[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the `Show execution point` feature to jump to the line of code that we stopped at:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "image:ShowExecutionPoint.png[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". We are interested in the `logic.execute(commandText)` portion of that line so let\u0027s `Step in` into that method call:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepInto.png[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ". We end up in `LogicManager#execute()`. Let\u0027s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".LogicManager#execute()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     //Logging, safe to ignore"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     CommandResult commandResult;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     //Parse user input from String to a Command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     //Executes the Command and stores the result"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         // since it\u0027s being stored here."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     return commandResult;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ". `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let\u0027s take a closer"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "look at each one."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` the logging code since it is of no interest to us now."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepOver.png[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "`commandWord` and `arguments` :"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image:Variables.png[]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ". We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into the `switch`, we obviously stop at"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "obtain the arguments and index required."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".Stepping out"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them!"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ". The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "command and store any possible changes in an `EditFoodDescriptor`. Recall that we can verify the contents of"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "`editfoodDesciptor` through the `Variable` tool window."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image:EditCommand.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram below shows the details of the execution path through the Logic component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Does the execution path you traced in the code so far matches with the diagram?"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".Tracing an `edit` command through the Logic component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicSequenceDiagram.png[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ". Now let\u0027s see what happens when we call `command#execute()`!"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".EditCommand#execute()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    food foodToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    food editedfood \u003d createEditedFood(foodToEdit, EditFoodDescriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    if (!foodToEdit.isSameFood(editedfood) \u0026\u0026 model.hasFood(editedfood)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        throw new CommandException(MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    model.setFood(foodToEdit, editedfood);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    model.updateFilteredFoodList(PREDICATE_SHOW_ALL_FOOD);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    return new CommandResult(String.format(MESSAGE_EDIT_FOOD_SUCCESS, editedfood));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ". As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ". We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ". Again, it appears that the heavy lifting is delegated. Let\u0027s take a look at ``JsonSerializableAddressBook``\u0027s"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "constructor."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".JsonSerializableAddressBook#JsonSerializableAddressBook()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": " * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    foods.addAll("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        source.getFoodList()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "              .stream()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "              .map(JsonAdaptedfood::new)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "              .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ". It appears that a `JsonAdaptedfood` is created for each `food` and then added to the"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ". We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into ``resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());``, we end up in:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".ResultDisplay#setFeedbackToUser()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ". Finally, we step through until we reach the end of `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "this tutorial, you learned more about the inner workings of AddressBook and how the various components mesh together"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "to form one cohesive product."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".What\u0027s next?"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "do further tracing for the given commands to find exactly what happens."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ". In this tutorial, we traced the \"happy path\" (i.e., no errors). What do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "instead? What exceptions do you think will be thrown(if any), where will the exceptions be thrown and where will they be"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "handled?"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".. `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ". What components will you have to modify to perform the following enhancements to the application?"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".. Make command words case-insensitive"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".. Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".. Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new command"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ".. Add a new field to `food`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new entity to the address book"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 15,
      "-": 243
    }
  },
  {
    "path": "src/main/java/seedu/savenus/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/savenus/Main.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/savenus/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Menu;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.PurchaseHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.ReadOnlyMenu;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.ReadOnlyPurchaseHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.recommend.UserRecommendations;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.JsonSavingsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.ReadOnlySavingsAccount;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.SavingsAccount;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.SavingsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.sorter.CustomSorter;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.storage.CustomSortStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.storage.JsonCustomSortStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.storage.JsonMenuStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.storage.JsonPurchaseHistoryStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.storage.JsonRecsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.storage.MenuStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.storage.PurchaseHistoryStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.storage.RecsStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.storage.Storage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.storage.StorageManager;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.ui.Ui;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.ui.UiManager;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Menu ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        MenuStorage menuStorage \u003d new JsonMenuStorage(userPrefs.getMenuFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        SavingsStorage savingsAccountStorage \u003d new JsonSavingsStorage(userPrefs.getSavingsAccountFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        RecsStorage userRecommendations \u003d new JsonRecsStorage(userPrefs.getRecsFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        PurchaseHistoryStorage purchaseHistoryStorage \u003d new JsonPurchaseHistoryStorage(userPrefs"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                .getPurchaseHistoryFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        CustomSortStorage sort \u003d new JsonCustomSortStorage(userPrefs.getSortFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        storage \u003d new StorageManager(menuStorage, userPrefsStorage, userRecommendations,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                purchaseHistoryStorage, sort, savingsAccountStorage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs, userRecommendations, purchaseHistoryStorage,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                sort, savingsAccountStorage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s $aveNUS menu and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * The data from the sample menu will be used instead if {@code storage}\u0027s menu is not found,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * or an empty menu will be used instead if errors occur when reading {@code storage}\u0027s menu."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs, RecsStorage userRecs,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                   PurchaseHistoryStorage purchaseHistoryStorage,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                   CustomSortStorage userSortFields, SavingsStorage savingsAccountStorage) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Optional\u003cReadOnlyMenu\u003e menuOptional;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        ReadOnlyMenu initialData;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Optional\u003cReadOnlySavingsAccount\u003e savingsAccountOptional;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        ReadOnlySavingsAccount initialSavingsAccount;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        Optional\u003cReadOnlyPurchaseHistory\u003e purchaseHistoryOptional;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        ReadOnlyPurchaseHistory initialPurchaseHistory;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        Optional\u003cUserRecommendations\u003e recsOptional;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        UserRecommendations initialRecs;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Optional\u003cCustomSorter\u003e sorterOptional;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        CustomSorter initialSorter;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            menuOptional \u003d storage.readMenu();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            if (!menuOptional.isPresent()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Menu\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            initialData \u003d menuOptional.orElseGet(SampleDataUtil::getSampleMenu);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            savingsAccountOptional \u003d storage.readSavingsAccount();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            if (!savingsAccountOptional.isPresent()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                logger.info(\"Savings Account file is not found. Will be starting with an empty Savings Account\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            initialSavingsAccount \u003d savingsAccountOptional.orElse(new SavingsAccount());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            recsOptional \u003d userRecs.readRecs();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            if (!recsOptional.isPresent()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                logger.info(\"Recommendation file not found. Will be starting with a blank Recommendation\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            initialRecs \u003d recsOptional.orElse(new UserRecommendations());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            purchaseHistoryOptional \u003d storage.readPurchaseHistory();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            if (!purchaseHistoryOptional.isPresent()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                logger.info(\"Purchase History file not found. Will be starting with a blank Purchase History\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            initialPurchaseHistory \u003d purchaseHistoryOptional.orElse(new PurchaseHistory());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            sorterOptional \u003d userSortFields.readFields();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            if (!sorterOptional.isPresent()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                logger.info(\"CustomSorter file not found. Will be starting with a blank CustomSorter\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            initialSorter \u003d sorterOptional.orElse(new CustomSorter());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty application\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            initialData \u003d new Menu();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            initialSavingsAccount \u003d new SavingsAccount();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            initialRecs \u003d new UserRecommendations();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            initialPurchaseHistory \u003d new PurchaseHistory();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            initialSorter \u003d new CustomSorter();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty application\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            initialData \u003d new Menu();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            initialSavingsAccount \u003d new SavingsAccount();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            initialRecs \u003d new UserRecommendations();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            initialPurchaseHistory \u003d new PurchaseHistory();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            initialSorter \u003d new CustomSorter();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return new ModelManager(initialData, userPrefs, initialRecs, initialPurchaseHistory,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                initialSorter, initialSavingsAccount);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default config properties\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default user prefs\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Menu\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        logger.info(\"Starting Menu \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Menu ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 65,
      "seanlowjk": 16,
      "jon-chua": 15,
      "-": 136,
      "Raikonen": 18
    }
  },
  {
    "path": "src/main/java/seedu/savenus/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 2,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/savenus/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 800;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 1100;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 1,
      "robytanama": 2,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/savenus/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private static final String LOG_FILE \u003d \"savenus.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/savenus/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String MESSAGE_INVALID_FOOD_DISPLAYED_INDEX \u003d \"The food index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String MESSAGE_FOOD_LISTED_OVERVIEW \u003d \"%1$d foods listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String MESSAGE_INSUFFICIENT_FUNDS \u003d \"Insufficient funds wallet\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 2,
      "seanlowjk": 2,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/savenus/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/savenus/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/savenus/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/savenus/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/savenus/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/savenus/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/savenus/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/savenus/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/savenus/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/savenus/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.ReadOnlyMenu;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.purchase.Purchase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.sorter.CustomSorter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @see seedu.savenus.model.Model#getMenu()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    ReadOnlyMenu getMenu();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    CustomSorter getCustomSorter();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    boolean getAutoSortFlag();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of food */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    ObservableList\u003cFood\u003e getFilteredFoodList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /** Returns an unmodifiable view of the purchase history */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    ObservableList\u003cPurchase\u003e getPurchaseHistoryList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    void setFoods(List\u003cFood\u003e list);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Returns the user prefs\u0027 menu file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    Path getMenuFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Returns the user prefs\u0027 purchase history file path."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    Path getPurchaseHistoryFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 11,
      "seanlowjk": 10,
      "-": 36,
      "Raikonen": 10
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.parser.SaveNusParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.ReadOnlyMenu;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.purchase.Purchase;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.sorter.CustomSorter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.storage.Storage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private final SaveNusParser saveNusParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        saveNusParser \u003d new SaveNusParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Command command \u003d saveNusParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            storage.saveMenu(model.getMenu());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            storage.saveRecs(model.getRecommendationSystem().getUserRecommendations());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            storage.savePurchaseHistory(model.getPurchaseHistory());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            storage.saveFields(model.getCustomSorter());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            storage.saveSavingsAccount(model.getSavingsAccount());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public ReadOnlyMenu getMenu() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return model.getMenu();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public CustomSorter getCustomSorter() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return model.getCustomSorter();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean getAutoSortFlag() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return model.getAutoSortFlag();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void setFoods(List\u003cFood\u003e list) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        model.setFoods(list);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public ObservableList\u003cFood\u003e getFilteredFoodList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return model.getFilteredFoodList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public ObservableList\u003cPurchase\u003e getPurchaseHistoryList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return model.getPurchaseHistoryList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Path getMenuFilePath() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return model.getMenuFilePath();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public Path getPurchaseHistoryFilePath() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return model.getPurchaseHistoryFilePath();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 21,
      "seanlowjk": 20,
      "jon-chua": 1,
      "-": 56,
      "Raikonen": 12
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_OPENING_HOURS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_RESTRICTIONS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Adds a food to the $aveNUS menu."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a food to our menu. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            + PREFIX_PRICE + \"PRICE \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]... \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            + PREFIX_LOCATION + \"LOCATION \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + PREFIX_OPENING_HOURS + \"OPENING HOURS \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + PREFIX_RESTRICTIONS + \"RESTRICTIONS\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + PREFIX_NAME + \"Mala Xiang Guo \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            + PREFIX_PRICE + \"6.80 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Spicy goodness \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + PREFIX_CATEGORY + \"Chinese \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            + PREFIX_TAG + \"Spicy \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + PREFIX_TAG + \"Healthy \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            + PREFIX_LOCATION + \"University Town \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + PREFIX_OPENING_HOURS + \"0800 2000 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + PREFIX_RESTRICTIONS + \"Vegetarian\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New food added: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FOOD \u003d \"This food already exists in our menu!\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private final Food toAdd;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Food}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public AddCommand(Food food) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        toAdd \u003d food;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (model.hasFood(toAdd)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        model.addFood(toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        // Clear the recommendation system (if it was used)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        model.setRecommendationSystemInUse(false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        commandResult.justAdded(true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 22,
      "robytanama": 9,
      "seanlowjk": 11,
      "jon-chua": 8,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/commands/AutoSortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * An Extended Command to do Sorting based on user specified custom fields, everytime a user adds a new item."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class AutoSortCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"autosort\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String AUTO_SORT_ON_MESSAGE_SUCCESS \u003d \"You have turned auto-sorting on!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String AUTO_SORT_OFF_MESSAGE_SUCCESS \u003d \"You have turned auto-sorting off!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String MESSAGE_ERROR \u003d \"Please input a valid flag, either: ON or OFF\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            + \"Example Usage: \" + COMMAND_WORD + \" ON\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private boolean shouldAutoSort;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Creates a new AutoSort Command which turns auto-sorting on or off."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param shouldAutoSort the flag to turn auto-sorting on or off."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public AutoSortCommand(boolean shouldAutoSort) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.shouldAutoSort \u003d shouldAutoSort;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (shouldAutoSort) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            model.setAutoSortFlag(true);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new CommandResult(AUTO_SORT_ON_MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            model.setAutoSortFlag(false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new CommandResult(AUTO_SORT_OFF_MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Gets the autoSort flag."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return the auto-sort flag as a boolean value."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean getAutoSortValue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return this.shouldAutoSort;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (obj instanceof AutoSortCommand) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return this.getAutoSortValue() \u003d\u003d ((AutoSortCommand) obj).getAutoSortValue();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 59
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/commands/BudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.DaysToExpire;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.RemainingBudget;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.Wallet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * Command to add a {@code Wallet} for the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * TODO Make Days to Expire optional"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class BudgetCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"budget\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            + \": Set User\u0027s remaining budget\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            + \"Parameters: BUDGET_AMT, BUDGET_DURATION\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            + \"Restriction: \" + RemainingBudget.MESSAGE_CONSTRAINTS + \"\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            + DaysToExpire.MESSAGE_CONSTRAINTS + \"\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 100 30 or \" + COMMAND_WORD + \" 150.50 10\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static final String MESSAGE_SET_REMAININGBUDGET_SUCCESS \u003d \"New Budget: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static final String MESSAGE_SET_DAYSTOEXPIRE_SUCCESS \u003d \"Number of days left: %2$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static final String MESSAGE_SET_BUDGET_SUCCESS \u003d MESSAGE_SET_REMAININGBUDGET_SUCCESS"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            + MESSAGE_SET_DAYSTOEXPIRE_SUCCESS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private final RemainingBudget newRemainingBudget;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private final DaysToExpire newDaysToExpire;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public BudgetCommand(Wallet newWallet) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        this.newRemainingBudget \u003d newWallet.getRemainingBudget();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        this.newDaysToExpire \u003d newWallet.getDaysToExpire();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        model.setRemainingBudget(newRemainingBudget);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        model.setDaysToExpire(newDaysToExpire);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SET_BUDGET_SUCCESS,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                newRemainingBudget.toString(), newDaysToExpire.toString()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                || (other instanceof BudgetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                \u0026\u0026 newRemainingBudget.equals(((BudgetCommand) other).newRemainingBudget) // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                \u0026\u0026 newDaysToExpire.equals(((BudgetCommand) other).newDaysToExpire)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 58
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/commands/BuyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.purchase.Purchase;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * Buy a food using it\u0027s displayed index from the menu."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class BuyCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"buy\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            + \": Buy food item identified by the index number used in the displayed food list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static final String MESSAGE_BUY_FOOD_SUCCESS \u003d \"Bought Food: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public BuyCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        List\u003cFood\u003e lastShownList \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        Food foodToBuy \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        Purchase purchaseToAdd \u003d new Purchase(foodToBuy);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        model.buyFood(foodToBuy); // Throws insufficient funds command exception"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        model.addPurchase(purchaseToAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_BUY_FOOD_SUCCESS, purchaseToAdd.toString()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                || (other instanceof BuyCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((BuyCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 56
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Menu;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.PurchaseHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.SavingsAccount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Clears all food items from our $aveNUS menu."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Your menu has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        model.setMenu(new Menu());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        model.setPurchaseHistory(new PurchaseHistory());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        model.setSavingsAccount(new SavingsAccount());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 10,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /** New food was added by user. Scroll to latest added food item */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private boolean justAdd;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean justAdd) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.justAdd \u003d justAdd;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void justAdded(boolean justAdd) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.justAdd \u003d justAdd;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public boolean isJustAdd() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return justAdd;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 15,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/commands/CustomSortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * An Extended Commmand to do Sorting based on user specified custom fields."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class CustomSortCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"customsort\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You have successfully sorted the food items!!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ObservableList\u003cFood\u003e foodList \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        SortedList\u003cFood\u003e sortedList \u003d foodList.sorted(model.getCustomSorter().getComparator());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        model.setFoods(sortedList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 26
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/commands/DefaultCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.sorter.DefaultComparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Sorts all the foods in the $aveNUS menu based on their default ordering, which is:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * category, followed by name, then by price."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class DefaultCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"default\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Food items back in natural order.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ObservableList\u003cFood\u003e foodList \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        SortedList\u003cFood\u003e sortedList \u003d foodList.sorted(new DefaultComparator());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        model.setFoods(sortedList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                || (other instanceof DefaultCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 36
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Deletes a food identified using it\u0027s displayed index from the menu."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            + \": Deletes the food identified by the index number used in the displayed food list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String MESSAGE_DELETE_FOOD_SUCCESS \u003d \"Deleted Food: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        List\u003cFood\u003e lastShownList \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Food foodToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        model.deleteFood(foodToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_FOOD_SUCCESS, foodToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 7,
      "seanlowjk": 7,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/commands/DislikeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Category;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Location;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " * Adds the user\u0027s disliked recommendations to the $aveNUS recommendation system."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "public class DislikeCommand extends PreferenceCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"dislike\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private boolean isList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public DislikeCommand(boolean isList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this(new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), isList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Creates an DislikeCommand to add the user\u0027s recommendations"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public DislikeCommand(Set\u003cCategory\u003e categoryList, Set\u003cTag\u003e tagList, Set\u003cLocation\u003e locationList, boolean isList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        super(categoryList, tagList, locationList, isList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.isList \u003d isList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return this.execute(model, false, isList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                || (other instanceof DislikeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                \u0026\u0026 categoryList.equals(((DislikeCommand) other).categoryList))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                \u0026\u0026 tagList.equals(((DislikeCommand) other).tagList)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                \u0026\u0026 locationList.equals(((DislikeCommand) other).locationList)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                \u0026\u0026 isList \u003d\u003d ((DislikeCommand) other).isList;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jon-chua": 51
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_OPENING_HOURS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_RESTRICTIONS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.model.Model.PREDICATE_SHOW_ALL_FOOD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Category;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Location;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.OpeningHours;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Price;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Restrictions;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.tag.Tag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Edits the details of an existing food in the $aveNUS menu."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the food identified \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            + \"by the index number used in the displayed food list. \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            + \"[\" + PREFIX_PRICE + \"PRICE] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"CATEGORY] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]... \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            + \"[\" + PREFIX_LOCATION + \"LOCATION] \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"[\" + PREFIX_OPENING_HOURS + \"OPENING HOURS] \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"[\" + PREFIX_RESTRICTIONS + \"RESTRICTIONS]\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            + PREFIX_PRICE + \"3.99 \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Japanese Noodle with Curry\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String MESSAGE_EDIT_FOOD_SUCCESS \u003d \"Edited Food: %1$s\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field of the food to be edited must be provided.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FOOD \u003d \"This food already exists in the menu.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private final EditFoodDescriptor editFoodDescriptor;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param index of the food in the filtered food list to edit"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param editFoodDescriptor details to edit the food with"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public EditCommand(Index index, EditFoodDescriptor editFoodDescriptor) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        requireNonNull(editFoodDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.editFoodDescriptor \u003d new EditFoodDescriptor(editFoodDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        List\u003cFood\u003e lastShownList \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Food foodToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Food editedFood \u003d createEditedFood(foodToEdit, editFoodDescriptor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (!foodToEdit.isSameFood(editedFood) \u0026\u0026 model.hasFood(editedFood)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        model.setFood(foodToEdit, editedFood);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        model.updateFilteredFoodList(PREDICATE_SHOW_ALL_FOOD);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_FOOD_SUCCESS, editedFood));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Creates and returns a {@code Food} with the details of {@code foodToEdit}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * edited with {@code editFoodDescriptor}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private static Food createEditedFood(Food foodToEdit, EditFoodDescriptor editFoodDescriptor) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assert foodToEdit !\u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Name updatedName \u003d editFoodDescriptor.getName().orElse(foodToEdit.getName());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Price updatedPrice \u003d editFoodDescriptor.getPrice().orElse(foodToEdit.getPrice());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        Description updatedDescription \u003d editFoodDescriptor.getDescription().orElse(foodToEdit.getDescription());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Category updatedCategory \u003d editFoodDescriptor.getCategory().orElse(foodToEdit.getCategory());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editFoodDescriptor.getTags().orElse(foodToEdit.getTags());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        Location updatedLocation \u003d editFoodDescriptor.getLocation().orElse(foodToEdit.getLocation());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        OpeningHours updatedOpeningHours \u003d editFoodDescriptor.getOpeningHours().orElse(foodToEdit.getOpeningHours());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        Restrictions updatedRestrictions \u003d editFoodDescriptor.getRestrictions().orElse(foodToEdit.getRestrictions());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return new Food(updatedName, updatedPrice, updatedDescription,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                updatedCategory, updatedTags, updatedLocation, updatedOpeningHours, updatedRestrictions);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                \u0026\u0026 editFoodDescriptor.equals(e.editFoodDescriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Stores the details to edit the food with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * corresponding field value of the food."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static class EditFoodDescriptor {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        private Price price;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        private Category category;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        private Location location;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        private OpeningHours openingHours;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        private Restrictions restrictions;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        public EditFoodDescriptor() {}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        public EditFoodDescriptor(EditFoodDescriptor toCopy) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            setPrice(toCopy.price);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            setCategory(toCopy.category);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            setLocation(toCopy.location);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            setOpeningHours(toCopy.openingHours);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            setRestrictions(toCopy.restrictions);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, price, description, tags,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    location, category, openingHours, restrictions);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        public void setPrice(Price price) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            this.price \u003d price;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        public Optional\u003cPrice\u003e getPrice() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return Optional.ofNullable(price);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        public void setCategory(Category category) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            this.category \u003d category;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        public Optional\u003cCategory\u003e getCategory() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return Optional.ofNullable(category);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        public void setLocation(Location location) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            this.location \u003d location;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        public Optional\u003cLocation\u003e getLocation() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            return Optional.ofNullable(location);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        public void setOpeningHours(OpeningHours openingHours) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            this.openingHours \u003d openingHours;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        public Optional\u003cOpeningHours\u003e getOpeningHours() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            return Optional.ofNullable(openingHours);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        public void setRestrictions(Restrictions restrictions) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            this.restrictions \u003d restrictions;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        public Optional\u003cRestrictions\u003e getRestrictions() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            return Optional.ofNullable(restrictions);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            if (!(other instanceof EditFoodDescriptor)) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            EditFoodDescriptor e \u003d (EditFoodDescriptor) other;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    \u0026\u0026 getPrice().equals(e.getPrice())"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    \u0026\u0026 getCategory().equals(e.getCategory())"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    \u0026\u0026 getLocation().equals(e.getLocation())"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                    \u0026\u0026 getOpeningHours().equals(e.getOpeningHours())"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                    \u0026\u0026 getRestrictions().equals(e.getRestrictions());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 27,
      "seanlowjk": 55,
      "robytanama": 28,
      "jon-chua": 27,
      "-": 136
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting $aveNUS as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 4,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/commands/FilterCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Sorts all the foods in the $aveNUS menu based on given criterion."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class FilterCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"filter\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String NO_ARGUMENTS_USAGE \u003d \"Note you have entered in zero arguments:\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            + \"Example Usage: \" + COMMAND_WORD + \" PRICE LESS_THAN 4.00\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String DUPLICATE_FIELD_USAGE \u003d \"Note you have entered a duplicate field.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String WRONG_ARGUMENT_NUMBER \u003d \"Note that you have key-ed in a wrong number of arguments.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            + \"Please fix the formatting to: FIELD QUANTIFIER VALUE\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            + \"Example Usage: \" + COMMAND_WORD + \" PRICE LESS_THAN 4.00\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            + \"Note that VALUE MUST be only one word.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String INVALID_FIELD_USAGE \u003d \"Note you have entered an invalid field! \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "             + \"You are only allowed to enter the following fields:\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "             + \"NAME, PRICE, CATEGORY, DESCRIPTION, LOCATION, OPENING_HOURS, RESTRICTIONS\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String INVALID_QUANTIFIER_USAGE \u003d \"Note you have entered an invalid quantifier! \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "             + \"You are only allowed to enter the following quantifiers:\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "             + \"LESS_THAN, EQUALS_TO or MORE_THAN\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String INVALID_VALUE_USAGE \u003d \"Note you have entered an invalid value! \\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "             + \"Please do make sure your value follow the field requirements.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"This is the list of items at your disposal: \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private List\u003cString\u003e fields;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Create a simple Filter Command."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param fields the list of fields."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public FilterCommand(List\u003cString\u003e fields) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.fields \u003d fields;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public List\u003cString\u003e getFields() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return this.fields;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        model.editFilteredFoodList(fields);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                || (other instanceof FilterCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                \u0026\u0026 getFields().equals(((FilterCommand) other).getFields()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 60
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Finds and lists all foods in menu whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all foods whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" chicken rice nasi lemak prawn mee\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        model.updateFilteredFoodList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                String.format(Messages.MESSAGE_FOOD_LISTED_OVERVIEW, model.getFilteredFoodList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 6,
      "seanlowjk": 3,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 3,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/commands/HistoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Shows the history of the user\u0027s typed commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"h\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You have entered these commands:\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not entered any commands.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        ArrayList\u003cString\u003e histories \u003d new ArrayList\u003c\u003e(model.getCommandHistory());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        if (histories.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            // no commands were typed"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Collections.reverse(histories);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        for (String history : histories) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            sb.append(history);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return new CommandResult(sb.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 43
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/commands/InfoCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Displays information on a particular command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class InfoCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"info\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \": This commands allows you to obtain more information about a particular command.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" edit\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String COMMAND_INDICATOR \u003d \"Opening information window on: \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String ADD_INFO \u003d COMMAND_INDICATOR + AddCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String BUDGET_INFO \u003d COMMAND_INDICATOR + BudgetCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String BUY_INFO \u003d COMMAND_INDICATOR + BuyCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String CLEAR_INFO \u003d COMMAND_INDICATOR + ClearCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String DEFAULT_INFO \u003d COMMAND_INDICATOR + DefaultCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String DELETE_INFO \u003d COMMAND_INDICATOR + DeleteCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String EDIT_INFO \u003d COMMAND_INDICATOR + EditCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String EXIT_INFO \u003d COMMAND_INDICATOR + ExitCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String FIND_INFO \u003d COMMAND_INDICATOR + FindCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String HELP_INFO \u003d COMMAND_INDICATOR + HelpCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String INFO_INFO \u003d COMMAND_INDICATOR + InfoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String LIST_INFO \u003d COMMAND_INDICATOR + ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String RECOMMEND_INFO \u003d COMMAND_INDICATOR + RecommendCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String SORT_INFO \u003d COMMAND_INDICATOR + SortCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String INVALID_COMMAND_ENTERED_MESSAGE \u003d \"Sorry, no information for such command exists!\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String MULTIPLE_COMMAND_ENTERED_MESSAGE \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            \"This app can only display the information of one command!\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public InfoCommand(String command) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        input \u003d command;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return input;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        input \u003d input.toLowerCase();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        switch(input) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case AddCommand.COMMAND_WORD :"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            return new CommandResult(ADD_INFO);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case BudgetCommand.COMMAND_WORD :"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            return new CommandResult(BUDGET_INFO);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case BuyCommand.COMMAND_WORD :"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            return new CommandResult(BUY_INFO);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case ClearCommand.COMMAND_WORD :"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            return new CommandResult(CLEAR_INFO);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case DefaultCommand.COMMAND_WORD :"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            return new CommandResult(DEFAULT_INFO);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case DeleteCommand.COMMAND_WORD :"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            return new CommandResult(DELETE_INFO);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case EditCommand.COMMAND_WORD :"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            return new CommandResult(EDIT_INFO);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case ExitCommand.COMMAND_WORD :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            return new CommandResult(EXIT_INFO);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case FindCommand.COMMAND_WORD :"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            return new CommandResult(FIND_INFO);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case HelpCommand.COMMAND_WORD :"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            return new CommandResult(HELP_INFO);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case InfoCommand.COMMAND_WORD :"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            return new CommandResult(INFO_INFO);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case ListCommand.COMMAND_WORD :"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            return new CommandResult(LIST_INFO);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case RecommendCommand.COMMAND_WORD :"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            return new CommandResult(RECOMMEND_INFO);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case SortCommand.COMMAND_WORD :"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            return new CommandResult(SORT_INFO);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        default :"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            throw new CommandException(INVALID_COMMAND_ENTERED_MESSAGE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                || (other instanceof InfoCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                \u0026\u0026 getInput().equals(((InfoCommand) other).getInput()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 105
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/commands/LikeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Category;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Location;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " * Adds the user\u0027s liked recommendations to the $aveNUS recommendation system."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "public class LikeCommand extends PreferenceCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"like\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private boolean isList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public LikeCommand(boolean isList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this(new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), isList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Creates an LikeCommand to add the user\u0027s recommendations"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public LikeCommand(Set\u003cCategory\u003e categoryList, Set\u003cTag\u003e tagList, Set\u003cLocation\u003e locationList, boolean isList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        super(categoryList, tagList, locationList, isList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.isList \u003d isList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return this.execute(model, true, isList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                || (other instanceof LikeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                \u0026\u0026 categoryList.equals(((LikeCommand) other).categoryList))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                \u0026\u0026 tagList.equals(((LikeCommand) other).tagList)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                \u0026\u0026 locationList.equals(((LikeCommand) other).locationList)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                \u0026\u0026 isList \u003d\u003d ((LikeCommand) other).isList;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jon-chua": 51
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Lists all food in the menu to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all food\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        // Clear the recommendation system (if it was used) and show all food items"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        model.updateFilteredFoodList(x -\u003e true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        model.setRecommendationSystemInUse(false);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 3,
      "seanlowjk": 1,
      "jon-chua": 5,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/commands/MakeSortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Creates a simple command to create a custom comparator for the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class MakeSortCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"makesort\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String EXAMPLE_USAGE \u003d \"Example Usage: \" + COMMAND_WORD + \" PRICE ASC NAME DESC\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You have successfully overridden your own custom comparator!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private List\u003cString\u003e fields;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructus a new command based on the given list of fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param fields the given list of fields."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public MakeSortCommand(List\u003cString\u003e fields) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.fields \u003d fields;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        model.setCustomSorter(fields);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 34
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/commands/PreferenceCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Location;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.recommend.RecommendationSystem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.recommend.UserRecommendations;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " * Creates a PreferenceCommand that either adds likes or dislikes to the $aveNUS recommendation system."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "public class PreferenceCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"like/dislike\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Success!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Likes or dislikes a particular category, tag \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            + \"or location in our menu. Parameters: [\" + PREFIX_CATEGORY + \"CATEGORY]... [\" + PREFIX_TAG + \"TAG]... [\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            + PREFIX_LOCATION + \"...]\\n\" + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_CATEGORY + \"Chinese \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            + PREFIX_CATEGORY + \"Western \" + PREFIX_LOCATION + \"University Town \" + PREFIX_LOCATION + \"The Deck \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            + PREFIX_TAG + \"Spicy \" + PREFIX_TAG + \"Healthy\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String DUPLICATE_FOUND_IN_OPPOSITE_LIST \u003d \"Duplicate entry found in opposing list!\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            + \"Entries cannot exist in both liked and disliked sets at the same time!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public final Set\u003cCategory\u003e categoryList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public final Set\u003cTag\u003e tagList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public final Set\u003cLocation\u003e locationList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private final boolean isList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Creates an PreferenceCommand to add the user\u0027s recommendations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public PreferenceCommand(Set\u003cCategory\u003e categoryList, Set\u003cTag\u003e tagList, Set\u003cLocation\u003e locationList, boolean isList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        requireAllNonNull(categoryList, tagList, locationList, isList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        // Convert all to lowercase"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.categoryList \u003d categoryList.stream()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .map(c -\u003e new Category(c.category.toLowerCase())).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.tagList \u003d tagList.stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .map(t -\u003e new Tag(t.tagName.toLowerCase())).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.locationList \u003d locationList.stream()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .map(l -\u003e new Location(l.location.toLowerCase())).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.isList \u003d isList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Executes the preference command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @param model  The current model"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @param isLike True if adding likes or false if adding dislikes"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @return A success message including the list of likes and dislikes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public CommandResult execute(Model model, boolean isLike, boolean isList) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        RecommendationSystem recommendationSystem \u003d model.getRecommendationSystem();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        UserRecommendations userRecommendations \u003d recommendationSystem.getUserRecommendations();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        if (isLike \u0026\u0026 !isList) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            // Throws a command exception if any of the likes are in dislikes or vice versa"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            if (userRecommendations.getDislikedCategories().stream().anyMatch(categoryList::contains)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    || userRecommendations.getDislikedLocations().stream().anyMatch(locationList::contains)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    || userRecommendations.getDislikedTags().stream().anyMatch(tagList::contains)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                throw new CommandException(DUPLICATE_FOUND_IN_OPPOSITE_LIST);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            model.addLikes(categoryList, tagList, locationList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            result.append(\"Liked: \");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        } else if (!isLike \u0026\u0026 !isList) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            // Throws a command exception if any of the likes are in dislikes or vice versa"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            if (userRecommendations.getLikedCategories().stream().anyMatch(categoryList::contains)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    || userRecommendations.getLikedLocations().stream().anyMatch(locationList::contains)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    || userRecommendations.getLikedTags().stream().anyMatch(tagList::contains)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                throw new CommandException(DUPLICATE_FOUND_IN_OPPOSITE_LIST);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            model.addDislikes(categoryList, tagList, locationList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            result.append(\"Disliked: \");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        if (!isList) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            String addedItems \u003d \"Categories: \" + categoryList.stream()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    .map(c -\u003e c.category).collect(Collectors.joining(\", \"))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    + \" | Tags: \" + tagList.stream()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    .map(t -\u003e t.tagName).collect(Collectors.joining(\", \"))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    + \" | Locations: \" + locationList.stream()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    .map(l -\u003e l.location).collect(Collectors.joining(\", \")) + \"\\n\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            result.append(addedItems);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        result.append(userRecommendations.toString());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        if (!isList) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            return new CommandResult(MESSAGE_SUCCESS + \" \" + result);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            return new CommandResult(result.toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jon-chua": 116
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/commands/RecommendCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " * Recommends food to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "public class RecommendCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"recommend\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Here are your recommendations:\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        model.setRecommendationSystemInUse(true);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jon-chua": 23
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/commands/RemoveDislikeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Category;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Location;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " * Removes the user\u0027s liked recommendations from the $aveNUS recommendation system."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "public class RemoveDislikeCommand extends RemovePreferenceCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"removedislike\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private boolean isRemoveAll;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public RemoveDislikeCommand(boolean isRemoveAll) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this(new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), isRemoveAll);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Creates an RemoveLikeCommand to remove the user\u0027s recommendations"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public RemoveDislikeCommand(Set\u003cCategory\u003e categoryList, Set\u003cTag\u003e tagList, Set\u003cLocation\u003e locationList,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                                boolean isRemoveAll) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        super(categoryList, tagList, locationList, isRemoveAll);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.isRemoveAll \u003d isRemoveAll;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return this.execute(model, false, isRemoveAll);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                || (other instanceof RemoveDislikeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                \u0026\u0026 categoryList.equals(((RemoveDislikeCommand) other).categoryList))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                \u0026\u0026 tagList.equals(((RemoveDislikeCommand) other).tagList)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                \u0026\u0026 locationList.equals(((RemoveDislikeCommand) other).locationList)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                \u0026\u0026 isRemoveAll \u003d\u003d ((RemoveDislikeCommand) other).isRemoveAll;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jon-chua": 52
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/commands/RemoveLikeCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Category;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Location;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " * Removes the user\u0027s liked recommendations from the $aveNUS recommendation system."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "public class RemoveLikeCommand extends RemovePreferenceCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"removelike\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private boolean isRemoveAll;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public RemoveLikeCommand(boolean isRemoveAll) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this(new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), isRemoveAll);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Creates an RemoveLikeCommand to remove the user\u0027s recommendations"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public RemoveLikeCommand(Set\u003cCategory\u003e categoryList, Set\u003cTag\u003e tagList, Set\u003cLocation\u003e locationList,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                             boolean isRemoveAll) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        super(categoryList, tagList, locationList, isRemoveAll);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.isRemoveAll \u003d isRemoveAll;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return this.execute(model, true, isRemoveAll);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                || (other instanceof RemoveLikeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                \u0026\u0026 categoryList.equals(((RemoveLikeCommand) other).categoryList))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                \u0026\u0026 tagList.equals(((RemoveLikeCommand) other).tagList)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                \u0026\u0026 locationList.equals(((RemoveLikeCommand) other).locationList)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                \u0026\u0026 isRemoveAll \u003d\u003d ((RemoveLikeCommand) other).isRemoveAll;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jon-chua": 52
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/commands/RemovePreferenceCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Location;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.recommend.RecommendationSystem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.recommend.UserRecommendations;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " * Creates a RemovePreferenceCommand that either removes likes or dislikes from the $aveNUS recommendation system."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "public class RemovePreferenceCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"removelike/removedislike\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Success!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            + \": Removes likes or dislikes from a particular category, tag or location in our menu. Parameters: [\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY]... [\" + PREFIX_TAG + \"TAG]... [\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            + PREFIX_LOCATION + \"...]\\n\" + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_CATEGORY + \"Chinese \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            + PREFIX_CATEGORY + \"Western \" + PREFIX_LOCATION + \"University Town \" + PREFIX_LOCATION + \"The Deck \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            + PREFIX_TAG + \"Spicy \" + PREFIX_TAG + \"Healthy\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String NOT_FOUND \u003d \"Please ensure all entries to remove currently exist in the list!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public final Set\u003cCategory\u003e categoryList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public final Set\u003cTag\u003e tagList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public final Set\u003cLocation\u003e locationList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private final boolean isRemoveAll;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Creates an RemovePreferenceCommand to add the user\u0027s recommendations"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public RemovePreferenceCommand(Set\u003cCategory\u003e categoryList, Set\u003cTag\u003e tagList, Set\u003cLocation\u003e locationList,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                                   boolean isRemoveAll) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        requireAllNonNull(categoryList, tagList, locationList, isRemoveAll);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        // Convert all to lowercase"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.categoryList \u003d categoryList.stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .map(c -\u003e new Category(c.category.toLowerCase())).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.tagList \u003d tagList.stream()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .map(t -\u003e new Tag(t.tagName.toLowerCase())).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.locationList \u003d locationList.stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .map(l -\u003e new Location(l.location.toLowerCase())).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.isRemoveAll \u003d isRemoveAll;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Executes the remove preference command."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @param model  The current model"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @param isLike True if adding likes or false if adding dislikes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @return A success message including the list of removed likes and dislikes"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public CommandResult execute(Model model, boolean isLike, boolean isRemoveAll) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        RecommendationSystem recommendationSystem \u003d model.getRecommendationSystem();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        UserRecommendations userRecommendations \u003d recommendationSystem.getUserRecommendations();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        if (isLike \u0026\u0026 isRemoveAll) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            model.clearLikes();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            result.append(\"Removed all likes!\\n\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        } else if (!isLike \u0026\u0026 isRemoveAll) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            model.clearDislikes();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            result.append(\"Removed all dislikes!\\n\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        if (isLike \u0026\u0026 !isRemoveAll) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            if (!(userRecommendations.getLikedCategories().containsAll(categoryList)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    \u0026\u0026 userRecommendations.getLikedTags().containsAll(tagList)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    \u0026\u0026 userRecommendations.getLikedLocations().containsAll(locationList))) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                throw new CommandException(NOT_FOUND);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            model.removeLikes(categoryList, tagList, locationList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            result.append(\"Removed likes: \");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        } else if (!isLike \u0026\u0026 !isRemoveAll) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            if (!(userRecommendations.getDislikedCategories().containsAll(categoryList)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    \u0026\u0026 userRecommendations.getDislikedTags().containsAll(tagList)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    \u0026\u0026 userRecommendations.getDislikedLocations().containsAll(locationList))) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                throw new CommandException(NOT_FOUND);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            model.removeDislikes(categoryList, tagList, locationList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            result.append(\"Removed dislikes: \");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        if (!isRemoveAll) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            String addedItems \u003d \"Categories: \" + categoryList.stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    .map(c -\u003e c.category).collect(Collectors.joining(\", \"))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    + \" | Tags: \" + tagList.stream()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    .map(t -\u003e t.tagName).collect(Collectors.joining(\", \"))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    + \" | Locations: \" + locationList.stream()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    .map(l -\u003e l.location).collect(Collectors.joining(\", \")) + \"\\n\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            result.append(addedItems);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        result.append(userRecommendations.toString());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + \" \" + result);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jon-chua": 119
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/commands/SaveCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.Savings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Saves an amount of money into the user\u0027s savings account."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class SaveCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"save\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            + \": Set User\u0027s savings\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            + \"Parameters: SAVING_AMT\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            + \"Restriction: \" + Savings.MESSAGE_CONSTRAINTS + \"\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 100\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String MESSAGE_SAVINGS_SUCCESS \u003d \"Current Savings: TODO @FATCLARENCE\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private final Savings savingsAmount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public SaveCommand(String savings) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.savingsAmount \u003d new Savings(savings);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        // deduct from wallet in model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        model.deductFromWallet(this.savingsAmount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        // add to the savings account in the model."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        model.addToSavings(this.savingsAmount);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SAVINGS_SUCCESS));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 42
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/commands/SortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.sorter.FoodComparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Sorts all the foods in the $aveNUS menu based on given criterion."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String EXAMPLE_USAGE \u003d \"Example Usage: \" + COMMAND_WORD + \" PRICE ASC NAME DESC\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You have successfully sorted the food items!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private List\u003cString\u003e fields;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Create a simple Sort Command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param fields the list of fields."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public SortCommand(List\u003cString\u003e fields) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.fields \u003d fields;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public List\u003cString\u003e getFields() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return this.fields;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ObservableList\u003cFood\u003e foodList \u003d model.getFilteredFoodList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        SortedList\u003cFood\u003e sortedList \u003d foodList.sorted(new FoodComparator(fields));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        model.setFoods(sortedList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                || (other instanceof SortCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                \u0026\u0026 getFields().equals(((SortCommand) other).getFields()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 52
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/commands/TopUpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.RemainingBudget;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * Command to top up a {@code Wallet} for the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class TopUpCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"topup\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            + \": Top up User\u0027s remaining budget\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            + \"Parameters: BUDGET_AMT\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            + \"Restriction: \" + RemainingBudget.MESSAGE_CONSTRAINTS + \"\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 100\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static final String MESSAGE_TOPUP_BUDGET_SUCCESS \u003d \"Top Up Successful! New Budget: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private final BigDecimal topUpAmount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public TopUpCommand(BigDecimal topUpAmount) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        this.topUpAmount \u003d topUpAmount;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        RemainingBudget newRemainingBudget \u003d new RemainingBudget(model.getRemainingBudget()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                .getRemainingBudgetAmount().add(topUpAmount).toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        model.setRemainingBudget(newRemainingBudget);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_TOPUP_BUDGET_SUCCESS,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                model.getRemainingBudget().toString()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                || (other instanceof TopUpCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                \u0026\u0026 topUpAmount.equals(((TopUpCommand) other).topUpAmount)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 49
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_OPENING_HOURS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_RESTRICTIONS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Category;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Location;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.OpeningHours;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Price;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Restrictions;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PRICE, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                        PREFIX_CATEGORY, PREFIX_TAG, PREFIX_LOCATION, PREFIX_OPENING_HOURS, PREFIX_RESTRICTIONS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        // If these arguments are not present, will throw an error as they are mandatory."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PRICE, PREFIX_CATEGORY)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        // Name and price are required fields"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Price price \u003d ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Category category \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        // Description is an optional field"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .orElse(Description.DEFAULT_VALUE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        // Location is an optional field"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        Location location \u003d ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .orElse(Location.DEFAULT_VALUE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        // Opening Hours is an optional field."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        OpeningHours openingHours \u003d ParserUtil.parseOpeningHours(argMultimap.getValue(PREFIX_OPENING_HOURS)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                .orElse(OpeningHours.DEFAULT_VALUE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        // Restriction is an optional field."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        Restrictions restrictions \u003d ParserUtil.parseRestrictions(argMultimap.getValue(PREFIX_RESTRICTIONS)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                .orElse(Restrictions.DEFAULT_VALUE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        Food food \u003d new Food(name, price, description, category, tagList, location, openingHours, restrictions);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return new AddCommand(food);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 19,
      "seanlowjk": 5,
      "robytanama": 10,
      "jon-chua": 14,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/parser/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/parser/AutoSortCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.commands.AutoSortCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * A Simple Parser to produce an AutoSortCommand."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class AutoSortCommandParser implements Parser\u003cAutoSortCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code AutoSortCommand}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * and returns a {@code AutoSortCommand} object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public AutoSortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String flag \u003d args.trim();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (isValidSyntax(flag)) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            if (isOnFlag(flag)) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                return new AutoSortCommand(true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                return new AutoSortCommand(false);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AutoSortCommand.MESSAGE_ERROR));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Simply checks whether the flag is on or not."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param flag the String which represents a flag."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true fi the flag is on. False if not."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean isOnFlag(String flag) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return flag.equals(\"ON\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the flag is valid or not."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param flag the String which is supposed to represent a flag."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if the flag is valid. False if otherwise."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean isValidSyntax(String flag) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return flag.equals(\"ON\") || flag.equals(\"OFF\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 48
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/parser/BudgetCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.Wallet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * Parses input arguments and creates a new {@code BudgetCommand} object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class BudgetCommandParser implements Parser\u003cBudgetCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code BudgetCommand}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * and returns a {@code BudgetCommand} object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public BudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            Wallet newWallet \u003d ParserUtil.parseWallet(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            return new BudgetCommand(newWallet);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            throw pe;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 27
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/parser/BuyCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.logic.commands.BuyCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * Parses input arguments and creates a new BuyCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class BuyCommandParser implements Parser\u003cBuyCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the BuyCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * and returns an BuyCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public BuyCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            return new BuyCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, BuyCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 28
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final Prefix PREFIX_PRICE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final Prefix PREFIX_OPENING_HOURS \u003d new Prefix(\"o/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final Prefix PREFIX_RESTRICTIONS \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /* Field Definitions */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String FIELD_NAME_CATEGORY \u003d \"CATEGORY\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String FIELD_NAME_DESCRIPTION \u003d \"DESCRIPTION\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String FIELD_NAME_LOCATION \u003d \"LOCATION\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String FIELD_NAME_NAME \u003d \"NAME\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String FIELD_NAME_OPENING_HOURS \u003d \"OPENING_HOURS\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String FIELD_NAME_PRICE \u003d \"PRICE\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String FIELD_NAME_RESTRICTIONS \u003d \"RESTRICTIONS\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /* Direction Definitions */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String ASCENDING_DIRECTION \u003d \"ASC\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String DESCENDING_DIRECTION \u003d \"DESC\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /* Quantifier Definitions */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String QUANTIFY_LESS_THAN \u003d \"LESS_THAN\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String QUANTIFY_EQUALS_TO \u003d \"EQUALS_TO\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String QUANTIFY_MORE_THAN \u003d \"MORE_THAN\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 1,
      "seanlowjk": 19,
      "robytanama": 2,
      "jon-chua": 2,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 6,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_OPENING_HOURS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_RESTRICTIONS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.EditCommand.EditFoodDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PRICE, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                        PREFIX_CATEGORY, PREFIX_TAG, PREFIX_LOCATION, PREFIX_OPENING_HOURS, PREFIX_RESTRICTIONS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        EditFoodDescriptor editFoodDescriptor \u003d new EditFoodDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            editFoodDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRICE).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            editFoodDescriptor.setPrice(ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            editFoodDescriptor.setDescription(ParserUtil.parseDescription(argMultimap"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    .getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CATEGORY).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            editFoodDescriptor.setCategory(ParserUtil.parseCategory(argMultimap"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    .getValue(PREFIX_CATEGORY).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            editFoodDescriptor.setLocation(ParserUtil.parseLocation(argMultimap"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    .getValue(PREFIX_LOCATION).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (argMultimap.getValue(PREFIX_OPENING_HOURS).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            editFoodDescriptor.setOpeningHours(ParserUtil.parseOpeningHours(argMultimap"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                    .getValue(PREFIX_OPENING_HOURS).get()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RESTRICTIONS).isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            editFoodDescriptor.setRestrictions(ParserUtil.parseRestrictions(argMultimap"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                    .getValue(PREFIX_RESTRICTIONS).get()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editFoodDescriptor::setTags);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (!editFoodDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return new EditCommand(index, editFoodDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 14,
      "seanlowjk": 12,
      "robytanama": 8,
      "jon-chua": 9,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/parser/FieldParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_CATEGORY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_OPENING_HOURS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_PRICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_RESTRICTIONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Parses and Checks validity of fields."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class FieldParser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String NO_ARGUMENTS_USAGE \u003d \"Note you have entered in zero arguments.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String DUPLICATE_FIELD_USAGE \u003d \"Note you have entered a duplicate field.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String MISSING_DIRECTION_USAGE \u003d \"Note that you need to have a direction for each field.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String INVALID_DIRECTION_USAGE \u003d \"Note you have entered an invalid direction:\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            + \"Directions can only be ASC or DESC\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String INVALID_FIELD_USAGE \u003d \"Note you have entered an invalid field:\\n\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Parses the given String and returns a SortCommand object for simple execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws ParseException if the String contains duplicate or invalid fields."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public List\u003cString\u003e parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new ParseException(NO_ARGUMENTS_USAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        checkKeywords(nameKeywords);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return (Arrays.asList(nameKeywords));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the keywords are valid or not."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param keywords array of fields."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws ParseException if the keywords contain wrong values."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void checkKeywords(String[] keywords) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (areFieldsInvalid(keywords)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new ParseException(INVALID_FIELD_USAGE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (areFieldsDuplicate(keywords)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new ParseException(DUPLICATE_FIELD_USAGE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (areDirectionsMissing(keywords)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new ParseException(MISSING_DIRECTION_USAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (areDirectionsInaccurate(keywords)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new ParseException(INVALID_DIRECTION_USAGE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the keywords are valid or not."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param keywords list of keywords"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void checkKeywords(List\u003cString\u003e keywords) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        checkKeywords(keywords.toArray(new String[keywords.size()]));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the array of fields contain invalid values."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param keywords the array of fields."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if the fields do contain invalid fields. False if otherwise."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean areFieldsInvalid(String[] keywords) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.length; i \u003d i + 2) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            String field \u003d keywords[i];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            if (!isValidField(field)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the directions are missing for certain fields."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param keywords the array of fields."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if directions are missing, false if otherwise."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean areDirectionsMissing(String[] keywords) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return keywords.length % 2 !\u003d 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the array of fields contain invalid directions."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param keywords the array of fields."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if the fields do contain invalid directions. False if otherwise."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean areDirectionsInaccurate(String[] keywords) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        for (int i \u003d 1; i \u003c keywords.length; i \u003d i + 2) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            String field \u003d keywords[i];"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            if (!isAscOrDesc(field)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the array of fields contain duplicate values."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param keywords the array of fields."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if the fields do contain duplicate fields. False if otherwise."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean areFieldsDuplicate(String[] keywords) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Set\u003cString\u003e noDuplicateFields \u003d new HashSet\u003cString\u003e();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.length; i +\u003d 2) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            String field \u003d keywords[i];"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            if (!noDuplicateFields.add(field)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the field is valid or not."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param field the field."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if the field is valid. False if otherwise."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean isValidField(String field) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return field.equals(FIELD_NAME_CATEGORY)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                || field.equals(FIELD_NAME_DESCRIPTION)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                || field.equals(FIELD_NAME_LOCATION)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                || field.equals(FIELD_NAME_NAME)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                || field.equals(FIELD_NAME_OPENING_HOURS)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                || field.equals(FIELD_NAME_PRICE)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                || field.equals(FIELD_NAME_RESTRICTIONS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the field represents ascending or descending."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param direction the field."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if the field is ascending or descending. False if otherwise."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean isAscOrDesc(String direction) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return direction.equals(\"ASC\") || direction.equals(\"DESC\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 148
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/parser/FilterCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_OPENING_HOURS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_PRICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_RESTRICTIONS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.QUANTIFY_EQUALS_TO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.QUANTIFY_LESS_THAN;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.QUANTIFY_MORE_THAN;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.food.Category;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.food.Description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.food.Location;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.food.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.food.OpeningHours;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.food.Price;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.food.Restrictions;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Parses input arguments and creates a new SortCommand object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Parses the given String and returns a SortCommand object for simple execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws ParseException if the String contains duplicate or invalid fields."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public FilterCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.NO_ARGUMENTS_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] keywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (isWrongArgumentNumber(keywords)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                               String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.WRONG_ARGUMENT_NUMBER));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (areFieldsInvalid(keywords)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                               String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.INVALID_FIELD_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (areQuantifiersInvalid(keywords)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                               String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.INVALID_QUANTIFIER_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (areValuesInvalid(keywords)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                               String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.INVALID_VALUE_USAGE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (areFieldsDuplicate(keywords)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                               String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.DUPLICATE_FIELD_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return new FilterCommand((Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the array of fields contain invalid values."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param keywords the array of fields."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if the fields do contain invalid fields. False if otherwise."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean areFieldsInvalid(String[] keywords) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.length; i \u003d i + 3) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            String field \u003d keywords[i];"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            if (!isValidField(field)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the quantifiers are missing for certain fields."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param keywords the array of fields."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if quantifiers are missing, false if otherwise."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean isWrongArgumentNumber(String[] keywords) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return keywords.length % 3 !\u003d 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the array of fields contain invalid directions."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param keywords the array of fields."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if the fields do contain invalid directions. False if otherwise."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean areQuantifiersInvalid(String[] keywords) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        for (int i \u003d 1; i \u003c keywords.length; i \u003d i + 3) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            String field \u003d keywords[i];"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            if (!isValidQuantifier(field)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the array of fields contain invalid values."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param keywords the array of fields."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if the fields do contain invalid values. False if otherwise."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean areValuesInvalid(String[] keywords) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.length; i \u003d i + 3) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            String field \u003d keywords[i];"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            String value \u003d keywords[i + 2];"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            if (!isValidValue(field, value)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the array of fields contain duplicate values."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param keywords the array of fields."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if the fields do contain duplicate fields. False if otherwise."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean areFieldsDuplicate(String[] keywords) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Set\u003cString\u003e noDuplicateFields \u003d new HashSet\u003cString\u003e();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        for (int i \u003d 0; i \u003c keywords.length; i +\u003d 3) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            String field \u003d keywords[i];"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            if (!noDuplicateFields.add(field)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the field is valid or not."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param field the field."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if the field is valid. False if otherwise."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean isValidField(String field) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return field.equals(FIELD_NAME_CATEGORY)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                || field.equals(FIELD_NAME_DESCRIPTION)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                || field.equals(FIELD_NAME_LOCATION)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                || field.equals(FIELD_NAME_NAME)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                || field.equals(FIELD_NAME_OPENING_HOURS)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                || field.equals(FIELD_NAME_PRICE)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                || field.equals(FIELD_NAME_RESTRICTIONS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the quantifier is valid or not."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param quantifier the quantifier."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if the quantifier is valid. False if otherwise."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean isValidQuantifier(String quantifier) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return quantifier.equals(QUANTIFY_EQUALS_TO)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                || quantifier.equals(QUANTIFY_LESS_THAN)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                || quantifier.equals(QUANTIFY_MORE_THAN);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the value is valid or not."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param field the field."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param value the value."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if the value is valid. False if otherwsie."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean isValidValue(String field, String value) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        switch(field) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        case FIELD_NAME_CATEGORY:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return Category.isValidCategory(value);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        case FIELD_NAME_DESCRIPTION:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return Description.isValidDescription(value);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        case FIELD_NAME_LOCATION:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return Location.isValidLocation(value);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        case FIELD_NAME_NAME:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return Name.isValidName(value);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        case FIELD_NAME_OPENING_HOURS:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return OpeningHours.isValidOpeningHours(value);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        case FIELD_NAME_PRICE:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return Price.isValidPrice(value);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        case FIELD_NAME_RESTRICTIONS:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return Restrictions.isValidRestrictions(value);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 198
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 6,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/parser/InfoCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static seedu.savenus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static seedu.savenus.logic.commands.InfoCommand.MULTIPLE_COMMAND_ENTERED_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.logic.commands.InfoCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Parses the input for command information and create a new InfoCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class InfoCommandParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the InfoCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * and returns a InfoCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public InfoCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        // To prevent user from writing multiple commands"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        String[] argsArray \u003d args.split(\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (argsArray.length \u003e 2) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                    String.format(MULTIPLE_COMMAND_ENTERED_MESSAGE, InfoCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            );"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, InfoCommand.MESSAGE_USAGE)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            );"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return new InfoCommand(trimmedArgs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 37
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/parser/MakeSortCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.commands.MakeSortCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Creates a new MakeSortCommand."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class MakeSortCommandParser implements Parser\u003cMakeSortCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Parses the given String and returns a SortCommand object for simple execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws ParseException if the String contains duplicate or invalid fields."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public MakeSortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            List\u003cString\u003e list \u003d new FieldParser().parse(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new MakeSortCommand(list);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            String message \u003d e.getMessage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, message + \"\\n\" + MakeSortCommand.EXAMPLE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 28
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.SaveCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.logic.commands.TopUpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Category;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Location;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.OpeningHours;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Price;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Restrictions;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.Savings;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.DaysToExpire;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.RemainingBudget;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.Wallet;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Parses a {@code String} into a valid TopUpAmount."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @throws ParseException if the given {@code String} is invalid."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static BigDecimal parseTopUpAmount (String topUpAmountString) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        String trimmedTopUpAmount \u003d topUpAmountString.trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (!RemainingBudget.isValidRemainingBudget(trimmedTopUpAmount)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TopUpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return new BigDecimal(trimmedTopUpAmount);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /***"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Parses a {@code String} into a {@code Saving}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @throws ParseException if given {@code String} is invalid."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static BigDecimal parseSavings(String savingsAmount) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        String trimmedSavingsString \u003d savingsAmount.trim();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        String[] splitSavingsString \u003d trimmedSavingsString.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        if (splitSavingsString.length !\u003d 1"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            || !Savings.isValidSaving(splitSavingsString[0])) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SaveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        /** if there is already a specified number of cents return the String with decimal"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "         * else have to manually add to the string to parse into BigDecimal."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "         */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return new BigDecimal(splitSavingsString[0].contains(\".\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                ? splitSavingsString[0]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                : String.format(\"%s.00\", splitSavingsString[0]));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Parses a {@code String} into a {@code Wallet}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @throws ParseException if the given {@code String} is invalid."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static Wallet parseWallet(String walletString) throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        String trimmedWalletString \u003d walletString.trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        String[] splitWalletString \u003d trimmedWalletString.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (splitWalletString.length !\u003d 2"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                || !RemainingBudget.isValidRemainingBudget(splitWalletString[0])"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                || !DaysToExpire.isValidDaysToExpire(splitWalletString[1])) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, BudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        BigDecimal budgetAmount \u003d new BigDecimal(splitWalletString[0].contains(\".\")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                ? splitWalletString[0]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                : String.format(\"%s.00\", splitWalletString[0]));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        int parsedDaysToExpire;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            parsedDaysToExpire \u003d Integer.parseInt(splitWalletString[1]);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            throw new ParseException(DaysToExpire.INTEGER_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return new Wallet(new RemainingBudget(budgetAmount.toString()),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                new DaysToExpire(splitWalletString[1]));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Parses a {@code String price} into a {@code Price}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws ParseException if the given {@code price} is invalid."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static Price parsePrice(String price) throws ParseException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String trimmedPrice \u003d price.trim();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (!Price.isValidPrice(trimmedPrice)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new ParseException(Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return new Price(trimmedPrice);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Parses a {@code String category} into a {@code Category}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws ParseException if the given {@code category} is invalid."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static Category parseCategory(String category) throws ParseException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String trimmedCategory \u003d category.trim();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (!Category.isValidCategory(trimmedCategory)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new ParseException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return new Category(trimmedCategory);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Parses a {@code String description} into an {@code description}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Parses a {@code String location} into an {@code location}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @throws ParseException if the given {@code location} is invalid."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static Location parseLocation(String location) throws ParseException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String trimmedLocation \u003d location.trim();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        if (!Location.isValidLocation(trimmedLocation)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            throw new ParseException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return new Location(trimmedLocation);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Parses a {@code String openingHours} into an {@code openingHours}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @throws ParseException if the given {@code openingHours} is invalid."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static OpeningHours parseOpeningHours(String openingHours) throws ParseException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        requireNonNull(openingHours);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        String trimmedOpeningHours \u003d openingHours.trim();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (openingHours.equals(OpeningHours.DEFAULT_VALUE)) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            return new OpeningHours(trimmedOpeningHours);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (!OpeningHours.isValidOpeningHours(trimmedOpeningHours)) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            throw new ParseException(OpeningHours.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return new OpeningHours(trimmedOpeningHours);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Parse a {@code String restrictions} into an {@code restrictions}."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     *"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @throws ParseException if the given {@code restrictions} is invalid."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static Restrictions parseRestrictions(String restrictions) throws ParseException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        requireNonNull(restrictions);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        String trimmedRestrictions \u003d restrictions.trim();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (!Restrictions.isValidRestrictions(trimmedRestrictions)) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            throw new ParseException(Restrictions.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return new Restrictions(trimmedRestrictions);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e categories} into a {@code Set\u003cCategory\u003e}."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static Set\u003cCategory\u003e parseCategories(Collection\u003cString\u003e categories) throws ParseException {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        requireNonNull(categories);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        final Set\u003cCategory\u003e categoriesSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        for (String categoryName : categories) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            categoriesSet.add(parseCategory(categoryName));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return categoriesSet;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e locations} into a {@code Set\u003cLocation\u003e}."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static Set\u003cLocation\u003e parseLocations(Collection\u003cString\u003e locations) throws ParseException {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        requireNonNull(locations);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        final Set\u003cLocation\u003e locationsSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        for (String locationName : locations) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            locationsSet.add(parseLocation(locationName));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return locationsSet;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 36,
      "seanlowjk": 23,
      "robytanama": 33,
      "jon-chua": 48,
      "-": 84,
      "Raikonen": 51
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/parser/PreferenceCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.logic.commands.DislikeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.logic.commands.LikeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.logic.commands.PreferenceCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Category;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Location;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " * Parses input arguments and creates a new LikeCommand or DislikeCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "public class PreferenceCommandParser implements Parser\u003cPreferenceCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public PreferenceCommand parse(String args) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the PreferenceCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * and returns A LikeCommand or DislikeCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public PreferenceCommand parse(String args, boolean isLike) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CATEGORY, PREFIX_TAG, PREFIX_LOCATION);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        if (args.isBlank() \u0026\u0026 isLike) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            return new LikeCommand(true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        } else if (args.isBlank() \u0026\u0026 !isLike) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            return new DislikeCommand(true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        // If none of these arguments are not present, will throw an error."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        if (!areAnyPrefixesPresent(argMultimap, PREFIX_CATEGORY, PREFIX_TAG, PREFIX_LOCATION)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, PreferenceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        Set\u003cCategory\u003e categoryList \u003d ParserUtil.parseCategories(argMultimap.getAllValues(PREFIX_CATEGORY));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        Set\u003cLocation\u003e locationList \u003d ParserUtil.parseLocations(argMultimap.getAllValues(PREFIX_LOCATION));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        if (isLike) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            return new LikeCommand(categoryList, tagList, locationList, false);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            return new DislikeCommand(categoryList, tagList, locationList, false);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Returns true if any of the prefixes contains values in the given {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private static boolean areAnyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jon-chua": 68
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/parser/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/parser/RemovePreferenceCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.logic.commands.RemoveDislikeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.logic.commands.RemoveLikeCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.logic.commands.RemovePreferenceCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Category;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Location;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " * Parses input arguments and creates a new RemoveLikeCommand or RemoveDislikeCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "public class RemovePreferenceCommandParser implements Parser\u003cRemovePreferenceCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public RemovePreferenceCommand parse(String args) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the PreferenceCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * and returns A LikeCommand or DislikeCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public RemovePreferenceCommand parse(String args, boolean isLike) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CATEGORY, PREFIX_TAG, PREFIX_LOCATION);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        if (args.isBlank() \u0026\u0026 isLike) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            return new RemoveLikeCommand(true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        } else if (args.isBlank() \u0026\u0026 !isLike) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            return new RemoveDislikeCommand(true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        // If none of these arguments are not present, will throw an error."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        if (!areAnyPrefixesPresent(argMultimap, PREFIX_CATEGORY, PREFIX_TAG, PREFIX_LOCATION)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    RemovePreferenceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        Set\u003cCategory\u003e categoryList \u003d ParserUtil.parseCategories(argMultimap.getAllValues(PREFIX_CATEGORY));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        Set\u003cLocation\u003e locationList \u003d ParserUtil.parseLocations(argMultimap.getAllValues(PREFIX_LOCATION));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        if (isLike) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            return new RemoveLikeCommand(categoryList, tagList, locationList, false);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            return new RemoveDislikeCommand(categoryList, tagList, locationList, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Returns true if any of the prefixes contains values in the given {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private static boolean areAnyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jon-chua": 69
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/parser/SaveCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.SaveCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Parses input arguments and creates a new {@code SaveCommand} to be executed later"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * to add {@code Savings} from user into his/her {@code SavingsAccount}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class SaveCommandParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SaveCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * and returns an SaveCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public SaveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            BigDecimal savings \u003d ParserUtil.parseSavings(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            return new SaveCommand(savings.toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SaveCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 29
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/parser/SaveNusParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.commands.AutoSortCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.logic.commands.BuyCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.savenus.logic.commands.CollapseCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.commands.CustomSortCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.commands.DefaultCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.logic.commands.DislikeCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.savenus.logic.commands.ExpandCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.logic.commands.InfoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.logic.commands.LikeCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.commands.MakeSortCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.logic.commands.RecommendCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.logic.commands.RemoveDislikeCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.logic.commands.RemoveLikeCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.SaveCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.logic.commands.TopUpCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class SaveNusParser {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        case BudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            return new BudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        case TopUpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            return new TopUpCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        case BuyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            return new BuyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        case RecommendCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            return new RecommendCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case InfoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            return new InfoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        case DefaultCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new DefaultCommand();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        case HistoryCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        case FilterCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new FilterCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        case LikeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            return new PreferenceCommandParser().parse(arguments, true);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        case RemoveLikeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            return new RemovePreferenceCommandParser().parse(arguments, true);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        case DislikeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            return new PreferenceCommandParser().parse(arguments, false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        case RemoveDislikeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            return new RemovePreferenceCommandParser().parse(arguments, false);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        case CollapseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CollapseCommand();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExpandCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExpandCommand();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        case CustomSortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new CustomSortCommand();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        case MakeSortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new MakeSortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        case SaveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            return new SaveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        case AutoSortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new AutoSortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 28,
      "seanlowjk": 24,
      "robytanama": 4,
      "jon-chua": 20,
      "-": 66,
      "Raikonen": 12
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/parser/SortCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Parses input arguments and creates a new SortCommand object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Parses the given String and returns a SortCommand object for simple execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws ParseException if the String contains duplicate or invalid fields."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            List\u003cString\u003e list \u003d new FieldParser().parse(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new SortCommand(list);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            String message \u003d e.getMessage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, message + \"\\n\" + SortCommand.EXAMPLE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 28
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/parser/TopUpCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.logic.commands.TopUpCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * Parses input arguments and creates a new TopUpCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class TopUpCommandParser implements Parser\u003cTopUpCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TopUpCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * and returns an TopUpCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public TopUpCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            BigDecimal topUpAmount \u003d ParserUtil.parseTopUpAmount(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            return new TopUpCommand(topUpAmount);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, TopUpCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 29
    }
  },
  {
    "path": "src/main/java/seedu/savenus/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/CommandHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "/***"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * Singleton Class to store and retrieve command history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class CommandHistory {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private static CommandHistory commandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private static final int MAX_LENGTH \u003d 10;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private final List\u003cString\u003e commandHistoryList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private int currentCommandIndex \u003d -1;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    // Prevents instantiation"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private CommandHistory() {}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static CommandHistory getInstance() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (commandHistory \u003d\u003d null) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return commandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Add Command to history."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @param command Command to be added to history"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private void addCommandToHistory(String command) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // Disregard duplicate commands"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (commandHistoryList.size() !\u003d 0"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                \u0026\u0026 commandHistoryList.get(commandHistoryList.size() - 1).equals(command)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // Shift command list to accommodate new command"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (commandHistoryList.size() \u003d\u003d MAX_LENGTH) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            commandHistoryList.remove(0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            currentCommandIndex--;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        commandHistoryList.add(command);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        currentCommandIndex++;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Store invalid command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @param command Command to be stored"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void storeInvalidCommand(String command) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        this.addCommandToHistory(command);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        currentCommandIndex \u003d commandHistoryList.size() - 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to get the index."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @return Command index."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public int getCurrentCommandIndex() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return currentCommandIndex;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Used to get the command history."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @return List of command history."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public List\u003cString\u003e getCommandHistory() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return commandHistoryList;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Store valid command."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @param command Command to be stored"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void storeValidCommand(String command) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        this.addCommandToHistory(command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        currentCommandIndex \u003d commandHistoryList.size();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Get previously stored command."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public String getPrev() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // Return null if reached the start of command history"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (currentCommandIndex \u003c\u003d 0) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        currentCommandIndex--;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return commandHistoryList.get(currentCommandIndex);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Get following stored command."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public String getNext() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // Return null if reached the end of command history"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (currentCommandIndex \u003e\u003d commandHistoryList.size() - 1) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        currentCommandIndex++;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return commandHistoryList.get(currentCommandIndex);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        StringBuilder commandHistoryListToString \u003d new StringBuilder(\"Command History: \\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        commandHistoryList.forEach((String command) -\u003e commandHistoryListToString.append(command).append(\"\\n\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return commandHistoryListToString.toString();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 13,
      "Raikonen": 97
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/Menu.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.UniqueFoodList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.Wallet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Wraps all data at the menu level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Duplicates are not allowed (by .isSameFood comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class Menu implements ReadOnlyMenu {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private final UniqueFoodList foods;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private final Wallet wallet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        foods \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        wallet \u003d new Wallet();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Menu() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Creates an Menu using the foods in the {@code toBeCopied}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Menu(ReadOnlyMenu toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Replaces the contents of the food list with {@code foods}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * {@code foods} must not contain duplicate foods."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void setFoods(List\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.foods.setFoods(foods);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Resets the existing data of this {@code Menu} with {@code newData}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void resetData(ReadOnlyMenu newData) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        setFoods(newData.getFoodList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        setWallet(newData.getWallet());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    //// food-level operations"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Returns true if a food with the same identity as {@code food} exists in the menu."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return foods.contains(food);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Adds a food to the menu."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * The food must not already exist in the menu."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * UniqueFoodList foods has an add method that adds p only if it is not a duplicate"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void addFood(Food p) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        foods.add(p);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Replaces the given food {@code target} in the list with {@code editedFood}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * {@code target} must exist in the menu."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * The food identity of {@code editedFood} must not be the same as another existing food in the menu."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void setFood(Food target, Food editedFood) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        requireNonNull(editedFood);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        foods.setFood(target, editedFood);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Removes {@code key} from this {@code Menu}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * {@code key} must exist in the menu."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void removeFood(Food key) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        foods.remove(key);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    //// wallet operations"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Set user\u0027s {@code Wallet}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void setWallet(Wallet wallet) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        this.wallet.setRemainingBudget(wallet.getRemainingBudget());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        this.wallet.setDaysToExpire(wallet.getDaysToExpire());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Get user\u0027s {@code Wallet}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public Wallet getWallet() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return wallet;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return foods.asUnmodifiableObservableList().size()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                + \" Food Items: \\n\" + \"...\\n\" + \"Wallet: \\n\" + wallet.toString();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public ObservableList\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return foods.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                || (other instanceof Menu // instanceof handles nulls"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                \u0026\u0026 foods.equals(((Menu) other).foods))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                \u0026\u0026 wallet.equals(((Menu) other).wallet);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return foods.hashCode();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 19,
      "seanlowjk": 23,
      "-": 75,
      "Raikonen": 26
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Category;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Location;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.purchase.Purchase;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.recommend.RecommendationSystem;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.ReadOnlySavingsAccount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.Savings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.sorter.CustomSorter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.DaysToExpire;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.RemainingBudget;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    Predicate\u003cFood\u003e PREDICATE_SHOW_ALL_FOOD \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Returns the user prefs\u0027 menu file path."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    Path getMenuFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Sets the user prefs\u0027 menu file path."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    void setMenuFilePath(Path menuFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Replaces menu data with the data in {@code menu}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    void setMenu(ReadOnlyMenu menu);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Returns the $aveNUS menu"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    ReadOnlyMenu getMenu();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Returns true if a food with the same identity as {@code food} exists in the $aveNUS menu."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    boolean hasFood(Food food);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Deletes the given food."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * The food must exist in the menu."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    void deleteFood(Food target);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Adds the given food."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * {@code food} must not already exist in the menu."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    void addFood(Food food);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Replaces the given food {@code target} with {@code editedFood}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * {@code target} must exist in the menu."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * The food identity of {@code editedFood} must not be the same as another existing food in the menu."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    void setFood(Food target, Food editedFood);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Replace the original list with a new list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    void setFoods(List\u003cFood\u003e list);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Simply sets the auto-sort flag."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param autoSortFlag the auto-sort flag."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    void setAutoSortFlag(boolean autoSortFlag);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Gets the auto-sort flag."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return the auto-sort flag as a boolean value."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    boolean getAutoSortFlag();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * A simple method to replace the filtered food list with the contents of a new list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param fieldList the new list of food."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    void editFilteredFoodList(List\u003cString\u003e fieldList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Returns the user prefs\u0027 purchase history file path."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    Path getPurchaseHistoryFilePath();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Sets the user prefs\u0027 purchase history file path."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    void setPurchaseHistoryFilePath(Path menuFilePath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /** Returns the $aveNUS purchase history */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    ReadOnlyPurchaseHistory getPurchaseHistory();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Replaces purchasing history data with the data in {@code purchaseHistory}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    void setPurchaseHistory(ReadOnlyPurchaseHistory purchaseHistory);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /** Returns an unmodifiable view of the {@code PurchaseHistory} */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    ObservableList\u003cPurchase\u003e getPurchaseHistoryList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Buy the given food."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * The food must exist in the menu."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    void addPurchase(Purchase target);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Remove purchase."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * The purchase must exist in the purchase history."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    void removePurchase(Purchase target);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Getter for current user\u0027s {@code RemainingBudget}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    RemainingBudget getRemainingBudget();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Setter for current user\u0027s {@code Budget} to new {@code Budget}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    void setRemainingBudget(RemainingBudget newRemainingBudget) throws CommandException;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Getter for current user\u0027s {@code daysToExpire}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    int getDaysToExpire();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Setter for current user\u0027s {@code DaysToExpire} to new {@code DaysToExpire}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    void setDaysToExpire(DaysToExpire newDaysToExpire) throws CommandException;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Buy Food."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @param foodToBuy Food to buy"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    void buyFood(Food foodToBuy) throws CommandException;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Returns an unmodifiable view of the filtered food list"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    ObservableList\u003cFood\u003e getFilteredFoodList();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Updates the filter of the filtered food list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    void updateFilteredFoodList(Predicate\u003cFood\u003e predicate);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Gets the current recommendation system."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    RecommendationSystem getRecommendationSystem();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Updates the comparator of the food list to filter by the given {@code comparator}."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @throws NullPointerException if {@code comparator} is null."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    void updateRecommendationComparator(Comparator\u003cFood\u003e recommendationComparator);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Updates the filter of the recommendation system\u0027s food list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    void updateRecommendationPredicate(Predicate\u003cFood\u003e recommendationPredicate);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Updates if the recommendation system is currently in use."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @throws NullPointerException if {@code inUse} is null."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    void setRecommendationSystemInUse(boolean inUse);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Get a history of the list of commands"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    List\u003cString\u003e getCommandHistory();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Updates the user\u0027s liked categories, tags and locations."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @throws NullPointerException if {@code categoryList}, {@code tagList} or {@code locationList} is null."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    void addLikes(Set\u003cCategory\u003e categoryList, Set\u003cTag\u003e tagList, Set\u003cLocation\u003e locationList);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Updates the user\u0027s disliked categories, tags and locations."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @throws NullPointerException if {@code categoryList}, {@code tagList} or {@code locationList} is null."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    void addDislikes(Set\u003cCategory\u003e categoryList, Set\u003cTag\u003e tagList, Set\u003cLocation\u003e locationList);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /** Removes the user\u0027s liked categories, tags and locations."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @throws NullPointerException if {@code categoryList}, {@code tagList} or {@code locationList} is null."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    void removeLikes(Set\u003cCategory\u003e categoryList, Set\u003cTag\u003e tagList, Set\u003cLocation\u003e locationList);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Removes the user\u0027s disliked categories, tags and locations."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @throws NullPointerException if {@code categoryList}, {@code tagList} or {@code locationList} is null."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    void removeDislikes(Set\u003cCategory\u003e categoryList, Set\u003cTag\u003e tagList, Set\u003cLocation\u003e locationList);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Clears the user\u0027s liked categories, tags and locations."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    void clearLikes();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Clears the user\u0027s liked categories, tags and locations."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    void clearDislikes();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Sets the custom comparator."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    void setCustomSorter(List\u003cString\u003e fields);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Gets the custom comparator."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    CustomSorter getCustomSorter();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Add money from wallet to savings account."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    void addToSavings(Savings savings);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Deduct money from wallet."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    void deductFromWallet(Savings savings) throws CommandException;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Return an unmodifiable version of the user\u0027s SavingsAccount."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    ReadOnlySavingsAccount getSavingsAccount();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Replaces purchasing history data with the data in {@code purchaseHistory}."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    void setSavingsAccount(ReadOnlySavingsAccount savingsAccount);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 68,
      "seanlowjk": 46,
      "jon-chua": 59,
      "-": 58,
      "Raikonen": 57
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Category;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.food.FoodFilter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Location;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.purchase.Purchase;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.recommend.RecommendationSystem;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.recommend.UserRecommendations;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.ReadOnlySavingsAccount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.Savings;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.SavingsAccount;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.sorter.CustomSorter;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.DaysToExpire;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.RemainingBudget;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.Wallet;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " * Represents the in-memory model of the menu data."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private final Menu menu;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private final FilteredList\u003cFood\u003e filteredFoods;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private final PurchaseHistory purchaseHistory;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private final CustomSorter customSorter;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private final SavingsAccount savingsAccount;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private boolean autoSortFlag;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Initializes a ModelManager with the given menu and userPrefs."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public ModelManager(ReadOnlyMenu menu, ReadOnlyUserPrefs userPrefs, UserRecommendations userRecs,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        ReadOnlyPurchaseHistory purchaseHistory,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        CustomSorter customSorter, ReadOnlySavingsAccount savingsAccount) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        requireAllNonNull(menu, userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        logger.fine(\"Initializing with $aveNUS menu: \" + menu + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.menu \u003d new Menu(menu);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        filteredFoods \u003d new FilteredList\u003c\u003e(this.menu.getFoodList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        this.purchaseHistory \u003d new PurchaseHistory(purchaseHistory);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.savingsAccount \u003d new SavingsAccount(savingsAccount);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.customSorter \u003d customSorter;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.autoSortFlag \u003d false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        RecommendationSystem.getInstance().setUserRecommendations(userRecs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this(new Menu(), new UserPrefs(), new UserRecommendations(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                new PurchaseHistory(), new CustomSorter(), new SavingsAccount());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Path getMenuFilePath() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return userPrefs.getMenuFilePath();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void setMenuFilePath(Path menuFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        requireNonNull(menuFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        userPrefs.setMenuFilePath(menuFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public Path getPurchaseHistoryFilePath() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return userPrefs.getPurchaseHistoryFilePath();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void setPurchaseHistoryFilePath(Path menuFilePath) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        requireNonNull(menuFilePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        userPrefs.setPurchaseHistoryFilePath(menuFilePath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Menu \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void setMenu(ReadOnlyMenu menu) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.menu.resetData(menu);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public ReadOnlyMenu getMenu() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return menu;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        requireNonNull(food);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return menu.hasFood(food);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void deleteFood(Food target) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        menu.removeFood(target);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void addFood(Food food) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        menu.addFood(food);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        updateFilteredFoodList(PREDICATE_SHOW_ALL_FOOD);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void setFood(Food target, Food editedFood) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        requireAllNonNull(target, editedFood);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        menu.setFood(target, editedFood);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void setFoods(List\u003cFood\u003e list) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        requireNonNull(list);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        menu.setFoods(list);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PurchaseHistory Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public ReadOnlyPurchaseHistory getPurchaseHistory() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return purchaseHistory;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void setPurchaseHistory(ReadOnlyPurchaseHistory purchaseHistory) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.purchaseHistory.resetData(purchaseHistory);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void addPurchase(Purchase target) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        purchaseHistory.addPurchase(target);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void removePurchase(Purchase target) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        purchaseHistory.removePurchase(target);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PurchaseHistory List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Returns an unmodifiable view of the {@code PurchaseHistory} backed by the internal list of"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * {@code versionedMenu}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public ObservableList\u003cPurchase\u003e getPurchaseHistoryList() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return purchaseHistory.getPurchaseHistoryList();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Wallet Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Get user\u0027s {@code Wallet}."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public Wallet getWallet() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return menu.getWallet();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public RemainingBudget getRemainingBudget() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return menu.getWallet().getRemainingBudget();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void setRemainingBudget(RemainingBudget newRemainingBudget) throws CommandException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        requireNonNull(newRemainingBudget);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (newRemainingBudget.getRemainingBudgetAmount().compareTo(new BigDecimal(1000000.00)) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            throw new CommandException(RemainingBudget.FLOATING_POINT_CONSTRAINTS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        menu.getWallet().setRemainingBudget(newRemainingBudget);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public int getDaysToExpire() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return menu.getWallet().getNumberOfDaysToExpire();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void setDaysToExpire(DaysToExpire newDaysToExpire) throws CommandException {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        requireNonNull(newDaysToExpire);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (newDaysToExpire.getDaysToExpire() \u003e 365) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            throw new CommandException(DaysToExpire.INTEGER_CONSTRAINTS);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        menu.getWallet().setDaysToExpire(newDaysToExpire);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void buyFood(Food foodToBuy) throws CommandException {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        requireNonNull(foodToBuy);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        menu.getWallet().deduct(foodToBuy.getPrice());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Food List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Food} backed by the internal list of"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * {@code versionedMenu}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public ObservableList\u003cFood\u003e getFilteredFoodList() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return filteredFoods"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .filtered(RecommendationSystem.getInstance().getRecommendationPredicate())"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .sorted(RecommendationSystem.getInstance().getRecommendationComparator());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void updateFilteredFoodList(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        filteredFoods.setPredicate(predicate);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void editFilteredFoodList(List\u003cString\u003e fieldList) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        requireNonNull(fieldList);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        filteredFoods.setPredicate(new FoodFilter(fieldList));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CustomSorter \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void setCustomSorter(List\u003cString\u003e fields) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        customSorter.setComparator(fields);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public CustomSorter getCustomSorter() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return customSorter;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void setAutoSortFlag(boolean autoSortFlag) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.autoSortFlag \u003d autoSortFlag;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean getAutoSortFlag() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return this.autoSortFlag;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Recommendation System \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public RecommendationSystem getRecommendationSystem() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return RecommendationSystem.getInstance();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void updateRecommendationComparator(Comparator\u003cFood\u003e recommendationComparator) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        requireNonNull(recommendationComparator);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        RecommendationSystem.getInstance().setRecommendationComparator(recommendationComparator);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void updateRecommendationPredicate(Predicate\u003cFood\u003e recommendationPredicate) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        requireNonNull(recommendationPredicate);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        RecommendationSystem.getInstance().setRecommendationPredicate(recommendationPredicate);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void setRecommendationSystemInUse(boolean inUse) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        RecommendationSystem.getInstance().setInUse(inUse);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void addLikes(Set\u003cCategory\u003e categoryList, Set\u003cTag\u003e tagList, Set\u003cLocation\u003e locationList) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        requireAllNonNull(categoryList, tagList, locationList);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        RecommendationSystem.getInstance().addLikes(categoryList, tagList, locationList);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void addDislikes(Set\u003cCategory\u003e categoryList, Set\u003cTag\u003e tagList, Set\u003cLocation\u003e locationList) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        requireAllNonNull(categoryList, tagList, locationList);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        RecommendationSystem.getInstance().addDislikes(categoryList, tagList, locationList);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void removeLikes(Set\u003cCategory\u003e categoryList, Set\u003cTag\u003e tagList, Set\u003cLocation\u003e locationList) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        requireAllNonNull(categoryList, tagList, locationList);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        RecommendationSystem.getInstance().removeLikes(categoryList, tagList, locationList);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void removeDislikes(Set\u003cCategory\u003e categoryList, Set\u003cTag\u003e tagList, Set\u003cLocation\u003e locationList) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        requireAllNonNull(categoryList, tagList, locationList);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        RecommendationSystem.getInstance().removeDislikes(categoryList, tagList, locationList);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void clearLikes() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        RecommendationSystem.getInstance().clearLikes();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void clearDislikes() {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        RecommendationSystem.getInstance().clearDislikes();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void addToSavings(Savings savings) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        //requireNonNull(savings);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        savingsAccount.addSavings(savings);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void deductFromWallet(Savings savings) throws CommandException {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        requireNonNull(savings);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        menu.getWallet().deduct(savings);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Returns an unmodifiable Savings Account of the user."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public ReadOnlySavingsAccount getSavingsAccount() {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return savingsAccount;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void setSavingsAccount(ReadOnlySavingsAccount savingsAccount) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.savingsAccount.resetData(savingsAccount);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return menu.equals(other.menu)"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                \u0026\u0026 filteredFoods.equals(other.filteredFoods);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public List\u003cString\u003e getCommandHistory() {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return CommandHistory.getInstance().getCommandHistory();"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 73,
      "seanlowjk": 52,
      "jon-chua": 73,
      "-": 102,
      "Raikonen": 91
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/PurchaseHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.purchase.Purchase;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.purchase.PurchaseHistoryList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * Wraps all purchase history data"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class PurchaseHistory implements ReadOnlyPurchaseHistory {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private final PurchaseHistoryList purchaseHistoryList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        purchaseHistoryList \u003d new PurchaseHistoryList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public PurchaseHistory() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Creates an Menu using the foods in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public PurchaseHistory(ReadOnlyPurchaseHistory toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Set user\u0027s {@code PurchaseHistory}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void setPurchaseHistoryList(List\u003cPurchase\u003e purchaseHistoryList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        this.purchaseHistoryList.setPurchases(purchaseHistoryList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Resets the existing data of this {@code Menu} with {@code newData}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void resetData(ReadOnlyPurchaseHistory newData) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        setPurchaseHistoryList(newData.getPurchaseHistoryList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    //// purchases operations"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Add food to user\u0027s {@code PurchaseHistory}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void addPurchase(Purchase purchase) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        purchaseHistoryList.add(purchase);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Remove food in user\u0027s {@code PurchaseHistory}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void removePurchase(Purchase purchase) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        List\u003cPurchase\u003e currentPurchaseHistory \u003d getPurchaseHistoryList().stream().collect(Collectors.toList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        currentPurchaseHistory.remove(purchase);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        setPurchaseHistoryList(currentPurchaseHistory);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return purchaseHistoryList.asUnmodifiableObservableList().size()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                + \" Purchases made\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Get user\u0027s {@code PurchaseHistoryList}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public ObservableList\u003cPurchase\u003e getPurchaseHistoryList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return purchaseHistoryList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                || (other instanceof PurchaseHistory // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                \u0026\u0026 purchaseHistoryList.equals(((PurchaseHistory) other).purchaseHistoryList));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return purchaseHistoryList.hashCode();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 102
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/ReadOnlyMenu.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.Wallet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * Unmodifiable view of an menu"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public interface ReadOnlyMenu {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns an unmodifiable view of the foods list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * This list will not contain any duplicate foods."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    ObservableList\u003cFood\u003e getFoodList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Returns the user\u0027s wallet."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    Wallet getWallet();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 3,
      "seanlowjk": 3,
      "-": 10,
      "Raikonen": 7
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/ReadOnlyPurchaseHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.purchase.Purchase;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * Unmodifiable view of a PurchaseHistory"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public interface ReadOnlyPurchaseHistory {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Returns the user\u0027s {@code PurchaseHistoryList}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    ObservableList\u003cPurchase\u003e getPurchaseHistoryList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 14
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    Path getMenuFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    Path getPurchaseHistoryFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    Path getSavingsAccountFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 4,
      "-": 13,
      "Raikonen": 2
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private Path menuFilePath \u003d Paths.get(\"data\" , \"savenus-menu.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private Path recsFilePath \u003d Paths.get(\"data\" , \"savenus-recs.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private Path purchaseHistoryFilePath \u003d Paths.get(\"data\" , \"savenus-purchases.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Path sortFilePath \u003d Paths.get(\"data\" , \"savenus-sort.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private Path savingsAccountFilePath \u003d Paths.get(\"data\", \"savings.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        setMenuFilePath(newUserPrefs.getMenuFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        setPurchaseHistoryFilePath(newUserPrefs.getPurchaseHistoryFilePath());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        setSavingsAccountFilePath(newUserPrefs.getSavingsAccountFilePath());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Path getMenuFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return menuFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void setMenuFilePath(Path menuFilePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        requireNonNull(menuFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.menuFilePath \u003d menuFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Path getSavingsAccountFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return savingsAccountFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void setSavingsAccountFilePath(Path savingsAccountFilePath) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        requireNonNull(savingsAccountFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.savingsAccountFilePath \u003d savingsAccountFilePath;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public Path getRecsFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return recsFilePath;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void setRecsFilePath(Path recsFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        requireNonNull(recsFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.recsFilePath \u003d recsFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public Path getPurchaseHistoryFilePath() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return purchaseHistoryFilePath;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void setPurchaseHistoryFilePath(Path purchaseHistoryFilePath) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        requireNonNull(recsFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        this.purchaseHistoryFilePath \u003d purchaseHistoryFilePath;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Path getSortFilePath() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return sortFilePath;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void getSortFilePath(Path sortFilePath) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        requireNonNull(sortFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.sortFilePath \u003d sortFilePath;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                \u0026\u0026 menuFilePath.equals(o.menuFilePath)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                \u0026\u0026 savingsAccountFilePath.equals(savingsAccountFilePath)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                \u0026\u0026 recsFilePath.equals(o.recsFilePath)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                \u0026\u0026 purchaseHistoryFilePath.equals(o.purchaseHistoryFilePath)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                \u0026\u0026 sortFilePath.equals(o.sortFilePath);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return Objects.hash(guiSettings, menuFilePath, savingsAccountFilePath,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                recsFilePath, purchaseHistoryFilePath, sortFilePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + menuFilePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        sb.append(\"\\nLocal savings account data file location: \" + savingsAccountFilePath);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        sb.append(\"\\nRecommendations data file location : \" + recsFilePath);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        sb.append(\"\\nPurchase History data file location : \" + purchaseHistoryFilePath);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        sb.append(\"\\nCustomSort data file location : \" + sortFilePath);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 24,
      "seanlowjk": 13,
      "jon-chua": 12,
      "-": 75,
      "Raikonen": 14
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/food/Category.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents a Food\u0027s category in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCategory(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class Category implements Field {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            \"Categories should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public final String category;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    // Needed for Jackson"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public Category() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        category \u003d \"No specified category.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a {@code Category}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Category(String name) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        checkArgument(isValidCategory(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        category \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns true if a given string is a valid categroy."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static boolean isValidCategory(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Gets the field as a String."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return a String representation of the field."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String getField() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return this.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                || (other instanceof Category // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                \u0026\u0026 category.equals(((Category) other).category)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return category.hashCode();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public int compareTo(Field other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Category otherCategory \u003d (Category) other;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (otherCategory \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return this.getField().compareTo(otherCategory.getField());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 2,
      "seanlowjk": 73,
      "jon-chua": 5
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/food/Description.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Represents a Food\u0027s description in the menu."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class Description implements Field {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Description should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String DEFAULT_VALUE \u003d \"No Description\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    // Description cannot be blank but can contain any other characters"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \".*\\\\S.*\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Constructs an {@code Description}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Returns if a given string is a valid description."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Gets the field as a String."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return a String representation of the field."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String getField() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return this.toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public int compareTo(Field other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Description otherDescription \u003d (Description) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (otherDescription \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return this.getField().compareTo(otherDescription.getField());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 3,
      "seanlowjk": 18,
      "jon-chua": 51
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/food/Field.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Represents a Simpler Interface for a Field of a Food."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public interface Field extends Comparable\u003cField\u003e {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Gets the field as a String."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return a String representation of the field."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    String getField();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    int compareTo(Field other);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 15
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/food/Food.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_OPENING_HOURS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_PRICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_RESTRICTIONS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Represents a Food in the menu."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class Food {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private final Price price;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private final Category category;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private final Location location;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private final OpeningHours openingHours;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private final Restrictions restrictions;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public Food(Name name, Price price, Description description, Category category, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    Location location, OpeningHours openingHours, Restrictions restrictions) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        requireAllNonNull(name, price, description, category, tags, openingHours, restrictions);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        this.openingHours \u003d openingHours;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        this.restrictions \u003d restrictions;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Price getPrice() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public OpeningHours getOpeningHours() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return openingHours;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public Restrictions getRestrictions() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return restrictions;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Field getField(String field) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        switch(field) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        case FIELD_NAME_NAME:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return getName();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        case FIELD_NAME_PRICE:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return getPrice();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        case FIELD_NAME_CATEGORY:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return getCategory();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        case FIELD_NAME_DESCRIPTION:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return getDescription();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        case FIELD_NAME_LOCATION:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return getLocation();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        case FIELD_NAME_OPENING_HOURS:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return getOpeningHours();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        case FIELD_NAME_RESTRICTIONS:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return getRestrictions();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns true if both foods of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * This defines a weaker notion of equality between two foods."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean isSameFood(Food otherFood) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (otherFood \u003d\u003d this) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return otherFood !\u003d null"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                \u0026\u0026 otherFood.getName().equals(getName())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                \u0026\u0026 otherFood.getPrice().equals(getPrice())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                \u0026\u0026 otherFood.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                \u0026\u0026 otherFood.getCategory().equals(getCategory())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                \u0026\u0026 otherFood.getLocation().equals(getLocation())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                \u0026\u0026 otherFood.getOpeningHours().equals(getOpeningHours())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                \u0026\u0026 otherFood.getRestrictions().equals(getRestrictions());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns true if both foods have the same identity and data fields."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * This defines a stronger notion of equality between two foods."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (!(other instanceof Food)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Food otherFood \u003d (Food) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return otherFood.getName().equals(getName())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                \u0026\u0026 otherFood.getPrice().equals(getPrice())"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                \u0026\u0026 otherFood.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                \u0026\u0026 otherFood.getTags().equals(getTags())"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                \u0026\u0026 otherFood.getCategory().equals(getCategory())"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                \u0026\u0026 otherFood.getLocation().equals(getLocation())"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                \u0026\u0026 otherFood.getOpeningHours().equals(getOpeningHours())"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                \u0026\u0026 otherFood.getRestrictions().equals(getRestrictions());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return Objects.hash(name, price, description, category, tags, openingHours, restrictions);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                .append(\" Price: $\")"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                .append(getPrice())"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                .append(\" Category: \")"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                .append(getCategory())"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        builder.append(\" Location: \")"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .append(getLocation())"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .append(\" Opening Hours: \")"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                .append(getOpeningHours())"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                .append(\" Restrictions: \")"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                .append(getRestrictions());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 4,
      "seanlowjk": 65,
      "robytanama": 24,
      "jon-chua": 19,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/food/FoodFilter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_CATEGORY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_OPENING_HOURS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_PRICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_RESTRICTIONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.QUANTIFY_EQUALS_TO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.QUANTIFY_LESS_THAN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.sorter.FieldComparator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Creates a new FoodFilter to filter all Foods not following the defined quantifiers."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class FoodFilter implements Predicate\u003cFood\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private List\u003cString\u003e fieldList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private FieldComparator fieldComparator;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a Simple FoodFilter based on the fields given."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param fieldList the list of fields given."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public FoodFilter(List\u003cString\u003e fieldList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.fieldList \u003d fieldList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.fieldComparator \u003d new FieldComparator();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean test(Food food) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return doesFoodPassTest(food);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the food fulfills certain quantifiers by testing it with all quantifiers."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param food the food to be tested."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if the food passes the tests. False if otherwise."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean doesFoodPassTest(Food food) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        for (int i \u003d 0; i \u003c fieldList.size(); i \u003d i + 3) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            String field \u003d fieldList.get(i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            String quantifier \u003d fieldList.get(i + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            String value \u003d fieldList.get(i + 2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            Field dummyField \u003d createDummyField(field, value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            Field thisField \u003d food.getField(field);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            int comparisonFactor \u003d fieldComparator.compare(thisField, dummyField);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            if (!quantifierMatches(quantifier, comparisonFactor)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Check if the comparison factor matches the quantifier given."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param quantifier the quantifier, being less, equals or more."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param comparisonFactor the comparison factor, represented by an Integer."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if the comparison matches the quantifier. False if otherwise."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean quantifierMatches(String quantifier, int comparisonFactor) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (quantifier.equals(QUANTIFY_EQUALS_TO)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return comparisonFactor \u003d\u003d 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else if (quantifier.equals(QUANTIFY_LESS_THAN)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return comparisonFactor \u003c 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return comparisonFactor \u003e 0;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Creates a dummy field for comparison."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param field the specific dummy field to be created."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param value the value of the dummy field."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return a simple dummy field."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Field createDummyField(String field, String value) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        switch (field) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        case FIELD_NAME_CATEGORY:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new Category(value);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        case FIELD_NAME_DESCRIPTION:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new Description(value);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        case FIELD_NAME_LOCATION:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new Location(value);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        case FIELD_NAME_NAME:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new Name(value);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        case FIELD_NAME_OPENING_HOURS:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new OpeningHours(value);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        case FIELD_NAME_PRICE:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new Price(value);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        case FIELD_NAME_RESTRICTIONS:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return new Restrictions(value);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 110
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/food/Location.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "package seedu.savenus.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " * Represents a Food\u0027s location in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class Location implements Field {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Location should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String DEFAULT_VALUE \u003d \"No location specfied\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    // Description cannot be blank but can contain any other characters"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \".*\\\\S.*\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public final String location;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    // Needed for Jackson"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public Location() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        location \u003d DEFAULT_VALUE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Constructs a {@code Location}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @param location A valid location."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public Location(String location) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        checkArgument(isValidLocation(location), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Returns true if a given string is a valid categroy."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static boolean isValidLocation(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Gets the field as a String."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return a String representation of the field."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String getField() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return this.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                || (other instanceof Location // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                \u0026\u0026 location.equals(((Location) other).location)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return location.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public int compareTo(Field other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Location otherLocation \u003d (Location) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (otherLocation \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return this.getField().compareTo(otherLocation.getField());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 18,
      "jon-chua": 59
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/food/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Represents a Food\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class Name implements Field {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Gets the field as a String."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return a String representation of the field."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String getField() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return this.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public int compareTo(Field other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Name otherName \u003d (Name) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (otherName \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return this.getField().compareTo(otherName.getField());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 4,
      "seanlowjk": 17,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/food/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Tests that a {@code Food}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cFood\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean test(Food food) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(food.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 2,
      "seanlowjk": 4,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/food/OpeningHours.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Represents the opening hours a particular food item."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class OpeningHours implements Field {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    // This to show the user how they should type the opening hours."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            \"Opening hours should only contain numbers and spaces, and it should not be blank. \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "          + \"The format should be in the form of HHMM HHMM\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String DEFAULT_VALUE \u003d \"No Opening Hours\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    // The first character must not be a whitespace. Otherwise \" \" becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    // The format is exactly HHMM HHMM."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"([0-1][0-9][0-5][0-9]|[0-2][0-3][0-5][0-9]|2400) \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        + \"([0-1][0-9][0-5][0-9]|[0-2][0-3][0-5][0-9]|2400)\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public final String openingHours;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Constructs a {@code OpeningHours}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param hours Valid opening hour format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public OpeningHours(String hours) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        requireNonNull(hours);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        checkArgument(isValidOpeningHours(hours), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        openingHours \u003d hours;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Checking whether the opening hours is valid or not."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @return True if valid, false otherwise."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static boolean isValidOpeningHours(String hours) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (hours.equals(OpeningHours.DEFAULT_VALUE)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            String[] separateHours \u003d hours.split(\" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return hours.matches(VALIDATION_REGEX)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    \u0026\u0026 separateHours[0].compareTo(separateHours[1]) \u003c\u003d 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Gets the field as a String."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return a String representation of the field."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String getField() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return this.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return openingHours;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return other \u003d\u003d this // Short circuit if same object."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                || (other instanceof OpeningHours // To handle nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                \u0026\u0026 openingHours.equals(((OpeningHours) other).openingHours)); // Checks the state."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return openingHours.hashCode();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public int compareTo(Field other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        OpeningHours otherOpeningHours \u003d (OpeningHours) other;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (otherOpeningHours \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return this.getField().compareTo(otherOpeningHours.getField());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 2,
      "robytanama": 58,
      "seanlowjk": 24
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/food/Price.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Represents a Food\u0027s price number in the menu."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPrice(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class Price implements Field {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            \"Price numbers should only contain numbers, have either 0 or 2 decimal places\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            + \"Maximum food price allowed is $5000.00 \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            + \"For example: p/1.50 or p/200\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(0|(0(\\\\.\\\\d{2,2}))|[1-9]+(\\\\d*(\\\\.\\\\d{2,2})?))\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a {@code Price}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param price A valid price number."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Price(String price) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        checkArgument(isValidPrice(price), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        value \u003d convert(price);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns true if a given string is a valid price number."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static boolean isValidPrice(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            if (Double.parseDouble(test) \u003e 5000.00) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Checks if the input price has decimal digits or not."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param price the input String."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if the input price has no decimal digits."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean isPerfectNumber(String price) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            Integer.parseInt(price);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Converts the input price to a valid string representation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param price the input String."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return the correct String representation of the input price."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String convert(String price) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (isPerfectNumber(price)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return String.format(\"%d.00\", Integer.parseInt(price));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return String.format(\"%.2f\", Double.parseDouble(price));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Gets the field as a String."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return a String representation of the field."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String getField() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return this.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                || (other instanceof Price // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                \u0026\u0026 value.equals(((Price) other).value)); // state check"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public int compareTo(Field other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Price otherPrice \u003d (Price) other;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (otherPrice \u003d\u003d null) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            int thisAmount \u003d (int) (100 * Double.parseDouble(this.getField()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            int otherAmount \u003d (int) (100 * Double.parseDouble(otherPrice.getField()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return thisAmount - otherAmount;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 3,
      "seanlowjk": 65,
      "-": 34,
      "Raikonen": 6
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/food/Restrictions.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Represents a Food\u0027s category in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class Restrictions implements Field {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            \"Restrictions should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String DEFAULT_VALUE \u003d \"No Restrictions\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    // Restrictions cannot be blank but can contain any other characters"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \".*\\\\S.*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public final String restrictions;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Constructs a {@code Restrictions}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param restrictions A valid restrictions."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public Restrictions(String restrictions) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        requireNonNull(restrictions);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        checkArgument(isValidRestrictions(restrictions), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        this.restrictions \u003d restrictions;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static boolean isValidRestrictions(String restrictions) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return restrictions.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Gets the field as a String."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return a String representation of the field."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public String getField() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return this.toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return restrictions;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return other \u003d\u003d this // short circuit if object is the same."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                || (other instanceof Restrictions // instanceof handles nulls."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                \u0026\u0026 restrictions.equals(((Restrictions) other).restrictions)); // State check."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return restrictions.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public int compareTo(Field other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Restrictions otherRestrictions \u003d (Restrictions) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (otherRestrictions \u003d\u003d null) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return this.getField().compareTo(otherRestrictions.getField());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 2,
      "robytanama": 49,
      "seanlowjk": 19
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/food/UniqueFoodList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.exceptions.DuplicateFoodException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.exceptions.FoodNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * A list of foods that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * A food is considered unique by comparing using {@code Food#isSameFood(Food)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * foods uses Food#isSameFood(Food) for equality so as to ensure that the food being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * unique in terms of identity in the UniqueFoodList. However, the removal of a food uses Food#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * as to ensure that the food with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * @see Food#isSameFood(Food)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class UniqueFoodList implements Iterable\u003cFood\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private final ObservableList\u003cFood\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private final ObservableList\u003cFood\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns true if the list contains an equivalent food as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean contains(Food toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameFood);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Adds a food to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * The food must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void add(Food toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Replaces the food {@code target} in the list with {@code editedFood}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * The food identity of {@code editedFood} must not be the same as another existing food in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void setFood(Food target, Food editedFood) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        requireAllNonNull(target, editedFood);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new FoodNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (!target.isSameFood(editedFood) \u0026\u0026 contains(editedFood)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        internalList.set(index, editedFood);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Removes the equivalent food from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * The food must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void remove(Food toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new FoodNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void setFoods(UniqueFoodList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Replaces the contents of this list with {@code foods}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * {@code foods} must not contain duplicate foods."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void setFoods(List\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        requireAllNonNull(foods);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (!foodsAreUnique(foods)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new DuplicateFoodException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        internalList.setAll(foods);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public ObservableList\u003cFood\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Iterator\u003cFood\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            || (other instanceof UniqueFoodList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueFoodList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns true if {@code foods} contains only unique foods."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private boolean foodsAreUnique(List\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        for (int i \u003d 0; i \u003c foods.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            for (int j \u003d i + 1; j \u003c foods.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                if (foods.get(i).isSameFood(foods.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 6,
      "seanlowjk": 131
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/food/exceptions/DuplicateFoodException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model.food.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Signals that the operation will result in duplicate foods (foods are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class DuplicateFoodException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public DuplicateFoodException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        super(\"Operation would result in duplicate foods\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 1,
      "seanlowjk": 4,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/food/exceptions/FoodNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model.food.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Signals that the operation is unable to find the specified food."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class FoodNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 1,
      "seanlowjk": 5
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/info/AddInfo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.savenus.model.info;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.savenus.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Contains information on Add command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddInfo {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d AddCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INFORMATION \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            \"Add command allows you to add a new Food item on the list.\\n\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"The added Food item information will depend on the following factors: \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Name (Compulsory)\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Price (Compulsory)\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Category (Compulsory)\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"Location\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Multiple tags\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Opening hours\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Restrictions\\n\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USAGE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \"add n/Mala Xiang Guo p/8.90 c/Chinese l/The deck t/Spicy t/Vegetables o/1000 1930 r/Not halal\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String OUTPUT \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Food with name Mala Xiang Guo and the specified description will be added to the food list.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 6,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/info/BudgetInfo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package seedu.savenus.model.info;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Contains information on Budget command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class BudgetInfo {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String COMMAND_WORD \u003d BudgetCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String INFORMATION \u003d \"Budget command allows you to set your current allowance for\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \" a specified period of time.\\n\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"The added Budget information will depend on the following factors:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"Amount of money\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"Period of time\\n\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String USAGE \u003d \"Budget 100 23\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String OUTPUT \u003d \"Amount of $100.00 will be added to your wallet for 23 days.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 22
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/info/BuyInfo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package seedu.savenus.model.info;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.logic.commands.BuyCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Contains information on Buy command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class BuyInfo {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String COMMAND_WORD \u003d BuyCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String INFORMATION \u003d \"Buy command allows you to buy a Food item from the food list using your\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \" wallet.\\n\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"The buy information will depend on the following factor:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"Index of food you want to buy.\\n\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String USAGE \u003d \"buy 2\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String OUTPUT \u003d \"Money from your wallet will be deducted according to price of Food item 2.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 20
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/info/ClearInfo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package seedu.savenus.model.info;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Contains information on Clear command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class ClearInfo {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String COMMAND_WORD \u003d ClearCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String INFORMATION \u003d \"Clear command allows you to renew the Food list.\\n\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String USAGE \u003d \"clear\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String OUTPUT \u003d \"The Food list will be empty.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 17
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/info/DefaultInfo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package seedu.savenus.model.info;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.logic.commands.DefaultCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Contains information on default command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class DefaultInfo {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String COMMAND_WORD \u003d DefaultCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String INFORMATION \u003d \"Default command allows you to return the Food list to its original order.\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"\\n\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String USAGE \u003d \"default\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String OUTPUT \u003d \"The Food list will be reverted back to its natural order.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 18
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/info/DeleteInfo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package seedu.savenus.model.info;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Contains information on Delete command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class DeleteInfo {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String COMMAND_WORD \u003d DeleteCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String INFORMATION \u003d \"Delete command allows you to delete a Food item from the list.\\n\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"The deleted Food item will depend on the following factor:\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"Index\\n\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String USAGE \u003d \"delete 3\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String OUTPUT \u003d \"Food item number 3 will be deleted.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 19
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/info/EditInfo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package seedu.savenus.model.info;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Contains information on Edit command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class EditInfo {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String COMMAND_WORD \u003d EditCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String INFORMATION \u003d \"Edit command allows you to modify a particular \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"Food item\u0027s information.\\n\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"The edited Food item will depend on the following factors:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"Index (Compulsory)\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"Name\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"Price\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"Category\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"Location\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"Multiple tags\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"Opening hours\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"Restrictions\\n\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String USAGE \u003d \"edit 3 n/Indomie t/Instant\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String OUTPUT \u003d \"Food item 3 will become Indomie with the tag Instant.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 27
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/info/ExitInfo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package seedu.savenus.model.info;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Contains information on Exit command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class ExitInfo {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String COMMAND_WORD \u003d ExitCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String INFORMATION \u003d \"Exit command allows you to quit the app.\\n\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String USAGE \u003d \"exit\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String OUTPUT \u003d \"The app will close.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 17
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/info/FindInfo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package seedu.savenus.model.info;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Contains information on Find command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class FindInfo {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String COMMAND_WORD \u003d FindCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String INFORMATION \u003d \"Find command allows you to get a list of Food items \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"containing the specified keyword.\\n\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"The list will depend on the following factor:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"Keyword\\n\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String USAGE \u003d \"find mala\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String OUTPUT \u003d \"New list of Food item containing the word mala will be displayed.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 20
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/info/HelpInfo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package seedu.savenus.model.info;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Contains information on Help command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class HelpInfo {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String COMMAND_WORD \u003d HelpCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String INFORMATION \u003d \"Help command allows you to view the user guide and list of commands.\\n\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String USAGE \u003d \"help\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String OUTPUT \u003d \"The Help window will appear.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 18
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/info/InfoInfo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package seedu.savenus.model.info;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.logic.commands.InfoCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Contains information on Info command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class InfoInfo {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String COMMAND_WORD \u003d InfoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String INFORMATION \u003d \"Info command allows you to know more about a certain command.\\n\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"The information displayed will depend on the following factor:\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"Specified command\\n\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String USAGE \u003d \"info add\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String OUTPUT \u003d \"Information about the Add command will be displayed.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 19
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/info/ListInfo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package seedu.savenus.model.info;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Contains information on List command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class ListInfo {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String COMMAND_WORD \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String INFORMATION \u003d \"List command allows you to display the full Food item list.\\n\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String USAGE \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String OUTPUT \u003d \"The Food item list will be displayed.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 17
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/info/RecommendInfo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package seedu.savenus.model.info;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.logic.commands.RecommendCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Contains information on Recommend command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class RecommendInfo {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String COMMAND_WORD \u003d RecommendCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String INFORMATION \u003d \"Recommend command allows you obtain a new list of Food item.\\n\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"The recommended Food item list will depend on the following factor:\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"The amount of money in your wallet\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"The price of the Food item\\n\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String USAGE \u003d \"recommend\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String OUTPUT \u003d \"New Food item list will be returned based on your wallet and Food price.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 20
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/info/SortInfo.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package seedu.savenus.model.info;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Contains information on Sort command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class SortInfo {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String COMMAND_WORD \u003d SortCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String INFORMATION \u003d \"Sort command allows you to obtain a new sorted Food item list.\\n\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"The new Food item list will depend on the following factors:\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"Field to be sorted\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            + \"Order of sorting (Ascending / Descending)\\n\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String USAGE \u003d \"sort name ASC\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String OUTPUT \u003d \"The Food item list will be sorted in ascending order based on the Food name.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 20
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/purchase/Purchase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.model.purchase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.util.TimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * Represents a Purchase in the menu."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class Purchase {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private final Food foodPurchased;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private final TimeOfPurchase timeOfPurchase;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public Purchase(Food foodPurchased) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        this.foodPurchased \u003d foodPurchased;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        timeOfPurchase \u003d TimeOfPurchase.generate();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public Purchase(Food foodPurchased, TimeOfPurchase timeOfPurchase) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        this.foodPurchased \u003d foodPurchased;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        this.timeOfPurchase \u003d timeOfPurchase;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public Food getPurchasedFood() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return foodPurchased;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public TimeOfPurchase getTimeOfPurchase() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return timeOfPurchase;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public long getTimeOfPurchaseInMillisSinceEpoch() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return getTimeOfPurchase().getTimeOfPurchaseInMillisSinceEpoch();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public LocalDateTime getTimeOfPurchaseInLocalDateTime() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return getTimeOfPurchase().getTimeOfPurchaseInLocalDateTime();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Returns \"Today\" plus local time if same day, else returns Day of the week plus Date."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public String getTimeAgoString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        long daysAgo \u003d TimeFormatter.getDaysAgo((getTimeOfPurchaseInLocalDateTime()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (daysAgo \u003d\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            return \"Today \" + TimeFormatter.format12HourClock(getTimeOfPurchaseInLocalDateTime());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            return TimeFormatter.formatDayPlusDate(getTimeOfPurchaseInLocalDateTime());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Returns true if both purchase have the same foodPurchased and timeOfPurchase fields."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * This defines a stronger notion of equality between two purchases."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (!(other instanceof Purchase)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        Purchase otherPurchase \u003d (Purchase) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return otherPurchase.getPurchasedFood().equals(getPurchasedFood())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                \u0026\u0026 otherPurchase.getTimeOfPurchase().equals(getTimeOfPurchase());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return Objects.hash(foodPurchased, timeOfPurchase);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return getPurchasedFood().getName() + \" for $\" + getPurchasedFood().getPrice();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 85
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/purchase/PurchaseHistoryList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.model.purchase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.util.stream.StreamSupport;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.purchase.exceptions.PurchaseNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " *  A list of purchases made."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " *  Supports a minimal set of list operations."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class PurchaseHistoryList implements Iterable\u003cPurchase\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private final ObservableList\u003cPurchase\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private final ObservableList\u003cPurchase\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Adds a {@code Purchase} to the list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void add(Purchase toAdd) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Removes the equivalent {@code Purchase} from the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * The {@code Purchase} must exist in the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void remove(Purchase toRemove) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            throw new PurchaseNotFoundException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Replaces the current {@code PurchaseList} with a new {@code PurchaseList}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void setPurchases(PurchaseHistoryList replacement) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Replaces the contents of this list with {@code Purchases}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void setPurchases(List\u003cPurchase\u003e purchases) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        requireAllNonNull(purchases);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        internalList.setAll(purchases);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public ObservableList\u003cPurchase\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public Iterator\u003cPurchase\u003e iterator() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                || (other instanceof PurchaseHistoryList // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                \u0026\u0026 internalList.equals(((PurchaseHistoryList) other).internalList));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        Optional\u003cString\u003e output \u003d StreamSupport.stream(this.spliterator(), false)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                .map((a) -\u003e a.toString())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                .reduce((a, b) -\u003e a + \"\\n\" + b);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (output.isPresent()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            return \"Current Purchases: \\n\" + output.get();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            return \"No Purchases Made\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 96
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/purchase/TimeOfPurchase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.model.purchase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * Factory class to create TimeOfPurchase."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class TimeOfPurchase {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            \"TimeOfPurchase should be a long, and in milliseconds since epoch\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private String timeOfPurchaseInMillisSinceEpochString;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public TimeOfPurchase(String timeOfPurchaseInMillisSinceEpochString) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        requireNonNull(timeOfPurchaseInMillisSinceEpochString);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        this.timeOfPurchaseInMillisSinceEpochString \u003d timeOfPurchaseInMillisSinceEpochString;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public long getTimeOfPurchaseInMillisSinceEpoch() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return Long.parseLong(timeOfPurchaseInMillisSinceEpochString);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public LocalDateTime getTimeOfPurchaseInLocalDateTime() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return LocalDateTime.ofInstant("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            Instant.ofEpochMilli(getTimeOfPurchaseInMillisSinceEpoch()), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Check whether test string is a valid {@code TimeOfPurchase}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @param testDateTimeInMillisSinceEpoch"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static boolean isValidTimeOfPurchase(String testDateTimeInMillisSinceEpoch) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        requireNonNull(testDateTimeInMillisSinceEpoch);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            LocalDateTime.ofInstant(Instant.ofEpochMilli("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                    Long.parseLong(testDateTimeInMillisSinceEpoch)), ZoneId.systemDefault());;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Generate a {$code TimeOfPurchase} instance based on the current time."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static TimeOfPurchase generate() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return new TimeOfPurchase("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                Long.toString(LocalDateTime.now().atZone(ZoneId.systemDefault()).toInstant().toEpochMilli()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (!(other instanceof TimeOfPurchase)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        TimeOfPurchase otherTimeOfPurchase \u003d (TimeOfPurchase) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return otherTimeOfPurchase.getTimeOfPurchaseInMillisSinceEpoch() \u003d\u003d getTimeOfPurchaseInMillisSinceEpoch();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 69
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/purchase/exceptions/PurchaseNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.model.purchase.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * Signals that the operation is unable to find the specified purchase;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class PurchaseNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 6
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/recommend/RecommendationSystem.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "package seedu.savenus.model.recommend;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Location;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " * Represents the Recommendation System of the menu."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "public class RecommendationSystem {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private static final Comparator\u003cFood\u003e DEFAULT_COMPARATOR \u003d (x, y) -\u003e 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private static final Predicate\u003cFood\u003e DEFAULT_PREDICATE \u003d x -\u003e true;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private static RecommendationSystem recommendationSystem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private static double budget \u003d 50.00;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private static Comparator\u003cFood\u003e comparator \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            Comparator.comparingDouble(getInstance()::calculateRecommendation).reversed()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            .thenComparingDouble(x -\u003e Double.parseDouble(x.getPrice().value));;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private static Predicate\u003cFood\u003e predicate \u003d f -\u003e Double.parseDouble(f.getPrice().value) \u003c budget;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    // TODO"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private static final double LIKED_TAG_WEIGHT \u003d 0.1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private static final double LIKED_LOCATION_WEIGHT \u003d 0.2;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private static final double LIKED_CATEGORY_WEIGHT \u003d 0.3;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private static final double DISLIKED_TAG_WEIGHT \u003d 0.3;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private static final double DISLIKED_LOCATION_WEIGHT \u003d 0.4;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private static final double DISLIKED_CATEGORY_WEIGHT \u003d 0.5;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private static final double CHOSEN_TAG_WEIGHT \u003d 0.01;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private static final double CHOSEN_LOCATION_WEIGHT \u003d 0.01;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private static final double CHOSEN_CATEGORY_WEIGHT \u003d 0.01;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private UserRecommendations userRecommendations;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private boolean inUse;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private RecommendationSystem() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static RecommendationSystem getInstance() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        if (recommendationSystem \u003d\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            recommendationSystem \u003d new RecommendationSystem();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return recommendationSystem;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Calculates the recommendation value for each Food provided"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public double calculateRecommendation(Food food) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        double weight \u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        weight +\u003d LIKED_TAG_WEIGHT * userRecommendations.getLikedTags().stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .filter(food.getTags().stream()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                        .map(t -\u003e new Tag(t.tagName.toLowerCase())).collect(Collectors.toSet())::contains)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        weight -\u003d DISLIKED_TAG_WEIGHT * userRecommendations.getDislikedTags().stream()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .filter(food.getTags().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                        .map(t -\u003e new Tag(t.tagName.toLowerCase())).collect(Collectors.toSet())::contains)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        weight +\u003d LIKED_CATEGORY_WEIGHT * userRecommendations.getLikedCategories().stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .filter(new Category(food.getCategory().category.toLowerCase())::equals)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        weight -\u003d DISLIKED_CATEGORY_WEIGHT * userRecommendations.getDislikedCategories().stream()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .filter(new Category(food.getCategory().category.toLowerCase())::equals)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        weight +\u003d LIKED_LOCATION_WEIGHT * userRecommendations.getLikedLocations().stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .filter(new Location(food.getLocation().location.toLowerCase())::equals)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        weight -\u003d DISLIKED_LOCATION_WEIGHT * userRecommendations.getDislikedLocations().stream()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .filter(new Location(food.getLocation().location.toLowerCase())::equals)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return weight;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public Comparator\u003cFood\u003e getRecommendationComparator() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        if (inUse) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            return comparator;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            return DEFAULT_COMPARATOR;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void setRecommendationComparator(Comparator\u003cFood\u003e recommendationComparator) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        comparator \u003d recommendationComparator;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public Predicate\u003cFood\u003e getRecommendationPredicate() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        if (inUse) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            return predicate;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            return DEFAULT_PREDICATE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void setRecommendationPredicate(Predicate\u003cFood\u003e recommendationPredicate) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        predicate \u003d recommendationPredicate;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public boolean isInUse() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return inUse;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void setInUse(boolean inUse) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.inUse \u003d inUse;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void addLikes(Set\u003cCategory\u003e categoryList, Set\u003cTag\u003e tagList, Set\u003cLocation\u003e locationList) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        userRecommendations.addLikes(categoryList, tagList, locationList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void addDislikes(Set\u003cCategory\u003e categoryList, Set\u003cTag\u003e tagList, Set\u003cLocation\u003e locationList) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        userRecommendations.addDislikes(categoryList, tagList, locationList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void removeLikes(Set\u003cCategory\u003e categoryList, Set\u003cTag\u003e tagList, Set\u003cLocation\u003e locationList) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        userRecommendations.removeLikes(categoryList, tagList, locationList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void removeDislikes(Set\u003cCategory\u003e categoryList, Set\u003cTag\u003e tagList, Set\u003cLocation\u003e locationList) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        userRecommendations.removeDislikes(categoryList, tagList, locationList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void clearLikes() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        userRecommendations.clearLikes();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void clearDislikes() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        userRecommendations.clearDislikes();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public UserRecommendations getUserRecommendations() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return userRecommendations;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void setUserRecommendations(UserRecommendations userRecommendations) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.userRecommendations \u003d userRecommendations;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jon-chua": 150
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/recommend/UserRecommendations.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "package seedu.savenus.model.recommend;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Category;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Location;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " * Stores the user\u0027s recommendations"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "public class UserRecommendations {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private Set\u003cTag\u003e likedTags;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private Set\u003cLocation\u003e likedLocations;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private Set\u003cCategory\u003e likedCategories;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private Set\u003cTag\u003e dislikedTags;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private Set\u003cLocation\u003e dislikedLocations;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private Set\u003cCategory\u003e dislikedCategories;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public UserRecommendations() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this(new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public UserRecommendations(Set\u003cCategory\u003e likedCategories, Set\u003cTag\u003e likedTags, Set\u003cLocation\u003e likedLocations,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                               Set\u003cCategory\u003e dislikedCategories, Set\u003cTag\u003e dislikedTags,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                               Set\u003cLocation\u003e dislikedLocations) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.likedCategories \u003d likedCategories;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.likedTags \u003d likedTags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.likedLocations \u003d likedLocations;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.dislikedCategories \u003d dislikedCategories;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.dislikedTags \u003d dislikedTags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.dislikedLocations \u003d dislikedLocations;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Add likes to the recommendation system."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @param categoryList The list of categories"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @param tagList      The list of tags"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @param locationList The list of locations"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void addLikes(Set\u003cCategory\u003e categoryList, Set\u003cTag\u003e tagList, Set\u003cLocation\u003e locationList) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        likedCategories.addAll(categoryList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        likedTags.addAll(tagList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        likedLocations.addAll(locationList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Add dislikes to the recommendation system."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @param categoryList The list of categories"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @param tagList      The list of tags"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @param locationList The list of locations"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void addDislikes(Set\u003cCategory\u003e categoryList, Set\u003cTag\u003e tagList, Set\u003cLocation\u003e locationList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        dislikedCategories.addAll(categoryList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        dislikedTags.addAll(tagList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        dislikedLocations.addAll(locationList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Removes likes from the recommendation system."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @param categoryList The list of categories"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @param tagList      The list of tags"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @param locationList The list of locations"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void removeLikes(Set\u003cCategory\u003e categoryList, Set\u003cTag\u003e tagList, Set\u003cLocation\u003e locationList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        likedCategories.removeAll(categoryList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        likedTags.removeAll(tagList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        likedLocations.removeAll(locationList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Removes dislikes from the recommendation system."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @param categoryList The list of categories"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @param tagList      The list of tags"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @param locationList The list of locations"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void removeDislikes(Set\u003cCategory\u003e categoryList, Set\u003cTag\u003e tagList, Set\u003cLocation\u003e locationList) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        dislikedCategories.removeAll(categoryList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        dislikedTags.removeAll(tagList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        dislikedLocations.removeAll(locationList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Clear the recommendation system\u0027s likes."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void clearLikes() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        likedTags.clear();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        likedLocations.clear();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        likedCategories.clear();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Clear the recommendation system\u0027s dislikes."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void clearDislikes() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        dislikedTags.clear();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        dislikedLocations.clear();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        dislikedCategories.clear();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public Set\u003cTag\u003e getLikedTags() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return likedTags;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public Set\u003cLocation\u003e getLikedLocations() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return likedLocations;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public Set\u003cCategory\u003e getLikedCategories() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return likedCategories;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public Set\u003cTag\u003e getDislikedTags() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return dislikedTags;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public Set\u003cLocation\u003e getDislikedLocations() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return dislikedLocations;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public Set\u003cCategory\u003e getDislikedCategories() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return dislikedCategories;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        if (!(other instanceof UserRecommendations)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        UserRecommendations otherRec \u003d (UserRecommendations) other;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return getLikedCategories().equals(otherRec.getLikedCategories())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                \u0026\u0026 getLikedTags().equals(otherRec.getLikedTags())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                \u0026\u0026 getLikedLocations().equals(otherRec.getLikedLocations())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                \u0026\u0026 getDislikedCategories().equals(otherRec.getDislikedCategories())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                \u0026\u0026 getDislikedTags().equals(otherRec.getDislikedTags())"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                \u0026\u0026 getDislikedLocations().equals(otherRec.getDislikedLocations());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return \"Current likes: Categories: \" + getLikedCategories()"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .stream().map(c -\u003e c.category)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .collect(Collectors.joining(\", \"))"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + \" | Tags: \" + getLikedTags()"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .stream().map(t -\u003e t.tagName)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .collect(Collectors.joining(\", \"))"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + \" | Locations: \" + getLikedLocations()"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .stream().map(l -\u003e l.location)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .collect(Collectors.joining(\", \"))"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + \"\\nCurrent dislikes:\""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + \" Categories: \" + getDislikedCategories()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .stream().map(c -\u003e c.category)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .collect(Collectors.joining(\", \"))"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + \" | Tags: \" + getDislikedTags()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .stream().map(t -\u003e t.tagName)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .collect(Collectors.joining(\", \"))"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + \" | Locations: \" + getDislikedLocations()"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .stream().map(l -\u003e l.location)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .collect(Collectors.joining(\", \"));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jon-chua": 175
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/savings/JsonAdaptedSavings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model.savings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Jackson-friendly version of {@link Savings}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "class JsonAdaptedSavings {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Saving\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private final String savings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Constructs a {@code JsonAdaptedSavings} with the giving saving details."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public JsonAdaptedSavings(@JsonProperty(\"savings\") String savings) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.savings \u003d savings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Converts a given {@code Savings} into the class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param savings Savings to be converted and saved/removed from Jackson File."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public JsonAdaptedSavings(Savings savings) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.savings \u003d savings.toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Converts this Jackson-friendly adapted food object into the model\u0027s {@code Savings}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Savings toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        if (savings \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Savings.class.getSimpleName()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        if (!Savings.isValidSaving(savings)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new IllegalValueException(Savings.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return new Savings(savings);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 47
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/savings/JsonSavingsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model.savings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * A class to access Savings Account data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class JsonSavingsStorage implements SavingsStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonSavingsStorage.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public JsonSavingsStorage(Path filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Path getSavingsAccountFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Optional\u003cReadOnlySavingsAccount\u003e readSavingsAccount() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return readSavingsAccount(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Optional\u003cReadOnlySavingsAccount\u003e readSavingsAccount(Path filePath)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Optional\u003cJsonSerializableSavingsAccount\u003e jsonSavingsAccount \u003d JsonUtil.readJsonFile(filePath,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                JsonSerializableSavingsAccount.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        if (jsonSavingsAccount.isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            return Optional.of(jsonSavingsAccount.get().toModelType());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            logger.info((\"Illegal values found in \" + filePath + e.getMessage()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Write into the user\u0027s savings account from the unmodifiable savings account."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param savingsAccount unmodifiable savings account of the user."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @throws IOException from {@link #saveSavingsAccount(ReadOnlySavingsAccount, Path)}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void saveSavingsAccount(ReadOnlySavingsAccount savingsAccount) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        saveSavingsAccount(savingsAccount, filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Similar to {@link #saveSavingsAccount(ReadOnlySavingsAccount)}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param savingsAccount savingsAccount of user must be provided."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param filePath location of the savings account data cannot be null."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @throws IOException when writing to the file fails."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void saveSavingsAccount(ReadOnlySavingsAccount savingsAccount, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        requireNonNull(savingsAccount);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableSavingsAccount(savingsAccount), filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 85
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/savings/JsonSerializableSavingsAccount.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model.savings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * An Immutable Savings Account that is serializable to JSON format."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "@JsonRootName(value \u003d \"savings\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "class JsonSerializableSavingsAccount {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    // Save all the savings that have been made so far by the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private final List\u003cJsonAdaptedSavings\u003e savingsHistory \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Construct a {@code JsonSerializableSavingsAccount} with the given savingsHistory."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public JsonSerializableSavingsAccount(@JsonProperty(\"savingsHistory\") List\u003cJsonAdaptedSavings\u003e savingsHistory) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.savingsHistory.addAll(savingsHistory);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Converts a given {@code ReadOnlySavingsAccount} into this class for Jackson use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param savingsAccount future changes will not affect the created {@code JsonSerializableSavingsAccount}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public JsonSerializableSavingsAccount(ReadOnlySavingsAccount savingsAccount) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        savingsHistory.addAll(savingsAccount.getSavingsHistory().stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                .map(JsonAdaptedSavings::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Converts this savingsAccount into the model\u0027s {@code SavingsAccount} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public SavingsAccount toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        SavingsAccount savingsAccount \u003d new SavingsAccount();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        for (JsonAdaptedSavings jsonAdaptedSavings : savingsHistory) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            Savings savings \u003d jsonAdaptedSavings.toModelType();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            savingsAccount.addSavings(savings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return savingsAccount;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 53
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/savings/ReadOnlySavingsAccount.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model.savings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Unmodifiable view of a savings account."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public interface ReadOnlySavingsAccount {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Returns an unmodifiable view of the SavingsHistory."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    ObservableList\u003cSavings\u003e getSavingsHistory();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 14
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/savings/Savings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model.savings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Acts as the amount of money to be added into the {@code SavingsAccount} of the user"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * and also the amount of money to deduct from the {@code Wallet} of the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class Savings {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            \"Please provide a savings amount with 0 or 2 decimal places.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            + \"For example: 1.50 or 200\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(0|(0(\\\\.\\\\d{2,2}))|[1-9]+(\\\\d*(\\\\.\\\\d{2,2})?))\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    // Identity fields of a saving."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private final String savingsAmount; // the amount to be saved."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * TODO @FATCLARENCE"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Add time stamp of savings."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    // Default starting savings amount."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Savings() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        savingsAmount \u003d \"0.00\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Savings(String savings) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        requireNonNull(savings);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        checkArgument(isValidSaving(savings), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        savingsAmount \u003d convert(savings);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Returns true if a given string is a valid saving representation."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static boolean isValidSaving(String saving) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        if (saving.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Checks if the input savings has decimal digits or not."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param savingsAmount the input String."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @return true if the input savings has no decimal digits."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public boolean isPerfectNumber(String savingsAmount) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            Integer.parseInt(savingsAmount);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Converts the input savings to a valid string representation."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param savingsAmount the input String."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @return the correct String representation of the input savings."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public String convert(String savingsAmount) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        if (isPerfectNumber(savingsAmount)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            return String.format(\"%d.00\", Integer.parseInt(savingsAmount));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            return String.format(\"%.2f\", Double.parseDouble(savingsAmount));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return savingsAmount;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 79
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/savings/SavingsAccount.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model.savings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * A savings account to track the user\u0027s savings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class SavingsAccount implements ReadOnlySavingsAccount {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    // Testing this without the recommended non-static initialization blocks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private final SavingsHistory savingsHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public SavingsAccount() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        savingsHistory \u003d new SavingsHistory();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Creates an Menu using the foods in the {@code toBeCopied}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public SavingsAccount(ReadOnlySavingsAccount toBeCopied) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Adds a saving into the savings account."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void addSavings(Savings savings) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        savingsHistory.add(savings);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Resets the existing data of this {@code SavingsAccount} with {@code newSavings}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void resetData(ReadOnlySavingsAccount newSavings) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        requireNonNull(newSavings);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        // Overwrite the current savings history since there have been new ones added."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        savingsHistory.setSavingsHistory(newSavings.getSavingsHistory());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public ObservableList\u003cSavings\u003e getSavingsHistory() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return savingsHistory.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            || (other instanceof SavingsAccount"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            \u0026\u0026 savingsHistory.equals(((SavingsAccount) other).savingsHistory));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return savingsHistory.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 60
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/savings/SavingsHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model.savings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * A list of the user\u0027s savings history."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class SavingsHistory implements Iterable\u003cSavings\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private final ObservableList\u003cSavings\u003e internalSavingsHistory \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private final ObservableList\u003cSavings\u003e internalUnmodifiableSavingsHistory \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalSavingsHistory);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Adds a saving into the SavingsHistory."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void add(Savings toAdd) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        internalSavingsHistory.add(toAdd);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code SavingHistory).}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @return ObservableList of the unmodifiable SavingHistory."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public ObservableList\u003cSavings\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return internalUnmodifiableSavingsHistory;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Iterator\u003cSavings\u003e iterator() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return internalSavingsHistory.iterator();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    // For Tests"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                || (other instanceof SavingsHistory"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                \u0026\u0026 internalSavingsHistory.equals(((SavingsHistory) other).internalSavingsHistory));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return internalSavingsHistory.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void setSavingsHistory(List\u003cSavings\u003e savings) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        requireNonNull(savings);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        internalSavingsHistory.setAll(savings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 59
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/savings/SavingsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model.savings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Represents a storage for {@link SavingsAccount}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public interface SavingsStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    Path getSavingsAccountFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Returns SavingsAccount data as a {@link ReadOnlySavingsAccount}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * If storage file is not found, returns {@code Optional.empty()}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    Optional\u003cReadOnlySavingsAccount\u003e readSavingsAccount() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Implement another read method to read from filePath."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    Optional\u003cReadOnlySavingsAccount\u003e readSavingsAccount(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Saves the given {@link ReadOnlySavingsAccount} to the storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param savingsAccount cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    void saveSavingsAccount(ReadOnlySavingsAccount savingsAccount) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @see #saveSavingsAccount(ReadOnlySavingsAccount)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    void saveSavingsAccount(ReadOnlySavingsAccount savingsAccount, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 42
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/sorter/CustomSorter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.model.sorter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Creates a simple CustomSorter to sore the menu items every time a command is executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class CustomSorter {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private FoodComparator foodComparator;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Creates a new simple CustomSorter."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public CustomSorter() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.foodComparator \u003d new FoodComparator(new ArrayList\u003cString\u003e());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Sets the foodComparator based on a new list of fields."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param fields the new list of fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void setComparator(List\u003cString\u003e fields) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.foodComparator \u003d new FoodComparator(fields);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Gets the foodComparator from the CustomSorter."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return the foodComparator to sort the foods."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public FoodComparator getComparator() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return this.foodComparator;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (obj instanceof CustomSorter) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return this.getComparator().equals(((CustomSorter) obj).getComparator());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 47
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/sorter/DefaultComparator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.model.sorter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * A Simple Comparator that compares by category, name and then price."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class DefaultComparator implements Comparator\u003cFood\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public int compare(Food a, Food b) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        int categoryComparisonFactor \u003d a.getCategory().compareTo(b.getCategory());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        int nameComparisonFactor \u003d a.getName().compareTo(b.getName());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        int priceComparisonFactor \u003d a.getPrice().compareTo(b.getPrice());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (categoryComparisonFactor !\u003d 0) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return categoryComparisonFactor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            if (nameComparisonFactor !\u003d 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                return nameComparisonFactor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                return priceComparisonFactor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 27
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/sorter/FieldComparator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.model.sorter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.food.Field;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * A Simple Comparator which compares two fields."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class FieldComparator implements Comparator\u003cField\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public int compare(Field field, Field other) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return field.compareTo(other);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 15
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/sorter/FoodComparator.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.model.sorter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.food.Field;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * A simple Comparator to arrange Food based on their fields."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class FoodComparator implements Comparator\u003cFood\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private List\u003cString\u003e fieldList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public FoodComparator(List\u003cString\u003e fieldList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.fieldList \u003d fieldList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public int compare(Food a, Food b) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        for (int i \u003d 0; i \u003c fieldList.size(); i \u003d i + 2) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            String field \u003d fieldList.get(i);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            Field f1 \u003d a.getField(field);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            Field f2 \u003d b.getField(field);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            if (isDirectionAscending(fieldList.get(i + 1))) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                int comparisonFactor \u003d f1.compareTo(f2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                if (comparisonFactor !\u003d 0) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    return comparisonFactor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                int comparisonFactor \u003d -1 * f1.compareTo(f2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                if (comparisonFactor !\u003d 0) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    return comparisonFactor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public List\u003cString\u003e getFieldList() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return this.fieldList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Simply checks if the direction to be sorted is ascending or descending, for sorting purposes."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param direction the direction to be sorted."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @return true if the direction is ascending. False if otherwise."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean isDirectionAscending(String direction) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return direction.equals(\"ASC\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (this \u003d\u003d obj) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (obj instanceof FoodComparator) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return this.getFieldList().equals(((FoodComparator) obj).getFieldList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 66
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Represents a Tag in the food menu."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    // Needed for Jackson"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public Tag() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        tagName \u003d \"none\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 3,
      "jon-chua": 5,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Menu;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.ReadOnlyMenu;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Category;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Location;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.OpeningHours;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Price;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Restrictions;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.Wallet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Contains utility methods for populating {@code Menu} with sample data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static Food[] getSampleFood() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return new Food[] {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            new Food(new Name(\"Mala Xiang Guo\"), new Price(\"10\"), new Description(\"Spicy goodness from China\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new Category(\"Chinese\"), getTagSet(\"Spicy\"), new Location(\"The Deck\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    new OpeningHours(\"0900 1930\"), new Restrictions(\"Not Halal\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            new Food(new Name(\"Ji Fan\"), new Price(\"3.99\"), new Description(\"Staple food for students\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new Category(\"Chinese\"), getTagSet(\"Chicken\", \"Rice\"), new Location(\"Frontier Canteen\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    new OpeningHours(\"0800 1700\"), new Restrictions(\"Not Halal\")),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            new Food(new Name(\"Wagyu steak\"), new Price(\"50\"), new Description(\"Most expensive food in NUS\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new Category(\"Western\"), getTagSet(\"Japanese\", \"Expensive\"), new Location(\"Atas Place\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    new OpeningHours(\"1000 1700\"), new Restrictions(\"Expensive\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            new Food(new Name(\"Chicken noodle soup\"), new Price(\"5.99\"), new Description(\"Chicken, noodle and soup\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new Category(\"Taiwanese\"), getTagSet(\"Healthy\", \"Earthy\"), new Location(\"The Terrace\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    new OpeningHours(\"1000 1700\"), new Restrictions(\"Not Halal\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            new Food(new Name(\"Cheesy spaghetti\"), new Price(\"5.80\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                new Description(\"Italian noodle with epic cheese\"), new Category(\"Italian\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    getTagSet(\"Cheese\", \"Pasta\", \"Healthy\"), new Location(\"The Tea Party\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    new OpeningHours(\"1100 1900\"), new Restrictions(\"Contains Dairy\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            new Food(new Name(\"Vending Machine Sandwich\"), new Price(\"4\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                new Description(\"Companion for boring ICube Lectures\"), new Category(\"Vending Machine Food\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                getTagSet(\"colleagues\"), new Location(\"Some ulu location\"), new OpeningHours(\"0000 2359\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                new Restrictions(Restrictions.DEFAULT_VALUE))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        };"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static Wallet getSampleWallet() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return new Wallet();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static ReadOnlyMenu getSampleMenu() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Menu sampleMenu \u003d new Menu();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        for (Food sampleFood : getSampleFood()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            sampleMenu.addFood(sampleFood);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        sampleMenu.setWallet(getSampleWallet());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return sampleMenu;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 56,
      "jon-chua": 9,
      "Raikonen": 6
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/util/TimeFormatter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * Time Formatter class to format {@code LocalDateTime} input into user-readable strings."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class TimeFormatter {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Format input time and calculate the number of days until now."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * i.e. 0 for same day, 1 for yesterday ..."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @param inputTimeInLocalDateTime Input time"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static long getDaysAgo(LocalDateTime inputTimeInLocalDateTime) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return getDaysAgo(inputTimeInLocalDateTime, LocalDateTime.now());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Format input times and compare them to get number of days between them."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * i.e. 0 for same day, 1 for yesterday ..."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @param startTimeInLocalDateTime Input time"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static long getDaysAgo(LocalDateTime startTimeInLocalDateTime, LocalDateTime endTimeInLocalDateTime) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        LocalDate inputTimeInLocalDate \u003d startTimeInLocalDateTime.toLocalDate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return ChronoUnit.DAYS.between(inputTimeInLocalDate, endTimeInLocalDateTime);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Format to KK:mm a."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @param inputTimeInLocalDateTime"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static String format12HourClock(LocalDateTime inputTimeInLocalDateTime) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return inputTimeInLocalDateTime.format(DateTimeFormatter.ofPattern(\"KK:mm a\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Format to EEE, dd MMM."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @param inputTimeInLocalDateTime"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static String formatDayPlusDate(LocalDateTime inputTimeInLocalDateTime) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return inputTimeInLocalDateTime.format(DateTimeFormatter.ofPattern(\"EEE, dd MMM\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 46
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/wallet/DaysToExpire.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.model.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import javafx.beans.property.IntegerProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * Represents the number of days to budget expiration in the application."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class DaysToExpire {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            \"Budget Duration should be a positive integer\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static final String INTEGER_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            \"Due to Integer limitations, this application will not accept Budget Duration of more than 365 days\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"0|[1-9]\\\\d*$\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private final IntegerProperty daysToExpireProperty;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private LocalDateTime expirationDateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Constructs a {@code daysToExpire}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @param newDaysToExpireString A new, valid daysToExpire string."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public DaysToExpire(String newDaysToExpireString) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        requireNonNull(newDaysToExpireString);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        checkArgument(isValidDaysToExpire(newDaysToExpireString), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        daysToExpireProperty \u003d new SimpleIntegerProperty(Integer.parseInt(newDaysToExpireString));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        expirationDateTime \u003d LocalDateTime.now().plusDays(Integer.parseInt(newDaysToExpireString));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Update number of days left with respect to current time."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void updateDaysToExpire() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        daysToExpireProperty.set((int) LocalDateTime.now().until(expirationDateTime, ChronoUnit.DAYS) + 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Returns true if a given string is a valid daysToExpire number."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static boolean isValidDaysToExpire(String test) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Returns true if this instance of {@code DaysToExpire} is out of bounds."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public boolean isOutOfBounds() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return (getDaysToExpire() \u003e 365);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Returns the {@code IntegerProperty} of this instance."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public IntegerProperty getDaysToExpireProperty() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return daysToExpireProperty;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Returns the {@code int} value of this instance"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public int getDaysToExpire() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return daysToExpireProperty.get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Replaces the old {@code DaysToExpire} with the new {@code DaysToExpire}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void setDaysToExpire(DaysToExpire newDaysToExpire) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        daysToExpireProperty.setValue(newDaysToExpire.getDaysToExpire());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        expirationDateTime \u003d newDaysToExpire.expirationDateTime;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return (getDaysToExpire() \u003d\u003d 1) ? \"today\" : String.format(\"%d days\", getDaysToExpire());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (!(other instanceof DaysToExpire)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        DaysToExpire otherDaysToExpire \u003d (DaysToExpire) other;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return otherDaysToExpire.getDaysToExpire() \u003d\u003d this.getDaysToExpire();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 99
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/wallet/RemainingBudget.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.model.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * Represents a {@code Wallet}\u0027s {@code RemainingBudget} amount in the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class RemainingBudget {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            \"Budget Amount should only contain numbers and have either 0 or 2 decimal places\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static final String FLOATING_POINT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            \"Due to Floating Point limitations, \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            + \"this application will not accept Budget Amounts higher than 1 million dollars\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(0|(0(\\\\.\\\\d{2,2}))|[1-9]+(\\\\d*(\\\\.\\\\d{2,2})?))\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private final StringProperty remainingBudgetProperty;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Constructs a {@code RemainingBudget}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Requires check whether budget amount is invalid (Less than 0 or more than 1 million dollars)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @param newRemainingBudgetString A valid {@code RemainingBudget} string."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public RemainingBudget(String newRemainingBudgetString) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        requireNonNull(newRemainingBudgetString);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        checkArgument(isValidRemainingBudget(newRemainingBudgetString), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (!newRemainingBudgetString.contains(\".\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            newRemainingBudgetString +\u003d \".00\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        remainingBudgetProperty \u003d new SimpleStringProperty(\"$\" + newRemainingBudgetString);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Returns true if a given string is a valid {@code RemainingBudget}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static boolean isValidRemainingBudget(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Returns true if this instance of {@code RemainingBudget} is out of bounds."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public boolean isOutOfBounds() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return getRemainingBudgetAmount().compareTo(new BigDecimal(1000000.00)) \u003d\u003d 1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Returns the {@code StringProperty} of this instance."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public StringProperty getRemainingBudgetProperty() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return remainingBudgetProperty;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Returns the {@code double} value of this instance."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public BigDecimal getRemainingBudgetAmount() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return new BigDecimal(remainingBudgetProperty.get().substring(1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Set new user\u0027s {@code RemainingBudget}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void setRemainingBudget(RemainingBudget newRemainingBudget) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        remainingBudgetProperty.setValue(\"$\" + newRemainingBudget.getRemainingBudgetAmount().toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return String.format(\"$%.02f\", getRemainingBudgetAmount());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (!(other instanceof RemainingBudget)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        RemainingBudget otherRemainingBudget \u003d (RemainingBudget) other;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return otherRemainingBudget.getRemainingBudgetAmount().compareTo(this.getRemainingBudgetAmount()) \u003d\u003d 0;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 92
    }
  },
  {
    "path": "src/main/java/seedu/savenus/model/wallet/Wallet.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.model.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import javafx.beans.property.IntegerProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.food.Price;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.Savings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * Represents a user\u0027s Wallet in the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * Guarantees: mutable;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * JSON File should have wallet: { remainingBudget: 0, daysToExpire: 0 } property"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class Wallet {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private RemainingBudget remainingBudget;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private DaysToExpire daysToExpire;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Default constructor that sets {@code remainingBudget} and {@code daysToExpire} to both 0."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public Wallet() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        this.remainingBudget \u003d new RemainingBudget(\"0.00\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        this.daysToExpire \u003d new DaysToExpire(\"0\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Overloaded constructor that sets {@code remainingBudget} and {@code daysToExpire} according to input arguments."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public Wallet(String remainingBudgetStr, String daysToExpireStr) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        this.remainingBudget \u003d new RemainingBudget(remainingBudgetStr);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        this.daysToExpire \u003d new DaysToExpire(daysToExpireStr);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Overloaded constructor that sets {@code remainingBudget} and {@code daysToExpire} according to input arguments."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public Wallet(RemainingBudget remainingBudget, DaysToExpire daysToExpire) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        this.remainingBudget \u003d remainingBudget;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        this.daysToExpire \u003d daysToExpire;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Returns {@code remainingBudget}\u0027s {@code StringProperty}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public StringProperty getRemainingBudgetProperty() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return remainingBudget.getRemainingBudgetProperty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Returns the {@code wallet}\u0027s {@code remainingBudget}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public RemainingBudget getRemainingBudget() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return remainingBudget;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Returns {@code remainingBudget}\u0027s {@code double} value."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public BigDecimal getRemainingBudgetAmount() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return remainingBudget.getRemainingBudgetAmount();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Set {@code remainingBudget} with user\u0027s input."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @param newRemainingBudget New {@code RemainingBudget} created from user\u0027s input"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void setRemainingBudget(RemainingBudget newRemainingBudget) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        remainingBudget.setRemainingBudget(newRemainingBudget);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Returns {@code DaysToExpire}\u0027s IntegerProperty."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public IntegerProperty getDaysToExpireProperty() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return daysToExpire.getDaysToExpireProperty();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Returns the {@code wallet}\u0027s {@code daysToExpire}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public DaysToExpire getDaysToExpire() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return daysToExpire;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Returns {@code daysToExpire}\u0027s {@code int} value."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public int getNumberOfDaysToExpire() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return daysToExpire.getDaysToExpire();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Set {@code daysToExpire} with user\u0027s input."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @param newDaysToExpire New {@code DaysToExpire} created from user\u0027s input"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public final void setDaysToExpire(DaysToExpire newDaysToExpire) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        daysToExpire.setDaysToExpire(newDaysToExpire);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Update number of days left with respect to current time."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void updateDaysToExpire() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        daysToExpire.updateDaysToExpire();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Pay the input {@code Price} out of wallet."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @param price {@code Price} to be deducted"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @throws CommandException Throws {@code CommandException} if there are insufficient funds in user\u0027s {@code Wallet}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void deduct(Price price) throws CommandException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // Check whether wallet has enough funds"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (new BigDecimal(price.toString()).compareTo(getRemainingBudgetAmount()) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INSUFFICIENT_FUNDS + \" to make purchase!\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            BigDecimal remainingBudget \u003d getRemainingBudgetAmount().subtract(new BigDecimal(price.toString()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            setRemainingBudget(new RemainingBudget(remainingBudget.toString()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Overloaded method to allow deduction of {@code Savings} out of wallet."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param savings {@code Savings} to be deducted"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @throws CommandException Throws {@code CommandException} if there are insufficient funds in user\u0027s {@code Wallet}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void deduct(Savings savings) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        // Check whether wallet has enough funds to be saved"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        if (new BigDecimal(savings.toString()).compareTo(getRemainingBudgetAmount()) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INSUFFICIENT_FUNDS + \" to add to savings account!\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            // If enough funds, subtract from the wallet the amount to be saved."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            BigDecimal remainingBudget \u003d getRemainingBudgetAmount().subtract(new BigDecimal(savings.toString()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            setRemainingBudget(new RemainingBudget(remainingBudget.toString()));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return \"Current Budget: \" + this.getRemainingBudgetAmount() + \"\\n\""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                + \"Days to Expire: \" + this.getNumberOfDaysToExpire();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                || (other instanceof Wallet // instanceof handles nulls"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                \u0026\u0026 getRemainingBudget().equals(((Wallet) other).getRemainingBudget()) // state check"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                \u0026\u0026 getDaysToExpire().equals(((Wallet) other).getDaysToExpire())); // state check"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 20,
      "Raikonen": 137
    }
  },
  {
    "path": "src/main/java/seedu/savenus/storage/CustomSortStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.recommend.UserRecommendations;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.sorter.CustomSorter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Creates a storage to store fields for the CustomSort/"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public interface CustomSortStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    Path getSortFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns Recommendation data as a {@link CustomSorter}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    Optional\u003cCustomSorter\u003e readFields() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @see #getSortFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    Optional\u003cCustomSorter\u003e readFields(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Saves the given {@link UserRecommendations} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param sorter cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    void saveFields(CustomSorter sorter) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @see #saveFields(CustomSorter)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    void saveFields(CustomSorter sorter, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 44
    }
  },
  {
    "path": "src/main/java/seedu/savenus/storage/JsonAdaptedCustomSort.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.parser.FieldParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.sorter.CustomSorter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " *  Jackson-friendly version of {@link CustomSorter}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class JsonAdaptedCustomSort {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"CustomSorter fields is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private List\u003cString\u003e fields;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a {@code JsonAdaptedRecs} with the given user\u0027s recommendations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public JsonAdaptedCustomSort(@JsonProperty(\"fields\") List\u003cString\u003e fields) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.fields \u003d fields;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Converts a given {@code UserRecommendations} into this class for Jackson use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public JsonAdaptedCustomSort(CustomSorter source) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        fields \u003d source.getComparator().getFieldList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Converts this Jackson-friendly adapted wallet object into the model\u0027s {@code UserRecommendations} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted UserRecommendations."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public CustomSorter toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        CustomSorter sorter;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (fields \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                FieldParser fieldParser \u003d new FieldParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                fieldParser.checkKeywords(fields);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                throw new IllegalValueException(e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        sorter \u003d new CustomSorter();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        sorter.setComparator(fields);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return sorter;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 59
    }
  },
  {
    "path": "src/main/java/seedu/savenus/storage/JsonAdaptedFood.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Location;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.OpeningHours;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Price;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Restrictions;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Jackson-friendly version of {@link Food}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "class JsonAdaptedFood {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Food\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private final String price;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private final String category;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private final String location;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private final String openingHours;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private final String restrictions;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a {@code JsonAdaptedFood} with the given food details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public JsonAdaptedFood(@JsonProperty(\"name\") String name, @JsonProperty(\"price\") String price,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                           @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                           @JsonProperty(\"category\") String category,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                           @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                           @JsonProperty(\"location\") String location,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                           @JsonProperty(\"openingHours\") String openingHours,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                           @JsonProperty(\"restrictions\") String restrictions) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        this.openingHours \u003d openingHours;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        this.restrictions \u003d restrictions;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Converts a given {@code Food} into this class for Jackson use."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param source Food item to be converted be saved/removed from Jackson file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public JsonAdaptedFood(Food source) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        price \u003d source.getPrice().value;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        category \u003d source.getCategory().category;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        location \u003d source.getLocation().location;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        openingHours \u003d source.getOpeningHours().openingHours;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        restrictions \u003d source.getRestrictions().restrictions;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Converts this Jackson-friendly adapted food object into the model\u0027s {@code Food} object."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted food."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Food toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        final List\u003cTag\u003e foodTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            foodTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (price \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (!Price.isValidPrice(price)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new IllegalValueException(Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        final Price modelPrice \u003d new Price(price);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        final Description modelDesciption \u003d new Description(description);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        if (location \u003d\u003d null) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    Location.class.getSimpleName()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        if (!Location.isValidLocation(location)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            throw new IllegalValueException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        final Location modelLocation \u003d new Location(location);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (category \u003d\u003d null) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (!Category.isValidCategory(category)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new IllegalValueException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        final Category modelCategory \u003d new Category(category);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (openingHours \u003d\u003d null) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                    OpeningHours.class.getSimpleName()));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (!OpeningHours.isValidOpeningHours(openingHours)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            throw new IllegalValueException(OpeningHours.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        final OpeningHours modelOpeningHours \u003d new OpeningHours(openingHours);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (restrictions \u003d\u003d null) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                    Restrictions.class.getSimpleName()));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (!Restrictions.isValidRestrictions(restrictions)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            throw new IllegalValueException(Restrictions.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        final Restrictions modelRestrictions \u003d new Restrictions(restrictions);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(foodTags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return new Food(modelName, modelPrice, modelDesciption, modelCategory, modelTags,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                        modelLocation, modelOpeningHours, modelRestrictions);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 12,
      "seanlowjk": 33,
      "robytanama": 27,
      "jon-chua": 25,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/savenus/storage/JsonAdaptedPurchase.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.purchase.Purchase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.purchase.TimeOfPurchase;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * Jackson-friendly version of {@link Purchase}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "class JsonAdaptedPurchase {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Purchase\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private final JsonAdaptedFood purchasedFood;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private final String timeOfPurchaseInMillisSinceEpochString;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Constructs a {@code JsonAdaptedPurchase} with the given Purchase details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public JsonAdaptedPurchase(@JsonProperty(\"purchasedFood\") JsonAdaptedFood purchasedFood,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                               @JsonProperty(\"timeOfPurchaseInMillisSinceEpochString\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                                              String timeOfPurchaseInMillisSinceEpochString) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        this.purchasedFood \u003d purchasedFood;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        this.timeOfPurchaseInMillisSinceEpochString \u003d timeOfPurchaseInMillisSinceEpochString;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Converts a given {@code Purchase} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public JsonAdaptedPurchase(Purchase source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        this.purchasedFood \u003d new JsonAdaptedFood(source.getPurchasedFood());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        this.timeOfPurchaseInMillisSinceEpochString \u003d Long.toString(source.getTimeOfPurchaseInMillisSinceEpoch());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Converts this Jackson-friendly adapted Purchase object into the model\u0027s {@code Purchase} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted Purchase."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public Purchase toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (purchasedFood \u003d\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Food.class.getSimpleName()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        final Food modelPurchasedFood \u003d purchasedFood.toModelType();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (timeOfPurchaseInMillisSinceEpochString \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                    TimeOfPurchase.class.getSimpleName()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (!TimeOfPurchase.isValidTimeOfPurchase(timeOfPurchaseInMillisSinceEpochString)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            throw new IllegalValueException(TimeOfPurchase.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        final TimeOfPurchase modelTimeOfPurchase \u003d new TimeOfPurchase(timeOfPurchaseInMillisSinceEpochString);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return new Purchase(modelPurchasedFood, modelTimeOfPurchase);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 62
    }
  },
  {
    "path": "src/main/java/seedu/savenus/storage/JsonAdaptedRecs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "package seedu.savenus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Category;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Location;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.recommend.UserRecommendations;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " * Jackson-friendly version of {@link UserRecommendations}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "class JsonAdaptedRecs {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"User Recommendation\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String DUPLICATE_ENTRY_OPPOSING_FOUND \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            \"Duplicate entry found in opposing user recommendation list!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private Set\u003cString\u003e likedLocations;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private Set\u003cString\u003e likedTags;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private Set\u003cString\u003e likedCategories;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private Set\u003cString\u003e dislikedLocations;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private Set\u003cString\u003e dislikedTags;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private Set\u003cString\u003e dislikedCategories;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Constructs a {@code JsonAdaptedRecs} with the given user\u0027s recommendations."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public JsonAdaptedRecs(@JsonProperty(\"likedCategories\") Set\u003cString\u003e likedCategories,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                           @JsonProperty(\"likedTags\") Set\u003cString\u003e likedTags,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                           @JsonProperty(\"likedLocations\") Set\u003cString\u003e likedLocations,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                           @JsonProperty(\"dislikedCategories\") Set\u003cString\u003e dislikedCategories,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                           @JsonProperty(\"dislikedTags\") Set\u003cString\u003e dislikedTags,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                           @JsonProperty(\"dislikedLocations\") Set\u003cString\u003e dislikedLocations) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.likedCategories \u003d likedCategories;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.likedTags \u003d likedTags;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.likedLocations \u003d likedLocations;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.dislikedCategories \u003d dislikedCategories;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.dislikedTags \u003d dislikedTags;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.dislikedLocations \u003d dislikedLocations;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Converts a given {@code UserRecommendations} into this class for Jackson use."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public JsonAdaptedRecs(UserRecommendations source) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        likedCategories \u003d source.getLikedCategories().stream().map(c -\u003e c.category).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        likedTags \u003d source.getLikedTags().stream().map(t -\u003e t.tagName).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        likedLocations \u003d source.getLikedLocations().stream().map(l -\u003e l.location).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        dislikedCategories \u003d source.getDislikedCategories().stream().map(c -\u003e c.category).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        dislikedTags \u003d source.getDislikedTags().stream().map(t -\u003e t.tagName).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        dislikedLocations \u003d source.getDislikedLocations().stream().map(l -\u003e l.location).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Converts this Jackson-friendly adapted wallet object into the model\u0027s {@code UserRecommendations} object."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted UserRecommendations."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public UserRecommendations toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        if (likedLocations \u003d\u003d null || dislikedLocations \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    Location.class.getSimpleName()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        } else if (likedTags \u003d\u003d null || dislikedTags \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    Tag.class.getSimpleName()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        } else if (likedCategories \u003d\u003d null || dislikedCategories \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    Category.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            // Convert all to lowercase, and parse into new category / tag / location"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            // This will throw IllegalArgumentExceptions if there are any problems with the saved data"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            Set\u003cCategory\u003e newLikedCategories \u003d likedCategories.stream()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    .map(c -\u003e new Category(c.toLowerCase()))"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            Set\u003cTag\u003e newLikedTags \u003d likedTags.stream()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    .map(t -\u003e new Tag(t.toLowerCase()))"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            Set\u003cLocation\u003e newLikedLocation \u003d likedLocations.stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    .map(l -\u003e new Location(l.toLowerCase()))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            Set\u003cCategory\u003e newDislikedCategories \u003d dislikedCategories.stream()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    .map(c -\u003e new Category(c.toLowerCase()))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            Set\u003cTag\u003e newDislikedTags \u003d dislikedTags.stream()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    .map(t -\u003e new Tag(t.toLowerCase()))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            Set\u003cLocation\u003e newDislikedLocation \u003d dislikedLocations.stream()"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    .map(l -\u003e new Location(l.toLowerCase()))"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            // Check for no overlaps"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            if (newLikedCategories.stream().anyMatch(newDislikedCategories::contains)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    || newLikedTags.stream().anyMatch(newDislikedTags::contains)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    || newLikedLocation.stream().anyMatch(newDislikedLocation::contains)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                throw new IllegalArgumentException(DUPLICATE_ENTRY_OPPOSING_FOUND);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            return new UserRecommendations(newLikedCategories, newLikedTags, newLikedLocation,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    newDislikedCategories, newDislikedTags, newDislikedLocation);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            throw new IllegalValueException(e.getMessage());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jon-chua": 118
    }
  },
  {
    "path": "src/main/java/seedu/savenus/storage/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/savenus/storage/JsonAdaptedWallet.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.DaysToExpire;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.RemainingBudget;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.Wallet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * Jackson-friendly version of {@link Wallet}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "class JsonAdaptedWallet {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Wallet\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private final String remainingBudget;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private final String daysToExpire;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Constructs a {@code JsonAdaptedWallet} with the given wallet details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public JsonAdaptedWallet(@JsonProperty(\"remainingBudget\") String remainingBudget,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                             @JsonProperty(\"daysToExpire\") String daysToExpire) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        this.remainingBudget \u003d remainingBudget;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        this.daysToExpire \u003d daysToExpire;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Converts a given {@code Wallet} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public JsonAdaptedWallet(Wallet source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        remainingBudget \u003d String.format(\"%.02f\", source.getRemainingBudgetAmount());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        daysToExpire \u003d String.format(\"%d\", source.getNumberOfDaysToExpire());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Converts this Jackson-friendly adapted wallet object into the model\u0027s {@code Wallet} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted wallet."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public Wallet toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // Sanitisation for remainingBudget"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (remainingBudget \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                    RemainingBudget.class.getSimpleName()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (!RemainingBudget.isValidRemainingBudget(remainingBudget)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            throw new IllegalValueException(RemainingBudget.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (new RemainingBudget(remainingBudget).isOutOfBounds()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            throw new IllegalValueException(RemainingBudget.FLOATING_POINT_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        final RemainingBudget modelRemainingBudget \u003d new RemainingBudget(remainingBudget);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // Sanitisation for daysToExpire"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (daysToExpire \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                    DaysToExpire.class.getSimpleName()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (!DaysToExpire.isValidDaysToExpire(daysToExpire)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            throw new IllegalValueException(DaysToExpire.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (new DaysToExpire(daysToExpire).isOutOfBounds()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            throw new IllegalValueException(DaysToExpire.INTEGER_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        final DaysToExpire modelDaysToExpire \u003d new DaysToExpire(daysToExpire);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return new Wallet(modelRemainingBudget, modelDaysToExpire);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 78
    }
  },
  {
    "path": "src/main/java/seedu/savenus/storage/JsonCustomSortStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.sorter.CustomSorter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * A class to access CustomSorter data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class JsonCustomSortStorage implements CustomSortStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonMenuStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public JsonCustomSortStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Path getSortFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Optional\u003cCustomSorter\u003e readFields() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return readFields(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Similar to {@link #readFields()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Optional\u003cCustomSorter\u003e readFields(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Optional\u003cJsonSerializableCustomSort\u003e jsonSort \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                filePath, JsonSerializableCustomSort.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (!jsonSort.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return Optional.of(jsonSort.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void saveFields(CustomSorter recs) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        saveFields(recs, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Similar to {@link #saveFields(CustomSorter)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void saveFields(CustomSorter sort, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        requireNonNull(sort);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableCustomSort(sort), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 79
    }
  },
  {
    "path": "src/main/java/seedu/savenus/storage/JsonMenuStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.ReadOnlyMenu;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * A class to access Menu data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class JsonMenuStorage implements MenuStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonMenuStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public JsonMenuStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Path getMenuFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Optional\u003cReadOnlyMenu\u003e readMenu() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return readMenu(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Similar to {@link #readMenu()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Optional\u003cReadOnlyMenu\u003e readMenu(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Optional\u003cJsonSerializableMenu\u003e jsonMenu \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                filePath, JsonSerializableMenu.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        if (jsonMenu.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            return Optional.of(jsonMenu.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void saveMenu(ReadOnlyMenu menu) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        saveMenu(menu, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Similar to {@link #saveMenu(ReadOnlyMenu)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void saveMenu(ReadOnlyMenu menu, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        requireNonNull(menu);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableMenu(menu), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 80
    }
  },
  {
    "path": "src/main/java/seedu/savenus/storage/JsonPurchaseHistoryStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.ReadOnlyPurchaseHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * A class to access Purchase History data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class JsonPurchaseHistoryStorage implements PurchaseHistoryStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonMenuStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public JsonPurchaseHistoryStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public Path getPurchaseHistoryFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public Optional\u003cReadOnlyPurchaseHistory\u003e readPurchaseHistory() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return readPurchaseHistory(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Similar to {@link #readPurchaseHistory()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public Optional\u003cReadOnlyPurchaseHistory\u003e readPurchaseHistory(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        Optional\u003cJsonSerializablePurchaseHistory\u003e jsonPurchaseHistory \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                filePath, JsonSerializablePurchaseHistory.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (!jsonPurchaseHistory.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            return Optional.of(jsonPurchaseHistory.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void savePurchaseHistory(ReadOnlyPurchaseHistory purchaseHistory) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        savePurchaseHistory(purchaseHistory, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Similar to {@link #savePurchaseHistory(ReadOnlyPurchaseHistory)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void savePurchaseHistory(ReadOnlyPurchaseHistory purchaseHistory, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        requireNonNull(purchaseHistory);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializablePurchaseHistory(purchaseHistory), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 80
    }
  },
  {
    "path": "src/main/java/seedu/savenus/storage/JsonRecsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "package seedu.savenus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.recommend.UserRecommendations;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " * A class to access Recommendation data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "public class JsonRecsStorage implements RecsStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonMenuStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public JsonRecsStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public Path getRecsFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public Optional\u003cUserRecommendations\u003e readRecs() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return readRecs(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Similar to {@link #readRecs()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public Optional\u003cUserRecommendations\u003e readRecs(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        Optional\u003cJsonSerializableRecs\u003e jsonRecs \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                filePath, JsonSerializableRecs.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        if (!jsonRecs.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            return Optional.of(jsonRecs.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void saveRecs(UserRecommendations recs) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        saveRecs(recs, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Similar to {@link #saveRecs(UserRecommendations)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void saveRecs(UserRecommendations recs, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        requireNonNull(recs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableRecs(recs), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jon-chua": 80
    }
  },
  {
    "path": "src/main/java/seedu/savenus/storage/JsonSerializableCustomSort.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.sorter.CustomSorter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * An Immutable Recommendation Set that is serializable to JSON format."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "@JsonRootName(value \u003d \"savenus\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class JsonSerializableCustomSort {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private JsonAdaptedCustomSort sort;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Constructs a {@code JsonSerializableRecs} with the given recommendations."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public JsonSerializableCustomSort(@JsonProperty(\"customSort\") JsonAdaptedCustomSort customSort) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.sort \u003d customSort;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Converts a given {@code CustomSorter} into this class for Jackson use."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableCustomSort}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public JsonSerializableCustomSort(CustomSorter source) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        sort \u003d new JsonAdaptedCustomSort(source.getComparator().getFieldList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Converts this UserRecommendations into the model\u0027s {@code CustomSorter} object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public CustomSorter toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return sort.toModelType();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 42
    }
  },
  {
    "path": "src/main/java/seedu/savenus/storage/JsonSerializableMenu.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Menu;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.ReadOnlyMenu;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * An Immutable Menu that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "@JsonRootName(value \u003d \"savenus\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "class JsonSerializableMenu {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FOOD \u003d \"foods list contains duplicate food(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private final List\u003cJsonAdaptedFood\u003e foods \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private JsonAdaptedWallet wallet;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Constructs a {@code JsonSerializableMenu} with the given foods."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public JsonSerializableMenu(@JsonProperty(\"foods\") List\u003cJsonAdaptedFood\u003e foods,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                                @JsonProperty(\"wallet\") JsonAdaptedWallet wallet) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.foods.addAll(foods);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        this.wallet \u003d wallet;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Converts a given {@code ReadOnlyMenu} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableMenu}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public JsonSerializableMenu(ReadOnlyMenu source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        foods.addAll(source.getFoodList().stream().map(JsonAdaptedFood::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        wallet \u003d new JsonAdaptedWallet(source.getWallet());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Converts this menu into the model\u0027s {@code Menu} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Menu toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        Menu menu \u003d new Menu();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        for (JsonAdaptedFood jsonAdaptedFood : foods) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            Food food \u003d jsonAdaptedFood.toModelType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            if (menu.hasFood(food)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            menu.addFood(food);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        menu.setWallet(wallet.toModelType());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return menu;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 8,
      "seanlowjk": 7,
      "-": 34,
      "Raikonen": 16
    }
  },
  {
    "path": "src/main/java/seedu/savenus/storage/JsonSerializablePurchaseHistory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.PurchaseHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.ReadOnlyPurchaseHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.purchase.Purchase;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * An Immutable Purchase History that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "@JsonRootName(value \u003d \"savenus-purchases\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class JsonSerializablePurchaseHistory {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private final List\u003cJsonAdaptedPurchase\u003e purchases \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Constructs a {@code JsonSerializablePurchaseHistory} with the given recommendations."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public JsonSerializablePurchaseHistory(@JsonProperty(\"purchases\") List\u003cJsonAdaptedPurchase\u003e purchases) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        this.purchases.addAll(purchases);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Converts a given {@code ReadOnlyPurchaseHistory} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializablePurchaseHistory}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public JsonSerializablePurchaseHistory(ReadOnlyPurchaseHistory source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        purchases.addAll(source.getPurchaseHistoryList().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                .map(JsonAdaptedPurchase::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Converts this PurchaseHistory into the model\u0027s {@code PurchaseHistory} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public PurchaseHistory toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        PurchaseHistory purchaseHistory \u003d new PurchaseHistory();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        for (JsonAdaptedPurchase jsonAdaptedPurchase : purchases) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            Purchase purchase \u003d jsonAdaptedPurchase.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            purchaseHistory.addPurchase(purchase);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return purchaseHistory;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Raikonen": 58
    }
  },
  {
    "path": "src/main/java/seedu/savenus/storage/JsonSerializableRecs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "package seedu.savenus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.recommend.UserRecommendations;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " * An Immutable Recommendation Set that is serializable to JSON format."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "@JsonRootName(value \u003d \"savenus\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "class JsonSerializableRecs {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private JsonAdaptedRecs userRecommendations;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Constructs a {@code JsonSerializableRecs} with the given recommendations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public JsonSerializableRecs(@JsonProperty(\"userRecs\") JsonAdaptedRecs userRecs) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.userRecommendations \u003d userRecs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Converts a given {@code UserRecommendations} into this class for Jackson use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableRecs}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public JsonSerializableRecs(UserRecommendations source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        Set\u003cString\u003e likedLocations \u003d source.getLikedLocations().stream()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .map(l -\u003e l.location).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        Set\u003cString\u003e likedTags \u003d source.getLikedTags().stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .map(t -\u003e t.tagName).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        Set\u003cString\u003e likedCategories \u003d source.getLikedCategories().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .map(c -\u003e c.category).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        Set\u003cString\u003e dislikedLocations \u003d source.getDislikedLocations().stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .map(l -\u003e l.location).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        Set\u003cString\u003e dislikedTags \u003d source.getDislikedTags().stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .map(t -\u003e t.tagName).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        Set\u003cString\u003e dislikedCategories \u003d source.getDislikedCategories().stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .map(c -\u003e c.category).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        userRecommendations \u003d new JsonAdaptedRecs(likedCategories, likedTags, likedLocations,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                dislikedCategories, dislikedTags, dislikedLocations);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Converts this UserRecommendations into the model\u0027s {@code UserRecommendations} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public UserRecommendations toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return userRecommendations.toModelType();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jon-chua": 62
    }
  },
  {
    "path": "src/main/java/seedu/savenus/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/savenus/storage/MenuStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Menu;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.ReadOnlyMenu;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Represents a storage for {@link Menu}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public interface MenuStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    Path getMenuFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Returns Menu data as a {@link ReadOnlyMenu}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    Optional\u003cReadOnlyMenu\u003e readMenu() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @see #getMenuFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    Optional\u003cReadOnlyMenu\u003e readMenu(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Saves the given {@link ReadOnlyMenu} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @param menu cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    void saveMenu(ReadOnlyMenu menu) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @see #saveMenu(ReadOnlyMenu)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    void saveMenu(ReadOnlyMenu menu, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 45
    }
  },
  {
    "path": "src/main/java/seedu/savenus/storage/PurchaseHistoryStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.PurchaseHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.ReadOnlyPurchaseHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * Represents a storage for {@link PurchaseHistory}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public interface PurchaseHistoryStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    Path getPurchaseHistoryFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Returns PurchaseHistory data as a {@link ReadOnlyPurchaseHistory}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    Optional\u003cReadOnlyPurchaseHistory\u003e readPurchaseHistory() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @see #getPurchaseHistoryFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    Optional\u003cReadOnlyPurchaseHistory\u003e readPurchaseHistory(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Saves the given {@code ReadOnlyPurchaseHistory} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @param purchaseHistory cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    void savePurchaseHistory(ReadOnlyPurchaseHistory purchaseHistory) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @see #savePurchaseHistory(ReadOnlyPurchaseHistory)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    void savePurchaseHistory(ReadOnlyPurchaseHistory purchaseHistory, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 45
    }
  },
  {
    "path": "src/main/java/seedu/savenus/storage/RecsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "package seedu.savenus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.recommend.UserRecommendations;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " * Represents a storage for {@link UserRecommendations}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "public interface RecsStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    Path getRecsFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Returns Recommendation data as a {@link UserRecommendations}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    Optional\u003cUserRecommendations\u003e readRecs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @see #getRecsFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    Optional\u003cUserRecommendations\u003e readRecs(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Saves the given {@link UserRecommendations} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @param recs cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    void saveRecs(UserRecommendations recs) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * @see #saveRecs(UserRecommendations)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    void saveRecs(UserRecommendations recs, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jon-chua": 45
    }
  },
  {
    "path": "src/main/java/seedu/savenus/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.ReadOnlyMenu;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.ReadOnlyPurchaseHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.recommend.UserRecommendations;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.ReadOnlySavingsAccount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.SavingsStorage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.sorter.CustomSorter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public interface Storage extends MenuStorage, UserPrefsStorage,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        RecsStorage, PurchaseHistoryStorage, CustomSortStorage, SavingsStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User Preferences Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Menu Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    Path getMenuFilePath();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    Optional\u003cReadOnlyMenu\u003e readMenu() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    void saveMenu(ReadOnlyMenu menu) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Recommendation System Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    Path getRecsFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    Optional\u003cUserRecommendations\u003e readRecs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    Optional\u003cUserRecommendations\u003e readRecs(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    void saveRecs(UserRecommendations recs) throws IOException;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    void saveRecs(UserRecommendations recs, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Purchase History Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    Path getPurchaseHistoryFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    Optional\u003cReadOnlyPurchaseHistory\u003e readPurchaseHistory() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    Optional\u003cReadOnlyPurchaseHistory\u003e readPurchaseHistory(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    void savePurchaseHistory(ReadOnlyPurchaseHistory purchaseHistory) throws IOException;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    void savePurchaseHistory(ReadOnlyPurchaseHistory purchaseHistory, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Custom Sort Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    Path getSortFilePath();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    Optional\u003cCustomSorter\u003e readFields() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    Optional\u003cCustomSorter\u003e readFields(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    void saveFields(CustomSorter sorter) throws IOException;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    void saveFields(CustomSorter sorter, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Savings Account Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    Path getSavingsAccountFilePath();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    void saveSavingsAccount(ReadOnlySavingsAccount savingsAccount) throws IOException;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    void saveSavingsAccount(ReadOnlySavingsAccount savingsAccount, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    Optional\u003cReadOnlySavingsAccount\u003e readSavingsAccount() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 53,
      "seanlowjk": 16,
      "jon-chua": 16,
      "Raikonen": 15
    }
  },
  {
    "path": "src/main/java/seedu/savenus/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.ReadOnlyMenu;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.ReadOnlyPurchaseHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.recommend.UserRecommendations;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.ReadOnlySavingsAccount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.SavingsStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.sorter.CustomSorter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Manages storage of $aveNUS Menu Food data in local storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private MenuStorage menuStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private SavingsStorage savingsAccountStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private RecsStorage userRecsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private PurchaseHistoryStorage purchaseHistoryStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private CustomSortStorage customSortStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public StorageManager(MenuStorage menuStorage, UserPrefsStorage userPrefsStorage, RecsStorage userRecsStorage,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                          PurchaseHistoryStorage purchaseHistoryStorage,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                          CustomSortStorage customSortStorage, SavingsStorage savingsAccountStorage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.menuStorage \u003d menuStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.savingsAccountStorage \u003d savingsAccountStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.userRecsStorage \u003d userRecsStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        this.purchaseHistoryStorage \u003d purchaseHistoryStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.customSortStorage \u003d customSortStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Menu methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Path getMenuFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return menuStorage.getMenuFilePath();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Optional\u003cReadOnlyMenu\u003e readMenu() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return readMenu(menuStorage.getMenuFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Optional\u003cReadOnlyMenu\u003e readMenu(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return menuStorage.readMenu(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void saveMenu(ReadOnlyMenu menu) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        saveMenu(menu, menuStorage.getMenuFilePath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void saveMenu(ReadOnlyMenu menu, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        menuStorage.saveMenu(menu, filePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Recommendation methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public Path getRecsFilePath() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return userRecsStorage.getRecsFilePath();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public Optional\u003cUserRecommendations\u003e readRecs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return readRecs(userRecsStorage.getRecsFilePath());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public Optional\u003cUserRecommendations\u003e readRecs(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        logger.fine(\"Attempting to read recommendations data from file: \" + filePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return userRecsStorage.readRecs(filePath);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void saveRecs(UserRecommendations recs) throws IOException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        saveRecs(recs, userRecsStorage.getRecsFilePath());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void saveRecs(UserRecommendations recs, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        logger.fine(\"Attempting to write recommendations to data file: \" + filePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        userRecsStorage.saveRecs(recs, filePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PurchaseHistory methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public Path getPurchaseHistoryFilePath() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return purchaseHistoryStorage.getPurchaseHistoryFilePath();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public Optional\u003cReadOnlyPurchaseHistory\u003e readPurchaseHistory() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return readPurchaseHistory(purchaseHistoryStorage.getPurchaseHistoryFilePath());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public Optional\u003cReadOnlyPurchaseHistory\u003e readPurchaseHistory(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        logger.fine(\"Attempting to read purchase history data from file: \" + filePath);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return purchaseHistoryStorage.readPurchaseHistory(filePath);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void savePurchaseHistory(ReadOnlyPurchaseHistory purchaseHistory) throws IOException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        savePurchaseHistory(purchaseHistory, purchaseHistoryStorage.getPurchaseHistoryFilePath());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void savePurchaseHistory(ReadOnlyPurchaseHistory purchaseHistory, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        logger.fine(\"Attempting to write purchase history to data file: \" + filePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        purchaseHistoryStorage.savePurchaseHistory(purchaseHistory, filePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CustomSorter methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Path getSortFilePath() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return customSortStorage.getSortFilePath();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Optional\u003cCustomSorter\u003e readFields() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return readFields(customSortStorage.getSortFilePath());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Optional\u003cCustomSorter\u003e readFields(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        logger.fine(\"Attempting to read sort fields data from file: \" + filePath);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return customSortStorage.readFields(filePath);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void saveFields(CustomSorter sorter) throws IOException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        saveFields(sorter, customSortStorage.getSortFilePath());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void saveFields(CustomSorter sorter, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        logger.fine(\"Attempting to write sort fields to data file: \" + filePath);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        customSortStorage.saveFields(sorter, filePath);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Path getSavingsAccountFilePath() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return savingsAccountStorage.getSavingsAccountFilePath();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void saveSavingsAccount(ReadOnlySavingsAccount savingsAccount) throws IOException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        saveSavingsAccount(savingsAccount, savingsAccountStorage.getSavingsAccountFilePath());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void saveSavingsAccount(ReadOnlySavingsAccount savingsAccount, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        savingsAccountStorage.saveSavingsAccount(savingsAccount, filePath);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Optional\u003cReadOnlySavingsAccount\u003e readSavingsAccount() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return readSavingsAccount(savingsAccountStorage.getSavingsAccountFilePath());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Optional\u003cReadOnlySavingsAccount\u003e readSavingsAccount(Path filePath)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        logger.fine(\"Attempting to read savings account data from file: \" + filePath);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return savingsAccountStorage.readSavingsAccount(filePath);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 110,
      "seanlowjk": 33,
      "jon-chua": 30,
      "Raikonen": 31
    }
  },
  {
    "path": "src/main/java/seedu/savenus/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/savenus/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private final CommandHistory commandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        this.commandHistory \u003d CommandHistory.getInstance();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Handle Up/Down Key Press"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private void handleKeyPress(KeyEvent e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (e.getCode().equals(KeyCode.UP)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            String prevCommand \u003d commandHistory.getPrev();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            if (prevCommand !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                commandTextField.setText(prevCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            commandTextField.end();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            e.consume(); // this stop propagating the event"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (e.getCode().equals(KeyCode.DOWN)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            String nextCommand \u003d commandHistory.getNext();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            if (nextCommand !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                commandTextField.setText(nextCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            commandTextField.end();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            e.consume(); // this stop propagating the event"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            commandHistory.storeValidCommand(commandTextField.getText());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            commandHistory.storeInvalidCommand(commandTextField.getText());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "         * @see seedu.savenus.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 5,
      "-": 71,
      "Raikonen": 30
    }
  },
  {
    "path": "src/main/java/seedu/savenus/ui/FoodCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.savenus.logic.commands.CollapseCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.OpeningHours;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Restrictions;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.recommend.RecommendationSystem;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " * An UI component that displays information of a {@code Food}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class FoodCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private static final String FXML \u003d \"FoodListCard.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public final Food food;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Label price;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Label category;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private Label optionalInfo;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public FoodCard(Food food, int displayedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.food \u003d food;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        name.setText(food.getName().fullName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        price.setText(\"$\" + food.getPrice().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        // Description is an optional field"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        if (food.getDescription().value.equals(Description.DEFAULT_VALUE)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            description.setText(\"No description\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            description.setText(food.getDescription().value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        category.setText(\"Category: \" + food.getCategory().category);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        food.getTags().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // The label for short optional information which contains"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // opening hours, location, restrictions, and recommendations."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        String textForOptionalInfo \u003d \"\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String partition;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        // Partition string."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (CollapseCommand.getStatus()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            partition \u003d \"  |  \";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            partition \u003d \"\\n\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        // Label for location."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        textForOptionalInfo +\u003d \"Location: \" + food.getLocation().location + partition;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        // Label for opening hours."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (food.getOpeningHours().openingHours.equals(OpeningHours.DEFAULT_VALUE)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            textForOptionalInfo +\u003d \"No opening hours specified.\" + partition;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            String[] hours \u003d food.getOpeningHours().openingHours.split(\" \");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            String open \u003d hours[0];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            String close \u003d hours[1];"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            textForOptionalInfo +\u003d \"Opens: \" + open + \" - Closes: \" + close + partition;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        // Label for restrictions."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        if (food.getRestrictions().restrictions.equals(Restrictions.DEFAULT_VALUE)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            textForOptionalInfo +\u003d \"No restrictions.\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            textForOptionalInfo +\u003d \"Restrictions: \" + food.getRestrictions().restrictions;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        double recommendationValue \u003d RecommendationSystem.getInstance().calculateRecommendation(food);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        if (recommendationValue \u003e\u003d 0) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            textForOptionalInfo +\u003d partition + \"+\" + String.format(\"%.2f\", recommendationValue);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            textForOptionalInfo +\u003d partition + String.format(\"%.2f\", recommendationValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        // Setting the text for optional info."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        optionalInfo.setText(textForOptionalInfo);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        if (!(other instanceof FoodCard)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        FoodCard card \u003d (FoodCard) other;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                \u0026\u0026 food.equals(card.food);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 5,
      "seanlowjk": 14,
      "robytanama": 30,
      "jon-chua": 18,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/savenus/ui/FoodListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Panel containing the list of food."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class FoodListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private static final String FXML \u003d \"FoodListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FoodListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private ListView\u003cFood\u003e foodListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public FoodListPanel(ObservableList\u003cFood\u003e foodList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        foodListView.setItems(foodList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        foodListView.setCellFactory(listView -\u003e new FoodListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void showLastItem() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        foodListView.scrollTo(foodListView.getItems().size() - 1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Food} using a {@code FoodCard}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    class FoodListViewCell extends ListCell\u003cFood\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        protected void updateItem(Food food, boolean empty) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            super.updateItem(food, empty);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            if (empty || food \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                setGraphic(new FoodCard(food, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 7,
      "seanlowjk": 12,
      "jon-chua": 2,
      "-": 29,
      "Raikonen": 1
    }
  },
  {
    "path": "src/main/java/seedu/savenus/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.StageStyle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.savenus.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.savenus.logic.commands.AutoSortCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.savenus.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.savenus.logic.commands.BuyCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.savenus.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.savenus.logic.commands.CollapseCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.savenus.logic.commands.CustomSortCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.savenus.logic.commands.DefaultCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.savenus.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.savenus.logic.commands.DislikeCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.savenus.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.savenus.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.savenus.logic.commands.ExpandCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.savenus.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.savenus.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.savenus.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.savenus.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.savenus.logic.commands.InfoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.savenus.logic.commands.LikeCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.savenus.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.savenus.logic.commands.MakeSortCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.savenus.logic.commands.RecommendCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.savenus.logic.commands.RemoveDislikeCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.savenus.logic.commands.RemoveLikeCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.savenus.logic.commands.SaveCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.savenus.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://github.com/AY1920S1\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            + \"-CS2103T-F13-2/main/blob/master/docs/UserGuide.adoc\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Here is the list of available commands:\\n\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + AddCommand.COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + AutoSortCommand.COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + BudgetCommand.COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + BuyCommand.COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + ClearCommand.COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + CollapseCommand.COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + CustomSortCommand.COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + DefaultCommand.COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + DeleteCommand.COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + DislikeCommand.COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            + EditCommand.COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            + ExitCommand.COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            + ExpandCommand.COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            + FilterCommand.COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            + FindCommand.COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            + HelpCommand.COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            + HistoryCommand.COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            + InfoCommand.COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            + LikeCommand.COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            + ListCommand.COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            + MakeSortCommand.COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            + RecommendCommand.COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + RemoveDislikeCommand.COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + RemoveLikeCommand.COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + SaveCommand.COMMAND_WORD + \"\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            + SortCommand.COMMAND_WORD + \"\\n\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Click the Guide button below to open to full user guide.\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"You will need internet connection to open the user guide.\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button openButton;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button closeButton;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        root.initStyle(StageStyle.UNDECORATED);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        root.centerOnScreen();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private void openUrl() throws IOException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Runtime runtime \u003d Runtime.getRuntime();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        String os \u003d System.getProperty(\"os.name\").toLowerCase();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (os.indexOf(\"win\") \u003e\u003d 0) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            runtime.exec(\"rundll32 url.dll,FileProtocolHandler \" + USERGUIDE_URL);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            runtime.exec(\"open \" + USERGUIDE_URL);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private void closeWindow() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().close();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 4,
      "-": 166
    }
  },
  {
    "path": "src/main/java/seedu/savenus/ui/InfoWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.savenus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.StageStyle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.savenus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.savenus.logic.commands.InfoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.model.info.AddInfo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.model.info.BudgetInfo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.model.info.BuyInfo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.model.info.ClearInfo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.model.info.DefaultInfo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.model.info.DeleteInfo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.model.info.EditInfo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.model.info.ExitInfo;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.model.info.FindInfo;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.model.info.HelpInfo;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.model.info.InfoInfo;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.model.info.ListInfo;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.model.info.RecommendInfo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.model.info.SortInfo;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a info page"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class InfoWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(InfoWindow.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"InfoWindow.fxml\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label commandWord;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label infoMessage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label usageExample;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label output;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button quitButton;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new InfoWindow."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the InfoWindow."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public InfoWindow(Stage root) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        root.initStyle(StageStyle.UNDECORATED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        commandWord.setText(\"Default\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        infoMessage.setText(\"Default\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        usageExample.setText(\"Default\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new InfoWindow."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public InfoWindow() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void closeWindow() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().close();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the information window."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show(String input) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing info page about the command.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (input) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        case InfoCommand.ADD_INFO :"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            commandWord.setText(AddInfo.COMMAND_WORD);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            infoMessage.setText(AddInfo.INFORMATION);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            usageExample.setText(AddInfo.USAGE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            output.setText(AddInfo.OUTPUT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case InfoCommand.BUDGET_INFO :"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            commandWord.setText(BudgetInfo.COMMAND_WORD);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            infoMessage.setText(BudgetInfo.INFORMATION);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            usageExample.setText(BudgetInfo.USAGE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            output.setText(BudgetInfo.OUTPUT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case InfoCommand.BUY_INFO :"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            commandWord.setText(BuyInfo.COMMAND_WORD);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            infoMessage.setText(BuyInfo.INFORMATION);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            usageExample.setText(BuyInfo.USAGE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            output.setText(BuyInfo.OUTPUT);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case InfoCommand.CLEAR_INFO :"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            commandWord.setText(ClearInfo.COMMAND_WORD);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            infoMessage.setText(ClearInfo.INFORMATION);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            usageExample.setText(ClearInfo.USAGE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            output.setText(ClearInfo.OUTPUT);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case InfoCommand.DEFAULT_INFO :"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            commandWord.setText(DefaultInfo.COMMAND_WORD);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            infoMessage.setText(DefaultInfo.INFORMATION);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            usageExample.setText(DefaultInfo.USAGE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            output.setText(DefaultInfo.OUTPUT);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case InfoCommand.DELETE_INFO :"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            commandWord.setText(DeleteInfo.COMMAND_WORD);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            infoMessage.setText(DeleteInfo.INFORMATION);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            usageExample.setText(DeleteInfo.USAGE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            output.setText(DeleteInfo.OUTPUT);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case InfoCommand.EDIT_INFO :"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            commandWord.setText(EditInfo.COMMAND_WORD);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            infoMessage.setText(EditInfo.INFORMATION);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            usageExample.setText(EditInfo.USAGE);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            output.setText(EditInfo.OUTPUT);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case InfoCommand.EXIT_INFO :"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            commandWord.setText(ExitInfo.COMMAND_WORD);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            infoMessage.setText(ExitInfo.INFORMATION);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            usageExample.setText(ExitInfo.USAGE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            output.setText(ExitInfo.OUTPUT);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case InfoCommand.FIND_INFO :"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            commandWord.setText(FindInfo.COMMAND_WORD);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            infoMessage.setText(FindInfo.INFORMATION);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            usageExample.setText(FindInfo.USAGE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            output.setText(FindInfo.OUTPUT);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case InfoCommand.HELP_INFO :"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            commandWord.setText(HelpInfo.COMMAND_WORD);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            infoMessage.setText(HelpInfo.INFORMATION);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            usageExample.setText(HelpInfo.USAGE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            output.setText(HelpInfo.OUTPUT);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case InfoCommand.INFO_INFO :"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            commandWord.setText(InfoInfo.COMMAND_WORD);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            infoMessage.setText(InfoInfo.INFORMATION);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            usageExample.setText(InfoInfo.USAGE);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            output.setText(InfoInfo.OUTPUT);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case InfoCommand.LIST_INFO :"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            commandWord.setText(ListInfo.COMMAND_WORD);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            infoMessage.setText(ListInfo.INFORMATION);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            usageExample.setText(ListInfo.USAGE);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            output.setText(ListInfo.OUTPUT);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case InfoCommand.RECOMMEND_INFO :"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            commandWord.setText(RecommendInfo.COMMAND_WORD);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            infoMessage.setText(RecommendInfo.INFORMATION);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            usageExample.setText(RecommendInfo.USAGE);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            output.setText(RecommendInfo.OUTPUT);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        case InfoCommand.SORT_INFO :"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            commandWord.setText(SortInfo.COMMAND_WORD);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            infoMessage.setText(SortInfo.INFORMATION);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            usageExample.setText(SortInfo.USAGE);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            output.setText(SortInfo.OUTPUT);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        default :"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            commandWord.setText(\"YOU ARE NOT SUP  POSED TO SEE TH IS PAG  E\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            infoMessage.setText(\"PLEA SE   EXIT TH E INFO SCR EEN\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            usageExample.setText(\"DO IT N O W                    BEFORE\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            output.setText(\".\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the info window is currently being shown."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the info window."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 98,
      "-": 104
    }
  },
  {
    "path": "src/main/java/seedu/savenus/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.logic.commands.InfoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * The Main Window."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private FoodListPanel foodListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private PurchaseListPanel purchaseListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private InfoWindow infoWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private double xOffset \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private double yOffset \u003d 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private StackPane foodListPanelPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private StackPane purchaseListPanelPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private Text remainingBudgetPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private Text daysToExpirePlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        infoWindow \u003d new InfoWindow();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        foodListPanel \u003d new FoodListPanel(logic.getFilteredFoodList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        foodListPanelPlaceholder.getChildren().add(foodListPanel.getRoot());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        purchaseListPanel \u003d new PurchaseListPanel(logic.getPurchaseHistoryList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        purchaseListPanelPlaceholder.getChildren().add(purchaseListPanel.getRoot());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getMenuFilePath(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                logic.getPurchaseHistoryFilePath());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // Bind remaining budget to displayed value"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        remainingBudgetPlaceholder.textProperty().bind(logic.getMenu()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                .getWallet().getRemainingBudgetProperty());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // Update number of days left"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        logic.getMenu().getWallet().updateDaysToExpire();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // Bind number of days to budget expiration to displayed value"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        daysToExpirePlaceholder.textProperty().bind(logic.getMenu()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                .getWallet().getDaysToExpireProperty().asString(\"%d days\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Method that allows the mouse to click on the window to be moved."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param event The event that the user clicks on the window."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void handleWindowPress(MouseEvent event) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        xOffset \u003d event.getSceneX();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        yOffset \u003d event.getSceneY();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Method that allows the window to be moved."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * @param event The event that the user drags the window."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void handleWindowDrag(MouseEvent event) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        primaryStage.setX(event.getScreenX() - xOffset);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        primaryStage.setY(event.getScreenY() - yOffset);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Opens the info window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void handleInfo(String info) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!infoWindow.isShowing()) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            infoWindow.show(info);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            infoWindow.focus();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        primaryStage.centerOnScreen();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public FoodListPanel getFoodListPanel() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return foodListPanel;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public PurchaseListPanel getPurchaseListPanel() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return purchaseListPanel;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            if (commandResult.getFeedbackToUser().equals(InfoCommand.ADD_INFO)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                || commandResult.getFeedbackToUser().equals(InfoCommand.BUDGET_INFO)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                || commandResult.getFeedbackToUser().equals(InfoCommand.BUY_INFO)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                || commandResult.getFeedbackToUser().equals(InfoCommand.CLEAR_INFO)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                || commandResult.getFeedbackToUser().equals(InfoCommand.DEFAULT_INFO)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                || commandResult.getFeedbackToUser().equals(InfoCommand.DELETE_INFO)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                || commandResult.getFeedbackToUser().equals(InfoCommand.EDIT_INFO)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                || commandResult.getFeedbackToUser().equals(InfoCommand.EXIT_INFO)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                || commandResult.getFeedbackToUser().equals(InfoCommand.FIND_INFO)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                || commandResult.getFeedbackToUser().equals(InfoCommand.HELP_INFO)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                || commandResult.getFeedbackToUser().equals(InfoCommand.INFO_INFO)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                || commandResult.getFeedbackToUser().equals(InfoCommand.LIST_INFO)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                || commandResult.getFeedbackToUser().equals(InfoCommand.RECOMMEND_INFO)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                || commandResult.getFeedbackToUser().equals(InfoCommand.SORT_INFO)) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                if (infoWindow.isShowing()) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                    infoWindow.closeWindow();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                handleInfo(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            // Update foodListPanel after every command"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            ObservableList\u003cFood\u003e list \u003d logic.getFilteredFoodList();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            foodListPanel \u003d new FoodListPanel(list);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            foodListPanelPlaceholder.getChildren().add(foodListPanel.getRoot());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            if (logic.getAutoSortFlag()) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                ObservableList\u003cFood\u003e foodList \u003d logic.getFilteredFoodList();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                SortedList\u003cFood\u003e sortedList \u003d foodList.sorted(logic.getCustomSorter().getComparator());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                logic.setFoods(sortedList);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            if (commandResult.isJustAdd() \u0026\u0026 !logic.getAutoSortFlag()) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                foodListPanel.showLastItem();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            // Update purchaseListPanel after every command"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            purchaseListPanel \u003d new PurchaseListPanel(logic.getPurchaseHistoryList());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            purchaseListPanelPlaceholder.getChildren().add(purchaseListPanel.getRoot());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 10,
      "seanlowjk": 19,
      "robytanama": 51,
      "jon-chua": 3,
      "-": 139,
      "Raikonen": 36
    }
  },
  {
    "path": "src/main/java/seedu/savenus/ui/PurchaseCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.purchase.Purchase;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * An UI component that displays information of a {@code Purchase}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class PurchaseCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private static final String FXML \u003d \"PurchaseListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public final Purchase purchase;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private Label price;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private Label timeAgo;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public PurchaseCard(Purchase purchase) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        this.purchase \u003d purchase;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        name.setText(purchase.getPurchasedFood().getName().fullName);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        price.setText(\"$\" + purchase.getPurchasedFood().getPrice());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        timeAgo.setText(purchase.getTimeAgoString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        if (!(other instanceof PurchaseCard)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        PurchaseCard card \u003d (PurchaseCard) other;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return purchase.equals(card.purchase);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 61
    }
  },
  {
    "path": "src/main/java/seedu/savenus/ui/PurchaseListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.purchase.Purchase;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * Panel containing the list of purchase."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class PurchaseListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private static final String FXML \u003d \"PurchaseListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PurchaseListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private ListView\u003cPurchase\u003e purchaseListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public PurchaseListPanel(ObservableList\u003cPurchase\u003e purchaseList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        purchaseListView.setItems(purchaseList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        purchaseListView.setCellFactory(listView -\u003e new PurchaseListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Purchase} using a {@code PurchaseCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    class PurchaseListViewCell extends ListCell\u003cPurchase\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        protected void updateItem(Purchase purchase, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            super.updateItem(purchase, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            if (empty || purchase \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                setGraphic(new PurchaseCard(purchase).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 47
    }
  },
  {
    "path": "src/main/java/seedu/savenus/ui/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/savenus/ui/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public StatusBarFooter(Path saveFoodLocation, Path savePurchaseHistoryLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveFoodLocation).toString()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                + \" | \" + Paths.get(\".\").resolve(savePurchaseHistoryLocation).toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 1,
      "-": 23,
      "Raikonen": 3
    }
  },
  {
    "path": "src/main/java/seedu/savenus/ui/Ui.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/savenus/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/savenus_logo.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 6,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/savenus/ui/UiPart.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 2,
      "-": 86
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" onKeyPressed\u003d\"#handleKeyPress\" promptText\u003d\"Type in your command here...\" styleClass\u003d\"command-text\" stylesheets\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "robytanama": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/FoodListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "      \u003cLabel fx:id\u003d\"price\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$price\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "      \u003cLabel fx:id\u003d\"category\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$category\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": "      \u003cLabel fx:id\u003d\"optionalInfo\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$optionalInfo\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 2,
      "robytanama": 1,
      "jon-chua": 1,
      "-": 33
    }
  },
  {
    "path": "src/main/resources/view/FoodListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "  \u003cListView fx:id\u003d\"foodListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "robytanama": 1,
      "seanlowjk": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/InfoWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Info\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cVBox spacing\u003d\"10.0\" style\u003d\"-fx-background-color: #1d1d1d; -fx-border-color: white;\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"commandWord\" contentDisplay\u003d\"CENTER\" text\u003d\"Label\" textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cfont\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                     \u003cFont name\u003d\"Franklin Gothic Heavy\" size\u003d\"52.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/font\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cLabel fx:id\u003d\"infoMessage\" text\u003d\"Label\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cfont\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                     \u003cFont name\u003d\"Franklin Gothic Demi Cond\" size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/font\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel text\u003d\"USAGE :\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cfont\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                     \u003cFont name\u003d\"Franklin Gothic Heavy\" size\u003d\"25.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/font\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"usageExample\" text\u003d\"Label\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cfont\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cFont name\u003d\"Courier New\" size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/font\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel text\u003d\"EXPECTED OUTPUT :\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cfont\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                     \u003cFont name\u003d\"Franklin Gothic Heavy\" size\u003d\"25.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/font\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"output\" text\u003d\"Label\" textFill\u003d\"WHITE\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cfont\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cFont name\u003d\"Courier New\" size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/font\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton mnemonicParsing\u003d\"false\" onAction\u003d\"#closeWindow\" text\u003d\"Close\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cfont\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                     \u003cFont name\u003d\"Franklin Gothic Demi Cond\" size\u003d\"36.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/font\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"20.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/VBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "robytanama": 5,
      "-": 60
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root minHeight\u003d\"900.0\" maximized\u003d\"true\" minWidth\u003d\"1400.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"\\$aveNUS\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        \u003cImage url\u003d\"@/images/savenus_logo.png\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                    \u003cAnchorPane styleClass\u003d\"pane-with-border\" stylesheets\u003d\"@DarkTheme.css\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                            \u003cButton layoutX\u003d\"2.0\" minHeight\u003d\"50.0\" minWidth\u003d\"50.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" prefHeight\u003d\"50.0\" prefWidth\u003d\"50.0\" styleClass\u003d\"menu-button\" stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                \u003cgraphic\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                    \u003cImageView fitHeight\u003d\"30.0\" fitWidth\u003d\"38.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                        \u003cimage\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                            \u003cImage url\u003d\"@../images/Help.png\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                        \u003c/image\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                \u003c/graphic\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                           \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                            \u003c/Button\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                            \u003cButton layoutX\u003d\"2.0\" layoutY\u003d\"50.0\" minHeight\u003d\"50.0\" minWidth\u003d\"50.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" prefHeight\u003d\"50.0\" prefWidth\u003d\"50.0\" styleClass\u003d\"menu-button\" stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                \u003cgraphic\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                    \u003cImageView fitHeight\u003d\"30.0\" fitWidth\u003d\"38.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                        \u003cimage\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                            \u003cImage url\u003d\"@../images/Quit.png\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                        \u003c/image\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                    \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                \u003c/graphic\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                           \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                            \u003c/Button\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                    \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                    \u003cVBox maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"1830.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                    \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"150.0\" minHeight\u003d\"150.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                    \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                            \u003cHBox VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                    \u003cVBox maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minWidth\u003d\"500.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                        \u003cVBox fx:id\u003d\"foodList\" prefHeight\u003d\"655.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                            \u003cStackPane fx:id\u003d\"foodListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                                \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                                    \u003cInsets /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                                \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                           \u003cTabPane styleClass\u003d\"tab-pane-with-border\" stylesheets\u003d\"@DarkTheme.css\" tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                             \u003ctabs\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                               \u003cTab text\u003d\"History\"\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                 \u003ccontent\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                       \u003cVBox maxHeight\u003d\"1.7976931348623157E308\" prefHeight\u003d\"655.0\" prefWidth\u003d\"670.0\" spacing\u003d\"10.0\" styleClass\u003d\"vbox-tab-pane-with-border\" stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                          \u003cchildren\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                             \u003cAnchorPane prefHeight\u003d\"148.0\" prefWidth\u003d\"670.0\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                                   \u003cImageView fitHeight\u003d\"222.0\" fitWidth\u003d\"222.0\" layoutX\u003d\"54.0\" layoutY\u003d\"18.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                                      \u003cimage\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                                         \u003cImage url\u003d\"@../images/Wallet.png\" /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                                      \u003c/image\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                                   \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                                              \u003cText fx:id\u003d\"remainingBudgetPlaceholder\" fill\u003d\"WHITE\" layoutX\u003d\"204.0\" layoutY\u003d\"75.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"money\" wrappingWidth\u003d\"386.0\"\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                                                                  \u003cfont\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                                                      \u003cFont name\u003d\"Monospaced Regular\" size\u003d\"51.0\" /\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                                                                  \u003c/font\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                                                              \u003c/Text\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                                              \u003cText fx:id\u003d\"daysToExpirePlaceholder\" fill\u003d\"WHITE\" layoutX\u003d\"205.0\" layoutY\u003d\"109.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"days\" wrappingWidth\u003d\"174.0\"\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                                                                  \u003cfont\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                                                      \u003cFont name\u003d\"Franklin Gothic Demi Cond\" size\u003d\"27.0\" /\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                                                                  \u003c/font\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                                                              \u003c/Text\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                                \u003c/children\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                             \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                                         \u003cText fill\u003d\"white\" text\u003d\"Purchase History\" textAlignment\u003d\"CENTER\" wrappingWidth\u003d\"630.0\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                                             \u003cfont\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                                                 \u003cFont name\u003d\"Franklin Gothic Demi Cond\" size\u003d\"40.0\" /\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                                                             \u003c/font\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                                                         \u003c/Text\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                                        \u003cVBox alignment\u003d\"BOTTOM_CENTER\" maxHeight\u003d\"1.7976931348623157E308\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                                            \u003cVBox fx:id\u003d\"purchaseList\" maxHeight\u003d\"1.7976931348623157E308\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                                                \u003cStackPane fx:id\u003d\"purchaseListPanelPlaceholder\" maxHeight\u003d\"1.7976931348623157E308\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                    \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                                                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                                                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                                          \u003c/children\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                                          \u003cpadding\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                             \u003cInsets bottom\u003d\"20.0\" left\u003d\"20.0\" right\u003d\"20.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                                          \u003c/padding\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                       \u003c/VBox\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                 \u003c/content\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                               \u003c/Tab\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                               \u003cTab closable\u003d\"false\" text\u003d\"Savings\"\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                 \u003ccontent\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                   \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"vbox-tab-pane-with-border\" stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                          \u003cchildren\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                             \u003cText fill\u003d\"WHITE\" layoutX\u003d\"39.0\" layoutY\u003d\"209.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"MADE YOU LOOK GOTEEM\" textAlignment\u003d\"CENTER\" wrappingWidth\u003d\"594.13671875\"\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                                \u003cfont\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                                   \u003cFont name\u003d\"Franklin Gothic Demi Cond\" size\u003d\"43.0\" /\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                                \u003c/font\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                             \u003c/Text\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                             \u003cText fill\u003d\"WHITE\" layoutX\u003d\"39.0\" layoutY\u003d\"279.0\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"More to be added!\" textAlignment\u003d\"CENTER\" wrappingWidth\u003d\"594.13671875\"\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                                \u003cfont\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                                   \u003cFont name\u003d\"Franklin Gothic Demi Cond\" size\u003d\"43.0\" /\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                                \u003c/font\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                             \u003c/Text\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                          \u003c/children\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                       \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                 \u003c/content\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                               \u003c/Tab\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                             \u003c/tabs\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                           \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                                \u003c/children\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 1,
      "robytanama": 116,
      "-": 36,
      "Raikonen": 10
    }
  },
  {
    "path": "src/main/resources/view/PurchaseListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"300\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"80\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" \u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "      \u003cLabel fx:id\u003d\"price\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$price\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "      \u003cLabel fx:id\u003d\"timeAgo\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$timeAgo\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 32
    }
  },
  {
    "path": "src/main/resources/view/PurchaseListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "  \u003cListView fx:id\u003d\"purchaseListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 8
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" prefHeight\u003d\"300.0\" styleClass\u003d\"result-display\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "robytanama": 2,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/savenus/AppParametersTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/savenus/MainAppTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package seedu.savenus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.commons.core.Version;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class MainAppTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private MainApp mainApp \u003d new MainApp();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void correctVersion() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(new Version(0, 6, 0, true).equals(MainApp.VERSION));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void testInit_successfulInit() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e mainApp.init());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void testStop() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e mainApp.stop());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 28
    }
  },
  {
    "path": "src/test/java/seedu/savenus/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/savenus/commons/core/GuiSettingsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class GuiSettingsTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void coordinates_test() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(guiSettings.getWindowHeight(), 800);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(guiSettings.getWindowWidth(), 1100);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(guiSettings, new GuiSettings());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertNotEquals(guiSettings, new Object());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 28
    }
  },
  {
    "path": "src/test/java/seedu/savenus/commons/core/MessagesTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package seedu.savenus.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class MessagesTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void messages_differentClass() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        Messages messages \u003d new Messages();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(messages.equals(new Messages()));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 14
    }
  },
  {
    "path": "src/test/java/seedu/savenus/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/savenus/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void createNegativeIndex() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        final Index fifthFoodIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(fifthFoodIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(fifthFoodIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(fifthFoodIndex.equals(fifthFoodIndex));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(fifthFoodIndex.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(fifthFoodIndex.equals(5.0f));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(fifthFoodIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 2,
      "seanlowjk": 13,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/savenus/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/savenus_logo.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/savenus/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/savenus/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void getLogLevel_test() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(config.getLogLevel(), Level.INFO);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void getUserPrefsFilePath_test() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Path path \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(config.getUserPrefsFilePath(), path);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void notEquals_test() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(config.equals(new Object()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 4,
      "seanlowjk": 20,
      "-": 111
    }
  },
  {
    "path": "src/test/java/seedu/savenus/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/savenus/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/savenus/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.commons.core.Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.CATEGORY_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.DESCRIPTION_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.LOCATION_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.NAME_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.OPENING_HOURS_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.PRICE_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.RESTRICTIONS_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.CHICKEN_RICE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.ModelManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.PurchaseHistory;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.ReadOnlyMenu;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.UserPrefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.recommend.UserRecommendations;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.JsonSavingsStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.ReadOnlySavingsAccount;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.SavingsAccount;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.sorter.CustomSorter;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.storage.JsonCustomSortStorage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.storage.JsonMenuStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.storage.JsonPurchaseHistoryStorage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.storage.JsonRecsStorage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.storage.StorageManager;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        JsonMenuStorage menuStorage \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                new JsonMenuStorage(temporaryFolder.resolve(\"savenus-menu.json\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        JsonSavingsStorage savingsAccountStorage \u003d new JsonSavingsStorage(temporaryFolder.resolve(\"savings.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        JsonRecsStorage userRecsStorage \u003d new JsonRecsStorage(temporaryFolder.resolve(\"userPrefs-recs.json\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        JsonPurchaseHistoryStorage purchaseHistoryStorage \u003d new JsonPurchaseHistoryStorage(temporaryFolder"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                .resolve(\"userPrefs-purchases.json\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        JsonCustomSortStorage customSortStorage \u003d new JsonCustomSortStorage("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                temporaryFolder.resolve(\"userPrefs-sort.json\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        );"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        StorageManager storage \u003d new StorageManager(menuStorage, userPrefsStorage, userRecsStorage,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                purchaseHistoryStorage, customSortStorage, savingsAccountStorage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        // Setup LogicManager with JsonMenuIoExceptionThrowingStub"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        JsonMenuStorage menuStorage \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                new JsonMenuIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionMenu.json\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        JsonSavingsStorage savingsAccountStorage \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                new JsonSavingsIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionSavings.json\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        JsonRecsStorage userRecsStorage \u003d new JsonRecsStorage(temporaryFolder.resolve(\"ioExceptionUserRecs.json\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        JsonPurchaseHistoryStorage purchaseHistoryStorage \u003d new JsonPurchaseHistoryStorage(temporaryFolder"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                .resolve(\"ioExceptionPurchaseHistory.json\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        JsonCustomSortStorage customSortStorage \u003d new JsonCustomSortStorage("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                temporaryFolder.resolve(\"ioExceptionUserRecs.json\")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        );"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        StorageManager storage \u003d new StorageManager(menuStorage, userPrefsStorage, userRecsStorage,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                purchaseHistoryStorage, customSortStorage, savingsAccountStorage);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_CHICKEN_RICE"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                + PRICE_DESC_CHICKEN_RICE + DESCRIPTION_DESC_CHICKEN_RICE"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + CATEGORY_DESC_CHICKEN_RICE + LOCATION_DESC_CHICKEN_RICE"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + OPENING_HOURS_DESC_CHICKEN_RICE + RESTRICTIONS_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Food expectedFood \u003d new FoodBuilder(CHICKEN_RICE).withTags().build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        expectedModel.addFood(expectedFood);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void getFilteredfoodList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredFoodList().remove(0));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void getMenu_succesfullGet() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(logic.getMenu() instanceof ReadOnlyMenu);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void getPurchaseHistoryList_successfulGet() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertTrue(logic.getPurchaseHistoryList() instanceof ObservableList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void getMenuFilePath_successfulGet() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(logic.getMenuFilePath() instanceof Path);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void getGuiSettings_successfulGet() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(logic.getGuiSettings() instanceof GuiSettings);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void setGuiSettings_success() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Logic newLogic \u003d logic;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        logic.setGuiSettings(logic.getGuiSettings());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(logic, newLogic);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void autoSortFlag_tests() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Logic newLogic \u003d logic;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(newLogic.getAutoSortFlag(), false);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void customSorter_tests() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        CustomSorter sorter \u003d new CustomSorter();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(logic.getCustomSorter(), sorter);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void setFoods_success() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        logic.setFoods(new ArrayList\u003cFood\u003e());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ObservableList\u003cFood\u003e foodList \u003d new SortedList\u003cFood\u003e(logic.getFilteredFoodList());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(foodList, logic.getFilteredFoodList());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getMenu(), new UserPrefs(), new UserRecommendations(),"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                new PurchaseHistory(), new CustomSorter(), new SavingsAccount());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private static class JsonMenuIoExceptionThrowingStub extends JsonMenuStorage {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        private JsonMenuIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        public void saveMenu(ReadOnlyMenu menu, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private static class JsonSavingsIoExceptionThrowingStub extends JsonSavingsStorage {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        private JsonSavingsIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        public void saveSavingsAccount(ReadOnlySavingsAccount savingsAccount, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 60,
      "robytanama": 22,
      "seanlowjk": 41,
      "jon-chua": 7,
      "-": 121,
      "Raikonen": 9
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.getTypicalMenu;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.PurchaseHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.recommend.UserRecommendations;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.SavingsAccount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.sorter.CustomSorter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        model \u003d new ModelManager(getTypicalMenu(), new UserPrefs(), new UserRecommendations(), new PurchaseHistory(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                new CustomSorter(), new SavingsAccount());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute_newfood_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Food validFood \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getMenu(), new UserPrefs(), new UserRecommendations(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                new PurchaseHistory(), new CustomSorter(), new SavingsAccount());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        expectedModel.addFood(validFood);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertCommandSuccess(new AddCommand(validFood), model,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validFood), expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute_duplicatefood_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Food foodInList \u003d model.getMenu().getFoodList().get(0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertCommandFailure(new AddCommand(foodInList), model, AddCommand.MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 12,
      "seanlowjk": 9,
      "jon-chua": 1,
      "-": 26,
      "Raikonen": 3
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Menu;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.PurchaseHistory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.ReadOnlyMenu;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.ReadOnlyPurchaseHistory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Category;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Location;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.purchase.Purchase;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.recommend.RecommendationSystem;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.ReadOnlySavingsAccount;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.Savings;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.sorter.CustomSorter;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.DaysToExpire;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.RemainingBudget;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void constructor_nullfood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute_foodAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ModelStubAcceptingfoodAdded modelStub \u003d new ModelStubAcceptingfoodAdded();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Food validFood \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validFood).execute(modelStub);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validFood), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(Arrays.asList(validFood), modelStub.foodAdded);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute_duplicatefood_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Food validFood \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validFood);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithfood(validFood);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_FOOD, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Food chickenRice \u003d new FoodBuilder().withName(\"Chicken Rice\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Food nasiLemak \u003d new FoodBuilder().withName(\"Nasi Lemak\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        AddCommand addChickenRiceCommand \u003d new AddCommand(chickenRice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        AddCommand addNasiLemakCommand \u003d new AddCommand(nasiLemak);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertTrue(addChickenRiceCommand.equals(addChickenRiceCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        AddCommand addChickenRiceCommandCopy \u003d new AddCommand(chickenRice);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertTrue(addChickenRiceCommand.equals(addChickenRiceCommandCopy));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertFalse(addChickenRiceCommand.equals(1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertFalse(addChickenRiceCommand.equals(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // different food -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertFalse(addChickenRiceCommand.equals(addNasiLemakCommand));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        public Path getMenuFilePath() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        public void setMenuFilePath(Path menuFilePath) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        public Path getPurchaseHistoryFilePath() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        public void setPurchaseHistoryFilePath(Path menuFilePath) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        public void addFood(Food food) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        public void setMenu(ReadOnlyMenu newData) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        public ReadOnlyMenu getMenu() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        public void deleteFood(Food target) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        public void setFood(Food target, Food editedFood) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        public void setFoods(List\u003cFood\u003e list) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        public void editFilteredFoodList(List\u003cString\u003e fieldList) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        public PurchaseHistory getPurchaseHistory() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        public void setPurchaseHistory(ReadOnlyPurchaseHistory purchaseHistory) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        public void addPurchase(Purchase purchase) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        public void removePurchase(Purchase purchase) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        public void buyFood(Food foodToBuy) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        public RemainingBudget getRemainingBudget() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        public void setRemainingBudget(RemainingBudget newRemainingBudget) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        public int getDaysToExpire() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        public void setDaysToExpire(DaysToExpire newDaysToExpire) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        public ObservableList\u003cFood\u003e getFilteredFoodList() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        public ObservableList\u003cPurchase\u003e getPurchaseHistoryList() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        public void updateFilteredFoodList(Predicate\u003cFood\u003e predicate) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        public RecommendationSystem getRecommendationSystem() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        public void updateRecommendationComparator(Comparator\u003cFood\u003e comparator) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        public void updateRecommendationPredicate(Predicate\u003cFood\u003e recommendationPredicate) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        public void setRecommendationSystemInUse(boolean inUse) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            // Empty stub"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        public void setCustomSorter(List\u003cString\u003e fields) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        public CustomSorter getCustomSorter() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        public List\u003cString\u003e getCommandHistory() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        public void addLikes(Set\u003cCategory\u003e categoryList, Set\u003cTag\u003e tagList, Set\u003cLocation\u003e locationList) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        public void addDislikes(Set\u003cCategory\u003e categoryList, Set\u003cTag\u003e tagList, Set\u003cLocation\u003e locationList) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        public void removeLikes(Set\u003cCategory\u003e categoryList, Set\u003cTag\u003e tagList, Set\u003cLocation\u003e locationList) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        public void removeDislikes(Set\u003cCategory\u003e categoryList, Set\u003cTag\u003e tagList, Set\u003cLocation\u003e locationList) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        public void clearLikes() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        public void clearDislikes() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        public void addToSavings(Savings savings) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        public void deductFromWallet(Savings savings) throws CommandException {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        public boolean getAutoSortFlag() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        public void setAutoSortFlag(boolean autoSortFlag) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        public ReadOnlySavingsAccount getSavingsAccount() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        public void setSavingsAccount(ReadOnlySavingsAccount savingsAccount) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * A Model stub that contains a single food."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private class ModelStubWithfood extends ModelStub {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        private final Food food;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ModelStubWithfood(Food food) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            this.food \u003d food;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return this.food.isSameFood(food);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * A Model stub that always accept the food being added."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private class ModelStubAcceptingfoodAdded extends ModelStub {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        final ArrayList\u003cFood\u003e foodAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        public boolean hasFood(Food food) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return foodAdded.stream().anyMatch(food::isSameFood);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        public void addFood(Food food) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            requireNonNull(food);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            foodAdded.add(food);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        public ReadOnlyMenu getMenu() {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            return new Menu();"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 60,
      "seanlowjk": 70,
      "jon-chua": 56,
      "-": 129,
      "Raikonen": 59
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/commands/AutoSortCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class AutoSortCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private AutoSortCommand offCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private AutoSortCommand onCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        offCommand \u003d new AutoSortCommand(false);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        onCommand \u003d new AutoSortCommand(true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        model \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute_command_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(offCommand.execute(model) instanceof CommandResult);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(onCommand.execute(model) instanceof CommandResult);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void test_values() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(offCommand.getAutoSortValue(), false);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(onCommand.getAutoSortValue(), true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertNotEquals(offCommand, onCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertNotEquals(offCommand, new Object());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(offCommand, offCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(offCommand, new AutoSortCommand(false));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 44
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/commands/BudgetCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.getTypicalMenu;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.PurchaseHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.recommend.UserRecommendations;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.SavingsAccount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.sorter.CustomSorter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.DaysToExpire;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.RemainingBudget;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.Wallet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * {@code BudgetCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class BudgetCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMenu(), new UserPrefs(), new UserRecommendations(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            new PurchaseHistory(), new CustomSorter(), new SavingsAccount());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void execute_validBudgetAmountAndDuration_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        RemainingBudget testRemainingBudget \u003d new RemainingBudget(\"100\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        DaysToExpire testDaysToExpire \u003d new DaysToExpire(\"30\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        BudgetCommand budgetCommand \u003d new BudgetCommand(new Wallet(testRemainingBudget, testDaysToExpire));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        String expectedMessage \u003d String.format(BudgetCommand.MESSAGE_SET_BUDGET_SUCCESS,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                testRemainingBudget.toString(), testDaysToExpire.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getMenu(), new UserPrefs(), new UserRecommendations(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                new PurchaseHistory(), new CustomSorter(), new SavingsAccount());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            expectedModel.setRemainingBudget(testRemainingBudget);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            expectedModel.setDaysToExpire(testDaysToExpire);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertCommandSuccess(budgetCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        BudgetCommand budgetFirstCommand \u003d new BudgetCommand(new Wallet("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                new RemainingBudget(\"100.50\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                new DaysToExpire(\"30\")));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        BudgetCommand budgetSecondCommand \u003d new BudgetCommand(new Wallet("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                new RemainingBudget(\"250.50\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                new DaysToExpire(\"50\")));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertTrue(budgetFirstCommand.equals(budgetFirstCommand));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        BudgetCommand budgetFirstCommandCopy \u003d new BudgetCommand(new Wallet("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                new RemainingBudget(\"100.50\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                new DaysToExpire(\"30\")));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertTrue(budgetFirstCommand.equals(budgetFirstCommandCopy));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(budgetFirstCommand.equals(1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(budgetFirstCommand.equals(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // different food -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(budgetFirstCommand.equals(budgetSecondCommand));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 3,
      "seanlowjk": 3,
      "jon-chua": 1,
      "Raikonen": 73
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/commands/BuyCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalIndexes.INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalIndexes.INDEX_SECOND_FOOD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.CARBONARA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.getTypicalMenu;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.PurchaseHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.purchase.Purchase;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.recommend.UserRecommendations;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.SavingsAccount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.sorter.CustomSorter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * {@code BuyCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class BuyCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    // Due to the nature of purchases, taking in the current time, testing will be done on the wallet and purchase"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    // history separately..."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    // Please refer to the wallet and purchase history tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMenu(), new UserPrefs(), new UserRecommendations(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            new PurchaseHistory(), new CustomSorter(), new SavingsAccount());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        BuyCommand buyFirstCommand \u003d new BuyCommand(INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        BuyCommand buySecondCommand \u003d new BuyCommand(INDEX_SECOND_FOOD);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertTrue(buyFirstCommand.equals(buyFirstCommand));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        BuyCommand buyFirstCommandCopy \u003d new BuyCommand(INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertTrue(buyFirstCommand.equals(buyFirstCommandCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(buyFirstCommand.equals(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(buyFirstCommand.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // different food -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(buyFirstCommand.equals(buySecondCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute_invalidIndex_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        BuyCommand infiniteBuyCommand \u003d new BuyCommand(Index.fromZeroBased(Integer.MAX_VALUE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e infiniteBuyCommand.execute(model));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute_success() throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        Purchase purchaseToAdd \u003d new Purchase(CARBONARA);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String expectedMessage \u003d String.format(BuyCommand.MESSAGE_BUY_FOOD_SUCCESS, purchaseToAdd.toString());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        BuyCommand correctCommand \u003d new BuyCommand(INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        CommandResult result \u003d correctCommand.execute(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(result, new CommandResult(String.format(BuyCommand.MESSAGE_BUY_FOOD_SUCCESS,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            purchaseToAdd.toString())));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 2,
      "seanlowjk": 27,
      "jon-chua": 2,
      "Raikonen": 44
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.getTypicalMenu;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Menu;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.PurchaseHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.recommend.UserRecommendations;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.SavingsAccount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.sorter.CustomSorter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void execute_emptyMenu_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void execute_nonEmptyMenu_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalMenu(), new UserPrefs(), new UserRecommendations(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                new PurchaseHistory(), new CustomSorter(), new SavingsAccount());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalMenu(), new UserPrefs(), new UserRecommendations(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                new PurchaseHistory(), new CustomSorter(), new SavingsAccount());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        expectedModel.setMenu(new Menu());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 32,
      "seanlowjk": 3,
      "jon-chua": 1,
      "Raikonen": 2
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void is_correctReturn() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\", true, false, false);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(commandResult.isShowHelp());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(commandResult.isJustAdd());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(commandResult.isExit());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 6,
      "robytanama": 10,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_OPENING_HOURS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_RESTRICTIONS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Menu;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.testutil.EditFoodDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String VALID_NAME_CHICKEN_RICE \u003d \"Chicken Rice\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String VALID_NAME_NASI_LEMAK \u003d \"Nasi Lemak\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String VALID_PRICE_CHICKEN_RICE \u003d \"5.80\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String VALID_PRICE_NASI_LEMAK \u003d \"4.50\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String VALID_DESCRIPTION_CHICKEN_RICE \u003d \"chicken and rice\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String VALID_DESCRIPTION_NASI_LEMAK \u003d \"rice with fried chicken\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String VALID_CATEGORY_CHICKEN_RICE \u003d \"Chinese\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String VALID_CATEGORY_NASI_LEMAK \u003d \"Malay\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String VALID_TAG_CHICKEN \u003d \"chicken\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String VALID_TAG_RICE \u003d \"rice\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String VALID_LOCATION_CHICKEN_RICE \u003d \"The Deck\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String VALID_LOCATION_NASI_LEMAK \u003d \"Frontier Canteen\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String VALID_OPENING_HOURS_CHICKEN_RICE \u003d \"0800 2100\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String VALID_OPENING_HOURS_NASI_LEMAK \u003d \"0900 1000\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String VALID_RESTRICTIONS_CHICKEN_RICE \u003d \"Not halal\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String VALID_RESTRICTIONS_NASI_LEMAK \u003d \"Contains dairy\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String NAME_DESC_CHICKEN_RICE \u003d \" \" + PREFIX_NAME + VALID_NAME_CHICKEN_RICE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String NAME_DESC_NASI_LEMAK \u003d \" \" + PREFIX_NAME + VALID_NAME_NASI_LEMAK;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String PRICE_DESC_CHICKEN_RICE \u003d \" \" + PREFIX_PRICE + VALID_PRICE_CHICKEN_RICE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String PRICE_DESC_NASI_LEMAK \u003d \" \" + PREFIX_PRICE + VALID_PRICE_NASI_LEMAK;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String DESCRIPTION_DESC_CHICKEN_RICE \u003d \" \" + PREFIX_DESCRIPTION"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                                                    + VALID_DESCRIPTION_CHICKEN_RICE;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String DESCRIPTION_DESC_NASI_LEMAK \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_NASI_LEMAK;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String CATEGORY_DESC_CHICKEN_RICE \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_CHICKEN_RICE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String CATEGORY_DESC_NASI_LEMAK \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_NASI_LEMAK;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String TAG_DESC_RICE \u003d \" \" + PREFIX_TAG + VALID_TAG_RICE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String TAG_DESC_CHICKEN \u003d \" \" + PREFIX_TAG + VALID_TAG_CHICKEN;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String LOCATION_DESC_CHICKEN_RICE \u003d \" \" + PREFIX_LOCATION + VALID_LOCATION_CHICKEN_RICE;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String LOCATION_DESC_NASI_LEMAK \u003d \" \" + PREFIX_LOCATION + VALID_LOCATION_NASI_LEMAK;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String OPENING_HOURS_DESC_CHICKEN_RICE \u003d \" \" + PREFIX_OPENING_HOURS"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                                                        + VALID_OPENING_HOURS_CHICKEN_RICE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String OPENING_HOURS_DESC_NASI_LEMAK \u003d \" \" + PREFIX_OPENING_HOURS"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                                                    + VALID_OPENING_HOURS_NASI_LEMAK;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String RESTRICTIONS_DESC_CHICKEN_RICE \u003d \" \" + PREFIX_RESTRICTIONS"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                                                        + VALID_RESTRICTIONS_CHICKEN_RICE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String RESTRICTIONS_DESC_NASI_LEMAK \u003d \" \" + PREFIX_RESTRICTIONS"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                                                    + VALID_RESTRICTIONS_NASI_LEMAK;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String INVALID_PRICE_DESC \u003d \" \" + PREFIX_PRICE + \"911a\"; // \u0027a\u0027 not allowed in prices"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION + \"   \"; // spaces only not allowed"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"beef*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String INVALID_LOCATION_DESC \u003d \" \" + PREFIX_LOCATION + \"    \"; // spaces only not allowed"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final EditCommand.EditFoodDescriptor DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final EditCommand.EditFoodDescriptor DESC_NASI_LEMAK;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        DESC_CHICKEN_RICE \u003d new EditFoodDescriptorBuilder().withName(VALID_NAME_CHICKEN_RICE)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                .withPrice(VALID_PRICE_CHICKEN_RICE).withDescription(VALID_DESCRIPTION_CHICKEN_RICE)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .withTags(VALID_TAG_RICE).withLocation(VALID_LOCATION_CHICKEN_RICE)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .withOpeningHours(VALID_OPENING_HOURS_CHICKEN_RICE).withRestrictions(VALID_RESTRICTIONS_CHICKEN_RICE)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        DESC_NASI_LEMAK \u003d new EditFoodDescriptorBuilder().withName(VALID_NAME_NASI_LEMAK)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                .withPrice(VALID_PRICE_NASI_LEMAK).withDescription(VALID_DESCRIPTION_NASI_LEMAK)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .withTags(VALID_TAG_CHICKEN, VALID_TAG_RICE).withLocation(VALID_LOCATION_NASI_LEMAK)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .withOpeningHours(VALID_OPENING_HOURS_NASI_LEMAK).withRestrictions(VALID_RESTRICTIONS_NASI_LEMAK)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * - the address book, filtered food list and selected food in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Menu expectedAddressBook \u003d new Menu(actualModel.getMenu());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        List\u003cFood\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredFoodList());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getMenu());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredFoodList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the food at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static void showFoodAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredFoodList().size());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Food food \u003d model.getFilteredFoodList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        final String[] splitName \u003d food.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        model.updateFilteredFoodList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(1, model.getFilteredFoodList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 61,
      "seanlowjk": 10,
      "jon-chua": 13,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/commands/CustomSortCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class CustomSortCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute_correctReturnType() throws CommandException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        CustomSortCommand test \u003d new CustomSortCommand();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(test.execute(model) instanceof CommandResult);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 19
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/commands/DefaultCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class DefaultCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        DefaultCommand test \u003d new DefaultCommand();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(test, test);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(test, new DefaultCommand());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(new DefaultCommand(), new DefaultCommand());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void execute_correctReturnType() throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        DefaultCommand test \u003d new DefaultCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(test.execute(model) instanceof CommandResult);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 15,
      "robytanama": 14
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.showFoodAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.TypicalIndexes.INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.TypicalIndexes.INDEX_SECOND_FOOD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.getTypicalMenu;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.PurchaseHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.recommend.UserRecommendations;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.SavingsAccount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.sorter.CustomSorter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMenu(), new UserPrefs(), new UserRecommendations(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            new PurchaseHistory(), new CustomSorter(), new SavingsAccount());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Food foodToDelete \u003d model.getFilteredFoodList().get(INDEX_FIRST_FOOD.getZeroBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_FOOD_SUCCESS, foodToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getMenu(), new UserPrefs(), new UserRecommendations(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                new PurchaseHistory(), new CustomSorter(), new SavingsAccount());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        expectedModel.deleteFood(foodToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFoodList().size() + 1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute_infiniteIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(Integer.MAX_VALUE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        showFoodAtIndex(model, INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Food foodToDelete \u003d model.getFilteredFoodList().get(INDEX_FIRST_FOOD.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_FOOD_SUCCESS, foodToDelete);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getMenu(), new UserPrefs(), new UserRecommendations(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                new PurchaseHistory(), new CustomSorter(), new SavingsAccount());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        expectedModel.deleteFood(foodToDelete);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        showNoFood(expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        showFoodAtIndex(model, INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_FOOD;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMenu().getFoodList().size());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_FOOD);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // different food -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private void showNoFood(Model model) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        model.updateFilteredFoodList(p -\u003e false);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(model.getFilteredFoodList().isEmpty());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 17,
      "seanlowjk": 33,
      "jon-chua": 1,
      "-": 69,
      "Raikonen": 3
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.DESC_NASI_LEMAK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_NAME_NASI_LEMAK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_PRICE_NASI_LEMAK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_TAG_CHICKEN;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.showFoodAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.TypicalIndexes.INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.TypicalIndexes.INDEX_SECOND_FOOD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.getTypicalMenu;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.EditCommand.EditFoodDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Menu;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.PurchaseHistory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.recommend.UserRecommendations;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.SavingsAccount;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.sorter.CustomSorter;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.testutil.EditFoodDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMenu(), new UserPrefs(), new UserRecommendations(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            new PurchaseHistory(), new CustomSorter(), new SavingsAccount());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Food editedFood \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        EditFoodDescriptor descriptor \u003d new EditFoodDescriptorBuilder(editedFood).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_FOOD, descriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FOOD_SUCCESS, editedFood);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Menu(model.getMenu()), new UserPrefs(), new UserRecommendations(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                new PurchaseHistory(), new CustomSorter(), new SavingsAccount());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        expectedModel.setFood(model.getFilteredFoodList().get(0), editedFood);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Index indexLastFood \u003d Index.fromOneBased(model.getFilteredFoodList().size());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Food lastFood \u003d model.getFilteredFoodList().get(indexLastFood.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        FoodBuilder foodInList \u003d new FoodBuilder(lastFood);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Food editedFood \u003d foodInList.withName(VALID_NAME_NASI_LEMAK).withPrice(VALID_PRICE_NASI_LEMAK)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                .withTags(VALID_TAG_CHICKEN).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        EditFoodDescriptor descriptor \u003d new EditFoodDescriptorBuilder().withName(VALID_NAME_NASI_LEMAK)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                .withPrice(VALID_PRICE_NASI_LEMAK).withTags(VALID_TAG_CHICKEN).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastFood, descriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FOOD_SUCCESS, editedFood);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Menu(model.getMenu()), new UserPrefs(), new UserRecommendations(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                new PurchaseHistory(), new CustomSorter(), new SavingsAccount());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        expectedModel.setFood(lastFood, editedFood);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_FOOD, new EditFoodDescriptor());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Food editedFood \u003d model.getFilteredFoodList().get(INDEX_FIRST_FOOD.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FOOD_SUCCESS, editedFood);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Menu(model.getMenu()), new UserPrefs(), new UserRecommendations(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                new PurchaseHistory(), new CustomSorter(), new SavingsAccount());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        showFoodAtIndex(model, INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Food foodInFilteredList \u003d model.getFilteredFoodList().get(INDEX_FIRST_FOOD.getZeroBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Food editedFood \u003d new FoodBuilder(foodInFilteredList).withName(VALID_NAME_NASI_LEMAK).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_FOOD,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                new EditFoodDescriptorBuilder().withName(VALID_NAME_NASI_LEMAK).build());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_FOOD_SUCCESS, editedFood);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new Menu(model.getMenu()), new UserPrefs(), new UserRecommendations(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                new PurchaseHistory(), new CustomSorter(), new SavingsAccount());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        expectedModel.setFood(model.getFilteredFoodList().get(0), editedFood);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute_duplicatefoodUnfilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Food firstFood \u003d model.getFilteredFoodList().get(INDEX_FIRST_FOOD.getZeroBased());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        EditFoodDescriptor descriptor \u003d new EditFoodDescriptorBuilder(firstFood).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_FOOD, descriptor);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute_duplicatefoodFilteredList_failure() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        showFoodAtIndex(model, INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // edit food in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Food foodInList \u003d model.getMenu().getFoodList().get(INDEX_SECOND_FOOD.getZeroBased());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_FOOD,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                new EditFoodDescriptorBuilder(foodInList).build());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_FOOD);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute_invalidfoodIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredFoodList().size() + 1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        EditFoodDescriptor descriptor \u003d new EditFoodDescriptorBuilder().withName(VALID_NAME_NASI_LEMAK).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute_invalidFoodIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        showFoodAtIndex(model, INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_FOOD;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getMenu().getFoodList().size());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                new EditFoodDescriptorBuilder().withName(VALID_NAME_NASI_LEMAK).build());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_FOOD_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_FOOD, DESC_CHICKEN_RICE);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        EditFoodDescriptor copyDescriptor \u003d new EditFoodDescriptor(DESC_CHICKEN_RICE);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_FOOD, copyDescriptor);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_FOOD, DESC_CHICKEN_RICE)));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_FOOD, DESC_NASI_LEMAK)));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 41,
      "seanlowjk": 41,
      "jon-chua": 1,
      "-": 94,
      "Raikonen": 5
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/commands/EditFoodDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.DESC_NASI_LEMAK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_DESCRIPTION_NASI_LEMAK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_NAME_NASI_LEMAK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_PRICE_NASI_LEMAK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_TAG_CHICKEN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.EditCommand.EditFoodDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.testutil.EditFoodDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class EditFoodDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        EditFoodDescriptor descriptorWithSameValues \u003d new EditFoodDescriptor(DESC_CHICKEN_RICE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertTrue(DESC_CHICKEN_RICE.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertTrue(DESC_CHICKEN_RICE.equals(DESC_CHICKEN_RICE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertFalse(DESC_CHICKEN_RICE.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertFalse(DESC_CHICKEN_RICE.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertFalse(DESC_CHICKEN_RICE.equals(DESC_NASI_LEMAK));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        EditFoodDescriptor editedChickenRice \u003d new EditFoodDescriptorBuilder(DESC_CHICKEN_RICE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                                    .withName(VALID_NAME_NASI_LEMAK).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertFalse(DESC_CHICKEN_RICE.equals(editedChickenRice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // different price -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        editedChickenRice \u003d new EditFoodDescriptorBuilder(DESC_CHICKEN_RICE).withPrice(VALID_PRICE_NASI_LEMAK).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertFalse(DESC_CHICKEN_RICE.equals(editedChickenRice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        editedChickenRice \u003d new EditFoodDescriptorBuilder(DESC_CHICKEN_RICE)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                                .withDescription(VALID_DESCRIPTION_NASI_LEMAK).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertFalse(DESC_CHICKEN_RICE.equals(editedChickenRice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        editedChickenRice \u003d new EditFoodDescriptorBuilder(DESC_CHICKEN_RICE).withTags(VALID_TAG_CHICKEN).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertFalse(DESC_CHICKEN_RICE.equals(editedChickenRice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 25,
      "seanlowjk": 2,
      "jon-chua": 1,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 6,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/commands/FilterCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.getTypicalMenu;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.PurchaseHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.recommend.UserRecommendations;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.SavingsAccount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.sorter.CustomSorter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class FilterCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private List\u003cString\u003e fields;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private FilterCommand command;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void set_up() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        fields \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        model \u003d new ModelManager(getTypicalMenu(), new UserPrefs(), new UserRecommendations(), new PurchaseHistory(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                new CustomSorter(), new SavingsAccount());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getMenu(), new UserPrefs(), new UserRecommendations(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                new PurchaseHistory(), new CustomSorter(), new SavingsAccount());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute_recommendCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertCommandSuccess(new FilterCommand(fields), model,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            FilterCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void getFields_test() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        command \u003d new FilterCommand(fields);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(command.getFields(), fields);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(command.getFields(), new ArrayList\u003cString\u003e());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void equals_test() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        command \u003d new FilterCommand(fields);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(command, command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(command, new FilterCommand(fields));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertNotEquals(command, null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 3,
      "seanlowjk": 52,
      "jon-chua": 1,
      "Raikonen": 2
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.commons.core.Messages.MESSAGE_FOOD_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.BAK_KUT_TEH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.TEH_PING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.WAGYU_DONBURI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.getTypicalMenu;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.PurchaseHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.recommend.UserRecommendations;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.SavingsAccount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.sorter.CustomSorter;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMenu(), new UserPrefs(), new UserRecommendations(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            new PurchaseHistory(), new CustomSorter(), new SavingsAccount());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalMenu(), new UserPrefs(), new UserRecommendations(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            new PurchaseHistory(), new CustomSorter(), new SavingsAccount());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // different food -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute_zeroKeywords_nofoodFound() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FOOD_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        expectedModel.updateFilteredFoodList(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredFoodList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute_multipleKeywords_multiplefoodsFound() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_FOOD_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Teh\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        expectedModel.updateFilteredFoodList(predicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertEquals(Arrays.asList(BAK_KUT_TEH, TEH_PING, WAGYU_DONBURI), model.getFilteredFoodList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 12,
      "seanlowjk": 11,
      "jon-chua": 1,
      "-": 60,
      "Raikonen": 5
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 6,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/commands/HistoryCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.getTypicalMenu;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.PurchaseHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.recommend.UserRecommendations;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.SavingsAccount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.sorter.CustomSorter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        model \u003d new ModelManager(getTypicalMenu(), new UserPrefs(), new UserRecommendations(), new PurchaseHistory(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                new CustomSorter(), new SavingsAccount());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute_noCommands_history() throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(new HistoryCommand().execute(model).getFeedbackToUser(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                HistoryCommand.MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 2,
      "seanlowjk": 27,
      "jon-chua": 1,
      "Raikonen": 2
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/commands/InfoCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.logic.parser.InfoCommandParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.parser.SaveNusParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": " * Contains tests for {@code InfoCommand}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class InfoCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private static Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private static Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private static SaveNusParser saveNusParser \u003d new SaveNusParser();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private static InfoCommandParser infoParser \u003d new InfoCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private static final InfoCommand infoAdd \u003d new InfoCommand(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private static final InfoCommand infoBudget \u003d new InfoCommand(BudgetCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private static final InfoCommand infoBuy \u003d new InfoCommand(BuyCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private static final String VALID_COMMAND \u003d \"add\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private static final String INVALID_COMMAND \u003d \"23ibdf\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private static final String MULTIPLE_COMMAND \u003d \"info add edit\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private static final String VALID_USER_INPUT \u003d \"info edit\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private static final String INVALID_USER_INPUT \u003d \"info asdjasgdas\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private static final String RANDOM_INVALID_USER_INPUT \u003d \"asioufgsaf\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private static final String INVALID_MULTIPLE_COMMAND_USER_INPUT \u003d \"info edit add recommend\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        // Same object, should return true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(infoAdd.equals(infoAdd));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertEquals(infoAdd, infoAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        // Different object, should return false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(!infoAdd.equals(infoBudget));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(infoBuy.equals(infoBudget));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void input_validUserInput_parseSuccess() throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        InfoCommand validEditInfo \u003d (InfoCommand) saveNusParser.parseCommand(VALID_USER_INPUT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                new CommandResult(InfoCommand.EDIT_INFO, false, false, false);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertCommandSuccess(validEditInfo, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void input_invalidUserInput_throwParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e saveNusParser.parseCommand(RANDOM_INVALID_USER_INPUT));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void input_invalidUserInput_invalidCommandFailure() throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        InfoCommand invalidInfo \u003d (InfoCommand) saveNusParser.parseCommand(INVALID_USER_INPUT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertCommandFailure(invalidInfo, model, InfoCommand.INVALID_COMMAND_ENTERED_MESSAGE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void input_invalidUserInput_multipleCommandFailure() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e saveNusParser.parseCommand(INVALID_MULTIPLE_COMMAND_USER_INPUT));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void input_validCommandSuccess() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        // Add command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        InfoCommand modelInfoAdd \u003d new InfoCommand(VALID_COMMAND);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertEquals(modelInfoAdd.getInput(), VALID_COMMAND);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                new CommandResult(InfoCommand.ADD_INFO, false, false, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertCommandSuccess(modelInfoAdd, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        // Budget command"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        expectedCommandResult \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                new CommandResult(InfoCommand.BUDGET_INFO, false, false, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertCommandSuccess(new InfoCommand(\"budget\"), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        // Buy command"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        expectedCommandResult \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                new CommandResult(InfoCommand.BUY_INFO, false, false, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertCommandSuccess(new InfoCommand(\"buy\"), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        // Clear command"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        expectedCommandResult \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                new CommandResult(InfoCommand.CLEAR_INFO, false, false, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertCommandSuccess(new InfoCommand(\"clear\"), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        // Default command"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        expectedCommandResult \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                new CommandResult(InfoCommand.DEFAULT_INFO, false, false, false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertCommandSuccess(new InfoCommand(\"default\"), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        // Delete command"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        expectedCommandResult \u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                new CommandResult(InfoCommand.DELETE_INFO, false, false, false);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertCommandSuccess(new InfoCommand(\"delete\"), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        // Edit command"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        expectedCommandResult \u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                new CommandResult(InfoCommand.EDIT_INFO, false, false, false);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertCommandSuccess(new InfoCommand(\"edit\"), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        // Exit command"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        expectedCommandResult \u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                new CommandResult(InfoCommand.EXIT_INFO, false, false, false);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertCommandSuccess(new InfoCommand(\"exit\"), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        // Find command"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        expectedCommandResult \u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                new CommandResult(InfoCommand.FIND_INFO, false, false, false);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertCommandSuccess(new InfoCommand(\"find\"), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        // Help command"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        expectedCommandResult \u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                new CommandResult(InfoCommand.HELP_INFO, false, false, false);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertCommandSuccess(new InfoCommand(\"help\"), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        // Info command"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        expectedCommandResult \u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                new CommandResult(InfoCommand.INFO_INFO, false, false, false);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertCommandSuccess(new InfoCommand(\"info\"), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        // List command"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        expectedCommandResult \u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                new CommandResult(InfoCommand.LIST_INFO, false, false, false);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertCommandSuccess(new InfoCommand(\"list\"), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        // Recommend command"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        expectedCommandResult \u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                new CommandResult(InfoCommand.RECOMMEND_INFO, false, false, false);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertCommandSuccess(new InfoCommand(\"recommend\"), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        // Sort command"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        expectedCommandResult \u003d"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                new CommandResult(InfoCommand.SORT_INFO, false, false, false);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertCommandSuccess(new InfoCommand(\"sort\"), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void input_invalidCommandFailure() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        InfoCommand invalidInfo \u003d new InfoCommand(INVALID_COMMAND);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertCommandFailure(invalidInfo, model, InfoCommand.INVALID_COMMAND_ENTERED_MESSAGE);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void input_multipleCommandFailure() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        // Testing that the InfoCommand fails"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        InfoCommand multipleInfo \u003d new InfoCommand(MULTIPLE_COMMAND);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertCommandFailure(multipleInfo, model, InfoCommand.INVALID_COMMAND_ENTERED_MESSAGE);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void input_multipleCommand_throwsParseException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e infoParser.parse(MULTIPLE_COMMAND));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void input_emptyCommand_throwsParseException() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e infoParser.parse(\"\"));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void constructor_invalidCommand_throwsCommandException() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new InfoCommand(INVALID_COMMAND).execute(model));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void getInput_success() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        InfoCommand infoCommand \u003d new InfoCommand(\"Input\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(infoCommand.getInput().equals(\"Input\"));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void execute_correctReturn() throws CommandException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        InfoCommand addInfoCommand \u003d new InfoCommand(VALID_COMMAND);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertEquals(new CommandResult(InfoCommand.ADD_INFO), addInfoCommand.execute(model));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 6,
      "robytanama": 186
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.showFoodAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.TypicalIndexes.INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.getTypicalMenu;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.PurchaseHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.recommend.UserRecommendations;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.SavingsAccount;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.sorter.CustomSorter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        model \u003d new ModelManager(getTypicalMenu(), new UserPrefs(), new UserRecommendations(), new PurchaseHistory(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                new CustomSorter(), new SavingsAccount());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getMenu(), new UserPrefs(), new UserRecommendations(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                new PurchaseHistory(), new CustomSorter(), new SavingsAccount());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        showFoodAtIndex(model, INDEX_FIRST_FOOD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 10,
      "seanlowjk": 3,
      "jon-chua": 1,
      "-": 28,
      "Raikonen": 3
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/commands/MakeSortCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class MakeSortCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private List\u003cString\u003e fields \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void execute_correctReturnType() throws CommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        MakeSortCommand test \u003d new MakeSortCommand(fields);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(test.execute(model) instanceof CommandResult);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 23
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/commands/PreferenceCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.getTypicalMenu;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.PurchaseHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Category;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Location;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.recommend.UserRecommendations;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.SavingsAccount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.sorter.CustomSorter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " * Contains tests for both LikeCommand and DislikeCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "public class PreferenceCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private static final Category FIRST_CATEGORY \u003d new Category(\"category 123\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private static final Category SECOND_CATEGORY \u003d new Category(\"another category 456\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private static final Tag FIRST_TAG \u003d new Tag(\"dnfbkdngbkjsnb\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private static final Tag SECOND_TAG \u003d new Tag(\"qwrbqirbqirb\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private static final Location FIRST_LOCATION \u003d new Location(\"location 123\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private static final Location SECOND_LOCATION \u003d new Location(\"another test location 456\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private Set\u003cCategory\u003e testCategory;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private Set\u003cTag\u003e testTag;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private Set\u003cLocation\u003e testLocation;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        testCategory \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        testTag \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        testLocation \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        testCategory.add(FIRST_CATEGORY);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        testCategory.add(SECOND_CATEGORY);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        testTag.add(FIRST_TAG);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        testTag.add(SECOND_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        testLocation.add(FIRST_LOCATION);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        testLocation.add(SECOND_LOCATION);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        model \u003d new ModelManager(getTypicalMenu(), new UserPrefs(), new UserRecommendations(), new PurchaseHistory(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                new CustomSorter(), new SavingsAccount());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        model.clearDislikes();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        model.clearLikes();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void likeConstructor_nullSet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new LikeCommand(null, null, null, false));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new LikeCommand(null, new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), false));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new LikeCommand(new HashSet\u003c\u003e(), null, new HashSet\u003c\u003e(), false));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new LikeCommand(new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), null, false));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void dislikeConstructor_nullSet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new DislikeCommand(null, null, null, false));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new DislikeCommand(null, new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), false));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new DislikeCommand(new HashSet\u003c\u003e(), null, new HashSet\u003c\u003e(), false));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new DislikeCommand(new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), null, false));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void likeCommand_equals() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        LikeCommand first \u003d new LikeCommand(testCategory, testTag, testLocation, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        LikeCommand second \u003d new LikeCommand(testCategory, testTag, testLocation, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        LikeCommand third \u003d new LikeCommand(new HashSet\u003c\u003e(), testTag, testLocation, false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        LikeCommand fourth \u003d new LikeCommand(testCategory, new HashSet\u003c\u003e(), testLocation, false);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        LikeCommand fifth \u003d new LikeCommand(testCategory, testTag, new HashSet\u003c\u003e(), false);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertTrue(first.equals(first));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertTrue(first.equals(second));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertFalse(first.equals(third));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertFalse(first.equals(fourth));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertFalse(first.equals(fifth));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void dislikeCommand_equals() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        DislikeCommand first \u003d new DislikeCommand(testCategory, testTag, testLocation, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        DislikeCommand second \u003d new DislikeCommand(testCategory, testTag, testLocation, false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        DislikeCommand third \u003d new DislikeCommand(new HashSet\u003c\u003e(), testTag, testLocation, false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        DislikeCommand fourth \u003d new DislikeCommand(testCategory, new HashSet\u003c\u003e(), testLocation, false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        DislikeCommand fifth \u003d new DislikeCommand(testCategory, testTag, new HashSet\u003c\u003e(), false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertTrue(first.equals(first));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertTrue(first.equals(second));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertFalse(first.equals(third));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertFalse(first.equals(fourth));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertFalse(first.equals(fifth));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void likeCommand_executeSuccess() throws CommandException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        CommandResult result \u003d new LikeCommand(testCategory, testTag, testLocation, false).execute(model);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertTrue(result.getFeedbackToUser().contains(LikeCommand.MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void dislikeCommand_executeSuccess() throws CommandException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        CommandResult result \u003d new DislikeCommand(testCategory, testTag, testLocation, false).execute(model);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertTrue(result.getFeedbackToUser().contains(DislikeCommand.MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void likeCommand_addCategory_contains() throws CommandException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        CommandResult result \u003d new LikeCommand(testCategory, new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), false).execute(model);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertTrue(result.getFeedbackToUser().contains(LikeCommand.MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        for (Category c : testCategory) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            assertTrue(result.getFeedbackToUser().contains(c.category));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void dislikeCommand_addCategory_contains() throws CommandException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        CommandResult result \u003d new DislikeCommand(testCategory, new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), false).execute(model);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertTrue(result.getFeedbackToUser().contains(DislikeCommand.MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        for (Category c : testCategory) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            assertTrue(result.getFeedbackToUser().contains(c.category));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void likeCommand_addTags_contains() throws CommandException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        CommandResult result \u003d new LikeCommand(new HashSet\u003c\u003e(), testTag, new HashSet\u003c\u003e(), false).execute(model);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertTrue(result.getFeedbackToUser().contains(LikeCommand.MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        for (Tag t : testTag) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            assertTrue(result.getFeedbackToUser().contains(t.tagName));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void dislikeCommand_addTags_contains() throws CommandException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        CommandResult result \u003d new DislikeCommand(new HashSet\u003c\u003e(), testTag, new HashSet\u003c\u003e(), false).execute(model);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertTrue(result.getFeedbackToUser().contains(DislikeCommand.MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        for (Tag t : testTag) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            assertTrue(result.getFeedbackToUser().contains(t.tagName));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void likeCommand_addLocation_contains() throws CommandException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        CommandResult result \u003d new LikeCommand(new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), testLocation, false).execute(model);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertTrue(result.getFeedbackToUser().contains(LikeCommand.MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        for (Location l : testLocation) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            assertTrue(result.getFeedbackToUser().contains(l.location));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void dislikeCommand_addLocation_contains() throws CommandException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        CommandResult result \u003d new DislikeCommand(new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), testLocation, false).execute(model);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertTrue(result.getFeedbackToUser().contains(DislikeCommand.MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        for (Location l : testLocation) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            assertTrue(result.getFeedbackToUser().contains(l.location));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void likeCommand_categoryFoundInOppositeList_executeFailure() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        model.addDislikes(testCategory, new HashSet\u003c\u003e(), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        Set\u003cCategory\u003e addCategory \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        addCategory.add(SECOND_CATEGORY);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        LikeCommand likeCommand \u003d new LikeCommand(addCategory, new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), false);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(CommandException.class, LikeCommand.DUPLICATE_FOUND_IN_OPPOSITE_LIST, () -\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                likeCommand.execute(model));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void dislikeCommand_categoryFoundInOppositeList_executeFailure() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        model.addLikes(testCategory, new HashSet\u003c\u003e(), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        Set\u003cCategory\u003e addCategory \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        addCategory.add(SECOND_CATEGORY);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        DislikeCommand dislikeCommand \u003d new DislikeCommand(addCategory, new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), false);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(CommandException.class, DislikeCommand.DUPLICATE_FOUND_IN_OPPOSITE_LIST, () -\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                dislikeCommand.execute(model));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void likeCommand_tagFoundInOppositeList_executeFailure() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        model.addDislikes(new HashSet\u003c\u003e(), testTag, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        Set\u003cTag\u003e addTag \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        addTag.add(FIRST_TAG);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        LikeCommand likeCommand \u003d new LikeCommand(new HashSet\u003c\u003e(), addTag, new HashSet\u003c\u003e(), false);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(CommandException.class, LikeCommand.DUPLICATE_FOUND_IN_OPPOSITE_LIST, () -\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                likeCommand.execute(model));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void dislikeCommand_tagFoundInOppositeList_executeFailure() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        model.addLikes(new HashSet\u003c\u003e(), testTag, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        Set\u003cTag\u003e addTag \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        addTag.add(FIRST_TAG);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        DislikeCommand dislikeCommand \u003d new DislikeCommand(new HashSet\u003c\u003e(), addTag, new HashSet\u003c\u003e(), false);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(CommandException.class, DislikeCommand.DUPLICATE_FOUND_IN_OPPOSITE_LIST, () -\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                dislikeCommand.execute(model));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void likeCommand_locationFoundInOppositeList_executeFailure() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        model.addDislikes(new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), testLocation);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        Set\u003cLocation\u003e addLocation \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        addLocation.add(SECOND_LOCATION);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        LikeCommand likeCommand \u003d new LikeCommand(new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), addLocation, false);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(CommandException.class, LikeCommand.DUPLICATE_FOUND_IN_OPPOSITE_LIST, () -\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                likeCommand.execute(model));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void dislikeCommand_locationFoundInOppositeList_executeFailure() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        model.addLikes(new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), testLocation);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        Set\u003cLocation\u003e addLocation \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        addLocation.add(SECOND_LOCATION);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        DislikeCommand dislikeCommand \u003d new DislikeCommand(new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), addLocation, false);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(CommandException.class, DislikeCommand.DUPLICATE_FOUND_IN_OPPOSITE_LIST, () -\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                dislikeCommand.execute(model));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void wrong_execute_error() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            AssertionError.class, () -\u003e new PreferenceCommand(testCategory, testTag, testLocation, false).execute(model)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        );"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 2,
      "seanlowjk": 7,
      "jon-chua": 256,
      "Raikonen": 2
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/commands/RecommendCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.CHICKEN_RICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.getTypicalMenu;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.PurchaseHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.recommend.UserRecommendations;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.SavingsAccount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.sorter.CustomSorter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " * Contains integration tests and unit tests for RecommendCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "public class RecommendCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        model \u003d new ModelManager(getTypicalMenu(), new UserPrefs(), new UserRecommendations(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                new PurchaseHistory(), new CustomSorter(), new SavingsAccount());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getMenu(), new UserPrefs(), new UserRecommendations(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                new PurchaseHistory(), new CustomSorter(), new SavingsAccount());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void execute_recommendCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertCommandSuccess(new RecommendCommand(), model, RecommendCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertTrue(model.getRecommendationSystem().isInUse());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void recommendCommand_notInUse_afterList() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertCommandSuccess(new RecommendCommand(), model, RecommendCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertTrue(model.getRecommendationSystem().isInUse());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertFalse(model.getRecommendationSystem().isInUse());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void recommendCommand_notInUse_afterAdd() throws CommandException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertCommandSuccess(new RecommendCommand(), model, RecommendCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertTrue(model.getRecommendationSystem().isInUse());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(CHICKEN_RICE).execute(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, CHICKEN_RICE), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertFalse(model.getRecommendationSystem().isInUse());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        final RecommendCommand standardCommand \u003d new RecommendCommand();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertEquals(standardCommand, standardCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertNotEquals(null, standardCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 4,
      "seanlowjk": 2,
      "jon-chua": 69,
      "Raikonen": 1
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/commands/RemovePreferenceCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.getTypicalMenu;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalRecs.ADDED_ANOTHER_CATEGORY_SET;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalRecs.ADDED_ANOTHER_LOCATION_SET;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalRecs.ADDED_ANOTHER_TAG_SET;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalRecs.DISLIKED_CATEGORY_SET;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalRecs.DISLIKED_LOCATION_SET;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalRecs.DISLIKED_TAG_SET;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalRecs.LIKED_CATEGORY_SET;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalRecs.LIKED_LOCATION_SET;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalRecs.LIKED_TAG_SET;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalRecs.getTypicalRecs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.PurchaseHistory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Category;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Location;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.recommend.UserRecommendations;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.SavingsAccount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.sorter.CustomSorter;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.tag.Tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " * Contains tests for both RemoveLikeCommand and RemoveDislikeCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "public class RemovePreferenceCommandTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        model \u003d new ModelManager(getTypicalMenu(), new UserPrefs(), new UserRecommendations(), new PurchaseHistory(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                new CustomSorter(), new SavingsAccount());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        model.getRecommendationSystem().setUserRecommendations(getTypicalRecs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void removeLikeConstructor_nullSet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveLikeCommand(null, null, null, false));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveLikeCommand(null, new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), false));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveLikeCommand(new HashSet\u003c\u003e(), null, new HashSet\u003c\u003e(), false));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveLikeCommand(new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), null, false));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void removeDislikeConstructor_nullSet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveDislikeCommand(null, null, null, false));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveDislikeCommand(null, new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), false));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveDislikeCommand(new HashSet\u003c\u003e(), null, new HashSet\u003c\u003e(), false));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveDislikeCommand(new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), null, false));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void removeLikeCommand_equals() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        RemoveLikeCommand first \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveLikeCommand(LIKED_CATEGORY_SET, LIKED_TAG_SET, LIKED_LOCATION_SET, false);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        RemoveLikeCommand second \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveLikeCommand(LIKED_CATEGORY_SET, LIKED_TAG_SET, LIKED_LOCATION_SET, false);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        RemoveLikeCommand third \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveLikeCommand(new HashSet\u003c\u003e(), LIKED_TAG_SET, LIKED_LOCATION_SET, false);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        RemoveLikeCommand fourth \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveLikeCommand(LIKED_CATEGORY_SET, new HashSet\u003c\u003e(), LIKED_LOCATION_SET, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        RemoveLikeCommand fifth \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveLikeCommand(LIKED_CATEGORY_SET, LIKED_TAG_SET, new HashSet\u003c\u003e(), false);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertTrue(first.equals(first));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertTrue(first.equals(second));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertFalse(first.equals(third));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertFalse(first.equals(fourth));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertFalse(first.equals(fifth));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void removeDislikeCommand_equals() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        RemoveDislikeCommand first \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveDislikeCommand(DISLIKED_CATEGORY_SET, DISLIKED_TAG_SET, DISLIKED_LOCATION_SET, false);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        RemoveDislikeCommand second \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveDislikeCommand(DISLIKED_CATEGORY_SET, DISLIKED_TAG_SET, DISLIKED_LOCATION_SET, false);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        RemoveDislikeCommand third \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveDislikeCommand(new HashSet\u003c\u003e(), DISLIKED_TAG_SET, DISLIKED_LOCATION_SET, false);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        RemoveDislikeCommand fourth \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveDislikeCommand(DISLIKED_CATEGORY_SET, new HashSet\u003c\u003e(), DISLIKED_LOCATION_SET, false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        RemoveDislikeCommand fifth \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveDislikeCommand(DISLIKED_CATEGORY_SET, DISLIKED_TAG_SET, new HashSet\u003c\u003e(), false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertTrue(first.equals(first));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertTrue(first.equals(second));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertFalse(first.equals(third));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertFalse(first.equals(fourth));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertFalse(first.equals(fifth));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void removeLikeCommand_executeSuccess() throws CommandException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        model.addLikes(ADDED_ANOTHER_CATEGORY_SET, ADDED_ANOTHER_TAG_SET, ADDED_ANOTHER_LOCATION_SET);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        CommandResult result \u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveLikeCommand(ADDED_ANOTHER_CATEGORY_SET, ADDED_ANOTHER_TAG_SET,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                        ADDED_ANOTHER_LOCATION_SET, false)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                        .execute(model);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertTrue(result.getFeedbackToUser().contains(RemoveLikeCommand.MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void removeDislikeCommand_executeSuccess() throws CommandException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        model.addDislikes(ADDED_ANOTHER_CATEGORY_SET, ADDED_ANOTHER_TAG_SET, ADDED_ANOTHER_LOCATION_SET);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        CommandResult result \u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveDislikeCommand(ADDED_ANOTHER_CATEGORY_SET, ADDED_ANOTHER_TAG_SET,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                        ADDED_ANOTHER_LOCATION_SET, false)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                        .execute(model);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertTrue(result.getFeedbackToUser().contains(RemoveDislikeCommand.MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void removeLikeCommand_removeCategory_contains() throws CommandException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        model.addLikes(ADDED_ANOTHER_CATEGORY_SET, new HashSet\u003c\u003e(), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        CommandResult result \u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveLikeCommand(ADDED_ANOTHER_CATEGORY_SET, new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), false)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                        .execute(model);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertTrue(result.getFeedbackToUser().contains(RemoveLikeCommand.MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        for (Category c : ADDED_ANOTHER_CATEGORY_SET) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            assertTrue(result.getFeedbackToUser().contains(c.category));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void removeDislikeCommand_removeCategory_contains() throws CommandException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        model.addDislikes(ADDED_ANOTHER_CATEGORY_SET, new HashSet\u003c\u003e(), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        CommandResult result \u003d"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveDislikeCommand(ADDED_ANOTHER_CATEGORY_SET, new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), false)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                        .execute(model);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertTrue(result.getFeedbackToUser().contains(RemoveDislikeCommand.MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        for (Category c : ADDED_ANOTHER_CATEGORY_SET) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            assertTrue(result.getFeedbackToUser().contains(c.category));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void removeLikeCommand_removeTags_contains() throws CommandException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        model.addLikes(new HashSet\u003c\u003e(), ADDED_ANOTHER_TAG_SET, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        CommandResult result \u003d"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveLikeCommand(new HashSet\u003c\u003e(), ADDED_ANOTHER_TAG_SET, new HashSet\u003c\u003e(), false)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                        .execute(model);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertTrue(result.getFeedbackToUser().contains(RemoveLikeCommand.MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        for (Tag t : ADDED_ANOTHER_TAG_SET) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            assertTrue(result.getFeedbackToUser().contains(t.tagName));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void removeDislikeCommand_removeTags_contains() throws CommandException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        model.addDislikes(new HashSet\u003c\u003e(), ADDED_ANOTHER_TAG_SET, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        CommandResult result \u003d"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveDislikeCommand(new HashSet\u003c\u003e(), ADDED_ANOTHER_TAG_SET, new HashSet\u003c\u003e(), false)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                        .execute(model);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertTrue(result.getFeedbackToUser().contains(RemoveDislikeCommand.MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        for (Tag t : ADDED_ANOTHER_TAG_SET) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            assertTrue(result.getFeedbackToUser().contains(t.tagName));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void removeLikeCommand_removeLocation_contains() throws CommandException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        model.addLikes(new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), ADDED_ANOTHER_LOCATION_SET);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        CommandResult result \u003d"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveLikeCommand(new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), ADDED_ANOTHER_LOCATION_SET, false)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                        .execute(model);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertTrue(result.getFeedbackToUser().contains(RemoveLikeCommand.MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        for (Location l : ADDED_ANOTHER_LOCATION_SET) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            assertTrue(result.getFeedbackToUser().contains(l.location));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void removeDislikeCommand_removeLocation_contains() throws CommandException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        model.addDislikes(new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), ADDED_ANOTHER_LOCATION_SET);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        CommandResult result \u003d"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveDislikeCommand(new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), ADDED_ANOTHER_LOCATION_SET, false)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                        .execute(model);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertTrue(result.getFeedbackToUser().contains(RemoveDislikeCommand.MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        for (Location l : ADDED_ANOTHER_LOCATION_SET) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            assertTrue(result.getFeedbackToUser().contains(l.location));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void removeLikeCommand_removeAll_success() throws CommandException {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        model \u003d new ModelManager(getTypicalMenu(), new UserPrefs(), new UserRecommendations(), new PurchaseHistory(),"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                new CustomSorter(), new SavingsAccount());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        model.addLikes(ADDED_ANOTHER_CATEGORY_SET, ADDED_ANOTHER_TAG_SET, ADDED_ANOTHER_LOCATION_SET);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        CommandResult result \u003d new RemoveLikeCommand(true).execute(model);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertTrue(result.getFeedbackToUser().contains(RemoveLikeCommand.MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertEquals(0, model.getRecommendationSystem().getUserRecommendations().getLikedCategories().size());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertEquals(0, model.getRecommendationSystem().getUserRecommendations().getLikedTags().size());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertEquals(0, model.getRecommendationSystem().getUserRecommendations().getLikedLocations().size());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void removeDislikeCommand_removeAll_success() throws CommandException {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        model \u003d new ModelManager(getTypicalMenu(), new UserPrefs(), new UserRecommendations(), new PurchaseHistory(),"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                new CustomSorter(), new SavingsAccount());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        model.addDislikes(ADDED_ANOTHER_CATEGORY_SET, ADDED_ANOTHER_TAG_SET, ADDED_ANOTHER_LOCATION_SET);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        CommandResult result \u003d new RemoveDislikeCommand(true).execute(model);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertTrue(result.getFeedbackToUser().contains(RemoveLikeCommand.MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertEquals(0, model.getRecommendationSystem()"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .getUserRecommendations().getDislikedCategories().size());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertEquals(0, model.getRecommendationSystem()"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .getUserRecommendations().getDislikedTags().size());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertEquals(0, model.getRecommendationSystem()"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .getUserRecommendations().getDislikedLocations().size());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void removeLikeCommand_notFound_failure() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        model \u003d new ModelManager(getTypicalMenu(), new UserPrefs(), new UserRecommendations(), new PurchaseHistory(),"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                new CustomSorter(), new SavingsAccount());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        model.addLikes(ADDED_ANOTHER_CATEGORY_SET, ADDED_ANOTHER_TAG_SET, ADDED_ANOTHER_LOCATION_SET);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        RemoveLikeCommand command \u003d new RemoveLikeCommand(new HashSet\u003c\u003e(), LIKED_TAG_SET, new HashSet\u003c\u003e(),"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(CommandException.class, RemoveLikeCommand.NOT_FOUND, () -\u003e command.execute(model));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void removeDislikeCommand_notFound_failure() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        model \u003d new ModelManager(getTypicalMenu(), new UserPrefs(), new UserRecommendations(), new PurchaseHistory(),"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                new CustomSorter(), new SavingsAccount());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        model.addDislikes(ADDED_ANOTHER_CATEGORY_SET, ADDED_ANOTHER_TAG_SET, ADDED_ANOTHER_LOCATION_SET);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        RemoveDislikeCommand command \u003d new RemoveDislikeCommand(LIKED_CATEGORY_SET, new HashSet\u003c\u003e(), new HashSet\u003c\u003e(),"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                false);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(CommandException.class, RemoveDislikeCommand.NOT_FOUND, () -\u003e command.execute(model));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void wrong_execute_error() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                AssertionError.class, () -\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                        new RemovePreferenceCommand(LIKED_CATEGORY_SET, LIKED_TAG_SET, LIKED_LOCATION_SET, false)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                                .execute(model)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        );"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 6,
      "jon-chua": 270
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/commands/SortCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.ASCENDING_DIRECTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SortCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private List\u003cString\u003e fields \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void return_correctFields() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        fields.add(FIELD_NAME_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        fields.add(ASCENDING_DIRECTION);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        SortCommand test \u003d new SortCommand(fields);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(fields, test.getFields());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        List\u003cString\u003e myFields \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        myFields.add(FIELD_NAME_NAME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        SortCommand command \u003d new SortCommand(myFields);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(command.equals(command));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(command.equals(new SortCommand(null)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void execute_correctReturnType() throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        SortCommand test \u003d new SortCommand(fields);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(test.execute(model) instanceof CommandResult);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 38,
      "robytanama": 10
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/commands/TopUpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.getTypicalMenu;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.PurchaseHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.recommend.UserRecommendations;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.savings.SavingsAccount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.sorter.CustomSorter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.RemainingBudget;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * {@code TopUpCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class TopUpCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalMenu(), new UserPrefs(), new UserRecommendations(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            new PurchaseHistory(), new CustomSorter(), new SavingsAccount());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void execute_validTopUpAmount_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        BigDecimal testTopUpAmount \u003d new BigDecimal(\"100\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        TopUpCommand topUpCommand \u003d new TopUpCommand(testTopUpAmount);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getMenu(), new UserPrefs(), new UserRecommendations(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                new PurchaseHistory(), new CustomSorter(), new SavingsAccount());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            expectedModel.setRemainingBudget(new RemainingBudget(expectedModel.getRemainingBudget()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                    .getRemainingBudgetAmount().add(testTopUpAmount).toString()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        String expectedMessage \u003d String.format(TopUpCommand.MESSAGE_TOPUP_BUDGET_SUCCESS,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                expectedModel.getRemainingBudget().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertCommandSuccess(topUpCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void execute_invalidTopUpAmount_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        BigDecimal testTopUpAmount \u003d new BigDecimal(\"100000000\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        TopUpCommand topUpCommand \u003d new TopUpCommand(testTopUpAmount);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e topUpCommand.execute(model));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        TopUpCommand topUpFirstCommand \u003d new TopUpCommand(new BigDecimal(10.00));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        TopUpCommand topUpSecondCommand \u003d new TopUpCommand(new BigDecimal(20.00));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertTrue(topUpFirstCommand.equals(topUpFirstCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        TopUpCommand topUpFirstCommandCopy \u003d new TopUpCommand(new BigDecimal(10.00));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertTrue(topUpFirstCommandCopy.equals(topUpFirstCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(topUpFirstCommand.equals(1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(topUpFirstCommand.equals(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // different food -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(topUpFirstCommand.equals(topUpSecondCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 84
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.CATEGORY_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.CATEGORY_DESC_NASI_LEMAK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.DESCRIPTION_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.DESCRIPTION_DESC_NASI_LEMAK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.INVALID_LOCATION_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.INVALID_PRICE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.LOCATION_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.LOCATION_DESC_NASI_LEMAK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.NAME_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.NAME_DESC_NASI_LEMAK;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.OPENING_HOURS_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.OPENING_HOURS_DESC_NASI_LEMAK;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.PRICE_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.PRICE_DESC_NASI_LEMAK;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.RESTRICTIONS_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.RESTRICTIONS_DESC_NASI_LEMAK;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.TAG_DESC_CHICKEN;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.TAG_DESC_RICE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_CATEGORY_NASI_LEMAK;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_NAME_NASI_LEMAK;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_PRICE_NASI_LEMAK;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_TAG_CHICKEN;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_TAG_RICE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.CHICKEN_RICE;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.NASI_LEMAK;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Location;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Price;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.tag.Tag;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Food expectedFood \u003d new FoodBuilder(NASI_LEMAK).withTags(VALID_TAG_CHICKEN).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                + PRICE_DESC_NASI_LEMAK + DESCRIPTION_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + CATEGORY_DESC_NASI_LEMAK + TAG_DESC_CHICKEN"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + LOCATION_DESC_NASI_LEMAK + OPENING_HOURS_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                + RESTRICTIONS_DESC_NASI_LEMAK, new AddCommand(expectedFood));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_CHICKEN_RICE + NAME_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                + PRICE_DESC_NASI_LEMAK + DESCRIPTION_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + CATEGORY_DESC_NASI_LEMAK + TAG_DESC_CHICKEN"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + LOCATION_DESC_NASI_LEMAK + OPENING_HOURS_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                + RESTRICTIONS_DESC_NASI_LEMAK, new AddCommand(expectedFood));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // multiple prices - last price accepted"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_NASI_LEMAK + PRICE_DESC_CHICKEN_RICE"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                + PRICE_DESC_NASI_LEMAK + DESCRIPTION_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + CATEGORY_DESC_NASI_LEMAK + TAG_DESC_CHICKEN"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + LOCATION_DESC_NASI_LEMAK + OPENING_HOURS_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                + RESTRICTIONS_DESC_NASI_LEMAK, new AddCommand(expectedFood));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        // multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_NASI_LEMAK + PRICE_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                + DESCRIPTION_DESC_CHICKEN_RICE + DESCRIPTION_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + CATEGORY_DESC_NASI_LEMAK + TAG_DESC_CHICKEN"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + LOCATION_DESC_NASI_LEMAK + OPENING_HOURS_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                + RESTRICTIONS_DESC_NASI_LEMAK, new AddCommand(expectedFood));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        // multiple locations - last location accepted"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_NASI_LEMAK + PRICE_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + DESCRIPTION_DESC_NASI_LEMAK + CATEGORY_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + TAG_DESC_CHICKEN"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + LOCATION_DESC_CHICKEN_RICE + LOCATION_DESC_NASI_LEMAK + OPENING_HOURS_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                + RESTRICTIONS_DESC_NASI_LEMAK, new AddCommand(expectedFood));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Food expectedFoodMultipleTags \u003d new FoodBuilder(NASI_LEMAK).withTags(VALID_TAG_CHICKEN, VALID_TAG_RICE)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_NASI_LEMAK + PRICE_DESC_NASI_LEMAK + DESCRIPTION_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + CATEGORY_DESC_NASI_LEMAK + TAG_DESC_RICE + TAG_DESC_CHICKEN"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + LOCATION_DESC_NASI_LEMAK + OPENING_HOURS_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                + RESTRICTIONS_DESC_NASI_LEMAK, new AddCommand(expectedFoodMultipleTags));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parse_tagsMissing_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Food expectedFood \u003d new FoodBuilder(CHICKEN_RICE).withTags().build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_CHICKEN_RICE + PRICE_DESC_CHICKEN_RICE + DESCRIPTION_DESC_CHICKEN_RICE"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                        + CATEGORY_DESC_CHICKEN_RICE + LOCATION_DESC_CHICKEN_RICE"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                        + OPENING_HOURS_DESC_CHICKEN_RICE + RESTRICTIONS_DESC_CHICKEN_RICE,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                new AddCommand(expectedFood));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // missing name"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertParseFailure(parser, PRICE_DESC_NASI_LEMAK + DESCRIPTION_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        + CATEGORY_DESC_NASI_LEMAK,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // missing price"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_NASI_LEMAK + DESCRIPTION_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        + CATEGORY_DESC_NASI_LEMAK,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // missing category"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_NASI_LEMAK + PRICE_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        + DESCRIPTION_DESC_NASI_LEMAK,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // all compulsory fields"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_NASI_LEMAK,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parse_missingNamePrefix_failure() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_NASI_LEMAK + PRICE_DESC_NASI_LEMAK + DESCRIPTION_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        + CATEGORY_DESC_NASI_LEMAK,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parse_missingPricePrefix_failure() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_NASI_LEMAK + VALID_PRICE_NASI_LEMAK + DESCRIPTION_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        + CATEGORY_DESC_NASI_LEMAK,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parse_missingCategoryPrefix_failure() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_NASI_LEMAK + PRICE_DESC_NASI_LEMAK + DESCRIPTION_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        + VALID_CATEGORY_NASI_LEMAK,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                + PRICE_DESC_NASI_LEMAK + DESCRIPTION_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + CATEGORY_DESC_NASI_LEMAK + TAG_DESC_RICE"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + LOCATION_DESC_CHICKEN_RICE + TAG_DESC_CHICKEN, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // invalid price"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_NASI_LEMAK + INVALID_PRICE_DESC"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + DESCRIPTION_DESC_NASI_LEMAK + CATEGORY_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + TAG_DESC_RICE + LOCATION_DESC_CHICKEN_RICE"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + TAG_DESC_CHICKEN, Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_NASI_LEMAK + PRICE_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + INVALID_DESCRIPTION_DESC + CATEGORY_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + TAG_DESC_RICE + LOCATION_DESC_CHICKEN_RICE"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + TAG_DESC_CHICKEN, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                + PRICE_DESC_NASI_LEMAK + DESCRIPTION_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + CATEGORY_DESC_NASI_LEMAK + INVALID_TAG_DESC"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + LOCATION_DESC_CHICKEN_RICE + VALID_TAG_CHICKEN, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        // invalid location"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + PRICE_DESC_NASI_LEMAK + DESCRIPTION_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + CATEGORY_DESC_NASI_LEMAK + TAG_DESC_CHICKEN"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + TAG_DESC_RICE + INVALID_LOCATION_DESC"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + OPENING_HOURS_DESC_NASI_LEMAK + RESTRICTIONS_DESC_NASI_LEMAK, Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PRICE_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        + DESCRIPTION_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        + CATEGORY_DESC_NASI_LEMAK,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        + PRICE_DESC_NASI_LEMAK + DESCRIPTION_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        + CATEGORY_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                        + TAG_DESC_RICE + TAG_DESC_CHICKEN,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 73,
      "seanlowjk": 38,
      "jon-chua": 39,
      "-": 51,
      "Raikonen": 2
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/parser/AutoSortCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.commands.AutoSortCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class AutoSortCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private AutoSortCommandParser parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private String onFlag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private String offFlag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private String invalidFlag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        parser \u003d new AutoSortCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        onFlag \u003d \"ON\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        offFlag \u003d \"OFF\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        invalidFlag \u003d \"invalid\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parse_invalidFlag_failure() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertParseFailure(parser, invalidFlag,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AutoSortCommand.MESSAGE_ERROR));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parse_validFlag_success() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertParseSuccess(parser, onFlag, new AutoSortCommand(true));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertParseSuccess(parser, offFlag, new AutoSortCommand(false));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 37
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/parser/BudgetCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.DaysToExpire;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.RemainingBudget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.Wallet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class BudgetCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private BudgetCommandParser parser \u003d new BudgetCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void parse_validArgs_returnsBudgetCommand() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertParseSuccess(parser, \"100 30\", new BudgetCommand("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                new Wallet(new RemainingBudget(\"100\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                        new DaysToExpire(\"30\"))));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertParseFailure(parser, \"abcd asd\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, BudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void parse_empty_throwsParseException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, BudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 37
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/parser/BuyCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalIndexes.INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.logic.commands.BuyCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class BuyCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private BuyCommandParser parser \u003d new BuyCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void parse_validArgs_returnsBuyCommand() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertParseSuccess(parser, \"1\", new BuyCommand(INDEX_FIRST_FOOD));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, BuyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void parse_invalidIndex_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertParseFailure(parser, \"-1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, BuyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void parse_emptyIndex_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, BuyCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 34
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static void assertPreferenceParseSuccess(PreferenceCommandParser parser, String userInput,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                                                    Command expectedCommand, boolean isLike) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            Command command \u003d parser.parse(userInput, isLike);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static void assertPreferenceParseFailure(PreferenceCommandParser parser, String userInput,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                                                    String expectedMessage, boolean isLike) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            parser.parse(userInput, isLike);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static void assertRemovePreferenceParseSuccess(RemovePreferenceCommandParser parser, String userInput,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                                                    Command expectedCommand, boolean isLike) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            Command command \u003d parser.parse(userInput, isLike);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static void assertRemovePreferenceParseFailure(RemovePreferenceCommandParser parser, String userInput,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                                                    String expectedMessage, boolean isLike) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            parser.parse(userInput, isLike);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 3,
      "jon-chua": 56,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.TypicalIndexes.INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_FOOD));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parse_invalidIndex_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertParseFailure(parser, \"-1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parse_emptyIndex_throwsParseException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertParseFailure(parser, \"\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 6,
      "seanlowjk": 11,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.CATEGORY_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.DESCRIPTION_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.DESCRIPTION_DESC_NASI_LEMAK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.INVALID_PRICE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.LOCATION_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.NAME_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.OPENING_HOURS_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.PRICE_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.PRICE_DESC_NASI_LEMAK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.RESTRICTIONS_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.TAG_DESC_CHICKEN;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.TAG_DESC_RICE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_CATEGORY_CHICKEN_RICE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CHICKEN_RICE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_DESCRIPTION_NASI_LEMAK;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_LOCATION_CHICKEN_RICE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_NAME_CHICKEN_RICE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_OPENING_HOURS_CHICKEN_RICE;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_PRICE_CHICKEN_RICE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_PRICE_NASI_LEMAK;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_RESTRICTIONS_CHICKEN_RICE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_TAG_CHICKEN;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_TAG_RICE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.TypicalIndexes.INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.TypicalIndexes.INDEX_SECOND_FOOD;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.TypicalIndexes.INDEX_THIRD_FOOD;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.index.Index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.EditCommand.EditFoodDescriptor;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Price;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.tag.Tag;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.testutil.EditFoodDescriptorBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_CHICKEN_RICE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_CHICKEN_RICE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_CHICKEN_RICE, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PRICE_DESC, Price.MESSAGE_CONSTRAINTS); // invalid price"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DESCRIPTION_DESC,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS); // invalid description"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        // invalid price followed by valid description"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PRICE_DESC"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            + DESCRIPTION_DESC_CHICKEN_RICE, Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // valid price followed by invalid price. The test case for invalid price followed by valid price"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertParseFailure(parser, \"1\" + PRICE_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            + INVALID_PRICE_DESC, Price.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Food} being edited,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_RICE + TAG_DESC_CHICKEN"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_RICE + TAG_EMPTY"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            + TAG_DESC_CHICKEN, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_RICE"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            + TAG_DESC_CHICKEN, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            + INVALID_DESCRIPTION_DESC + VALID_PRICE_CHICKEN_RICE,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_FOOD;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PRICE_DESC_NASI_LEMAK + TAG_DESC_CHICKEN"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                + DESCRIPTION_DESC_CHICKEN_RICE + NAME_DESC_CHICKEN_RICE + CATEGORY_DESC_CHICKEN_RICE"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + TAG_DESC_RICE + LOCATION_DESC_CHICKEN_RICE + OPENING_HOURS_DESC_CHICKEN_RICE"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + RESTRICTIONS_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        EditFoodDescriptor descriptor \u003d new EditFoodDescriptorBuilder().withName(VALID_NAME_CHICKEN_RICE)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                .withPrice(VALID_PRICE_NASI_LEMAK).withDescription(VALID_DESCRIPTION_CHICKEN_RICE)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                .withCategory(VALID_CATEGORY_CHICKEN_RICE)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .withTags(VALID_TAG_CHICKEN, VALID_TAG_RICE)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .withLocation(VALID_LOCATION_CHICKEN_RICE)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .withOpeningHours(VALID_OPENING_HOURS_CHICKEN_RICE)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .withRestrictions(VALID_RESTRICTIONS_CHICKEN_RICE).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PRICE_DESC_NASI_LEMAK + DESCRIPTION_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        EditFoodDescriptor descriptor \u003d new EditFoodDescriptorBuilder().withPrice(VALID_PRICE_NASI_LEMAK)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_CHICKEN_RICE)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_FOOD;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        EditFoodDescriptor descriptor \u003d new EditFoodDescriptorBuilder().withName(VALID_NAME_CHICKEN_RICE).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // price"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PRICE_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        descriptor \u003d new EditFoodDescriptorBuilder().withPrice(VALID_PRICE_CHICKEN_RICE).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        // description"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        descriptor \u003d new EditFoodDescriptorBuilder().withDescription(VALID_DESCRIPTION_CHICKEN_RICE).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_RICE;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        descriptor \u003d new EditFoodDescriptorBuilder().withTags(VALID_TAG_RICE).build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        // location"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + LOCATION_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        descriptor \u003d new EditFoodDescriptorBuilder().withLocation(VALID_LOCATION_CHICKEN_RICE).build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PRICE_DESC_CHICKEN_RICE + DESCRIPTION_DESC_CHICKEN_RICE"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                + TAG_DESC_RICE + PRICE_DESC_CHICKEN_RICE + DESCRIPTION_DESC_CHICKEN_RICE + TAG_DESC_RICE"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                + PRICE_DESC_NASI_LEMAK + DESCRIPTION_DESC_NASI_LEMAK + TAG_DESC_CHICKEN;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        EditFoodDescriptor descriptor \u003d new EditFoodDescriptorBuilder().withPrice(VALID_PRICE_NASI_LEMAK)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_NASI_LEMAK).withTags(VALID_TAG_RICE, VALID_TAG_CHICKEN)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PRICE_DESC + PRICE_DESC_NASI_LEMAK;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        EditFoodDescriptor descriptor \u003d new EditFoodDescriptorBuilder().withPrice(VALID_PRICE_NASI_LEMAK).build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_NASI_LEMAK + INVALID_PRICE_DESC"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                + PRICE_DESC_NASI_LEMAK;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        descriptor \u003d new EditFoodDescriptorBuilder()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                .withPrice(VALID_PRICE_NASI_LEMAK).withDescription(VALID_DESCRIPTION_NASI_LEMAK)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_FOOD;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        EditFoodDescriptor descriptor \u003d new EditFoodDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 80,
      "seanlowjk": 13,
      "jon-chua": 22,
      "-": 111
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/parser/FieldParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.ASCENDING_DIRECTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.DESCENDING_DIRECTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_OPENING_HOURS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_PRICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_RESTRICTIONS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class FieldParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private String invalidField;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private String invalidDirection;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private FieldParser fieldParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        invalidField \u003d \"@@@\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        invalidDirection \u003d \"@@@\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        fieldParser \u003d new FieldParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void check_keywords_test() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String invalidFieldsMessage \u003d FieldParser.INVALID_FIELD_USAGE;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        List\u003cString\u003e keywords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        keywords.add(invalidField);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        keywords.add(invalidDirection);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                invalidFieldsMessage, () -\u003e fieldParser.checkKeywords(keywords));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parse_emptyFields_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String noFieldsMessage \u003d FieldParser.NO_ARGUMENTS_USAGE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                noFieldsMessage, () -\u003e fieldParser.parse(\"\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                noFieldsMessage, () -\u003e fieldParser.parse(\"  \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parse_invalidFields_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String invalidFieldsMessage \u003d FieldParser.INVALID_FIELD_USAGE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                invalidFieldsMessage, () -\u003e fieldParser.parse(invalidField + \" \" + ASCENDING_DIRECTION));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                invalidFieldsMessage, () -\u003e fieldParser.parse("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        FIELD_NAME_OPENING_HOURS + \" \" + DESCENDING_DIRECTION"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                                + \" \" + invalidField + \" \" + ASCENDING_DIRECTION"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parse_duplicateFields_failure() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String duplicateFieldsMessage \u003d FieldParser.DUPLICATE_FIELD_USAGE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                duplicateFieldsMessage, () -\u003e fieldParser.parse("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        FIELD_NAME_PRICE + \" \" + DESCENDING_DIRECTION"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                                + \" \" + FIELD_NAME_PRICE + \" \" + ASCENDING_DIRECTION"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                duplicateFieldsMessage, () -\u003e fieldParser.parse("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        FIELD_NAME_RESTRICTIONS + \" \" + ASCENDING_DIRECTION"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                                + \" \" + FIELD_NAME_RESTRICTIONS + \" \" + DESCENDING_DIRECTION"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parse_invalidDirections_failure() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String invalidDirectionMessage \u003d FieldParser.INVALID_DIRECTION_USAGE;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                invalidDirectionMessage, () -\u003e fieldParser.parse("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        FIELD_NAME_NAME + \" \" + DESCENDING_DIRECTION"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                                + \" \" + FIELD_NAME_LOCATION + \" \" + invalidDirection"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                invalidDirectionMessage, () -\u003e fieldParser.parse("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        FIELD_NAME_DESCRIPTION + \" \" + invalidDirection"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parse_missingDirections_failure() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String missingDirectionMessage \u003d FieldParser.MISSING_DIRECTION_USAGE;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                missingDirectionMessage, () -\u003e fieldParser.parse("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        FIELD_NAME_NAME + \" \" + DESCENDING_DIRECTION"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                                + \" \" + FIELD_NAME_CATEGORY"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(ParseException.class,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                missingDirectionMessage, () -\u003e fieldParser.parse("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        FIELD_NAME_DESCRIPTION"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 117
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/parser/FilterCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_LOCATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_OPENING_HOURS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_PRICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_RESTRICTIONS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.QUANTIFY_EQUALS_TO;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.QUANTIFY_LESS_THAN;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.QUANTIFY_MORE_THAN;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class FilterCommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private FilterCommandParser parser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private String properArguments;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void set_up() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        parser \u003d new FilterCommandParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        properArguments \u003d FIELD_NAME_PRICE + \" \" + QUANTIFY_MORE_THAN + \" 4.00\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parse_emptyArguments_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String noArgumentsMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.NO_ARGUMENTS_USAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // Empty Line"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertParseFailure(parser, \"\", noArgumentsMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // Empty Line with Spaces"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertParseFailure(parser, \"      \", noArgumentsMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // Empty Line with tons of Spaces"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertParseFailure(parser, \"                          \", noArgumentsMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void poarse_wrongArguments_failure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String wrongArgumentsMessage \u003d String.format("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.WRONG_ARGUMENT_NUMBER);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertParseFailure(parser, FIELD_NAME_CATEGORY, wrongArgumentsMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertParseFailure(parser, FIELD_NAME_CATEGORY + \" \" + QUANTIFY_LESS_THAN, wrongArgumentsMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertParseFailure(parser, FIELD_NAME_PRICE + \" \" + QUANTIFY_LESS_THAN, wrongArgumentsMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parse_invalidField_failure() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String invalidFieldMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.INVALID_FIELD_USAGE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertParseFailure(parser, \"OOPS \" + QUANTIFY_LESS_THAN + \" 321\", invalidFieldMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertParseFailure(parser, \"zasbd \" + QUANTIFY_LESS_THAN + \" 321\", invalidFieldMessage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertParseFailure(parser, \"111 \" + QUANTIFY_LESS_THAN + \" 321\", invalidFieldMessage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parse_invalidQuantifiers_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String invalidQuantifiersMessage \u003d String.format("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.INVALID_QUANTIFIER_USAGE"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        );"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertParseFailure(parser, FIELD_NAME_PRICE + \" less 321\", invalidQuantifiersMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertParseFailure(parser, FIELD_NAME_PRICE + \" equals 4.00\", invalidQuantifiersMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertParseFailure(parser, FIELD_NAME_CATEGORY + \" less 321\", invalidQuantifiersMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parse_invalidValues_failure() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String invalidValuesMessage \u003d String.format("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.INVALID_VALUE_USAGE"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        );"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertParseFailure(parser, FIELD_NAME_PRICE + \" \" + QUANTIFY_LESS_THAN + \" eheh\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            invalidValuesMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertParseFailure(parser, FIELD_NAME_PRICE + \" \" + QUANTIFY_LESS_THAN + \" 4.23847\","
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            invalidValuesMessage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parse_duplicateFields_failure() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String invalidValuesMessage \u003d String.format("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.DUPLICATE_FIELD_USAGE"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        );"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertParseFailure(parser, FIELD_NAME_PRICE + \" \" + QUANTIFY_LESS_THAN + \" 4.20 \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            + FIELD_NAME_PRICE + \" \" + QUANTIFY_LESS_THAN + \" 4.00\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            invalidValuesMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void check_validValues() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(parser.isValidValue(FIELD_NAME_PRICE, \"4.00\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(parser.isValidValue(FIELD_NAME_PRICE, \"4\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(parser.isValidValue(FIELD_NAME_PRICE, \"oeoeiie\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(parser.isValidValue(FIELD_NAME_DESCRIPTION, \"eheh\"));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(parser.isValidValue(FIELD_NAME_LOCATION, \"eheh\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(parser.isValidValue(FIELD_NAME_NAME, \"eheh\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(parser.isValidValue(FIELD_NAME_RESTRICTIONS, \"eheh\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(parser.isValidValue(FIELD_NAME_OPENING_HOURS, \"0000 0001\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(parser.isValidValue(\"Invalid Field\", \"0000 0001\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void check_validQuantifier() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(parser.isValidQuantifier(QUANTIFY_LESS_THAN));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(parser.isValidQuantifier(QUANTIFY_EQUALS_TO));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(parser.isValidQuantifier(\"hehe\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(parser.isValidQuantifier(\"12345\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void check_validFields() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(parser.isValidField(FIELD_NAME_PRICE));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(parser.isValidField(FIELD_NAME_CATEGORY));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(parser.isValidField(\"4.20\"));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void test_duplicate_fields() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] nonLegitFields \u003d {FIELD_NAME_PRICE, QUANTIFY_LESS_THAN, \"4.20\","
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            FIELD_NAME_PRICE, QUANTIFY_LESS_THAN, \"4.00\"};"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] legitFields \u003d {FIELD_NAME_PRICE, QUANTIFY_LESS_THAN, \"4.20\","
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            FIELD_NAME_CATEGORY, QUANTIFY_LESS_THAN, \"400\"};"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(parser.areFieldsDuplicate(nonLegitFields));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(parser.areFieldsDuplicate(legitFields));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void test_values_validity() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] nonLegitFields \u003d {FIELD_NAME_PRICE, QUANTIFY_LESS_THAN, \"4.20\","
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            FIELD_NAME_CATEGORY, QUANTIFY_LESS_THAN, \"4.00\"};"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] legitFields \u003d {FIELD_NAME_PRICE, QUANTIFY_LESS_THAN, \"4.20\","
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            FIELD_NAME_CATEGORY, QUANTIFY_LESS_THAN, \"400\"};"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(parser.areValuesInvalid(nonLegitFields));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(parser.areValuesInvalid(legitFields));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void test_quantifiers_validity() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] nonLegitFields \u003d {FIELD_NAME_PRICE, QUANTIFY_LESS_THAN, \"4.20\","
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            FIELD_NAME_CATEGORY, \"LOL\", \"400\"};"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] legitFields \u003d {FIELD_NAME_PRICE, QUANTIFY_LESS_THAN, \"4.20\","
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            FIELD_NAME_CATEGORY, QUANTIFY_LESS_THAN, \"400\"};"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(parser.areQuantifiersInvalid(nonLegitFields));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(parser.areQuantifiersInvalid(legitFields));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void test_fields_validity() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] legitFields \u003d {FIELD_NAME_PRICE, QUANTIFY_LESS_THAN, \"4.20\","
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            FIELD_NAME_CATEGORY, \"QUANTIFY_LESS_THAN\", \"400\"};"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] nonLegitFields \u003d {FIELD_NAME_PRICE, QUANTIFY_LESS_THAN, \"4.20\","
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            \"PIKACHU\", QUANTIFY_LESS_THAN, \"400\"};"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(parser.areFieldsInvalid(nonLegitFields));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(parser.areFieldsInvalid(legitFields));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void test_fields_length() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] nonLegitFields \u003d {FIELD_NAME_PRICE, QUANTIFY_LESS_THAN, \"4.20\","
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            FIELD_NAME_CATEGORY};"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] legitFields \u003d {FIELD_NAME_PRICE, QUANTIFY_LESS_THAN, \"4.20\","
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            FIELD_NAME_CATEGORY, QUANTIFY_LESS_THAN, \"400\"};"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(parser.isWrongArgumentNumber(nonLegitFields));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(parser.isWrongArgumentNumber(legitFields));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void create_proper_command() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String legitLine \u003d FIELD_NAME_PRICE + \" \" + QUANTIFY_LESS_THAN + \" 4.20\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String[] legitFields \u003d {FIELD_NAME_PRICE, QUANTIFY_LESS_THAN, \"4.20\"};"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        FilterCommand expectedCommand \u003d new FilterCommand(Arrays.asList(legitFields));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertParseSuccess(parser, legitLine, expectedCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 188
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Ayam\", \"Penyet\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertParseSuccess(parser, \"Ayam Penyet\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertParseSuccess(parser, \" \\n Ayam \\n \\t Penyet  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 9,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/parser/InfoCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.logic.commands.InfoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class InfoCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private static final String VALID_USER_INPUT \u003d \"info add\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private static final String INVALID_USER_INPUT \u003d \"saidugasf\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private static SaveNusParser saveNusParser \u003d new SaveNusParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private static Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private static Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void input_validUserInput_parseSuccess() throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        InfoCommand validEditInfo \u003d (InfoCommand) saveNusParser.parseCommand(VALID_USER_INPUT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        CommandResult expectedCommandresult \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                new CommandResult(InfoCommand.ADD_INFO, false, false, false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertCommandSuccess(validEditInfo, model, expectedCommandresult, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void input_invalidUserInput_throwsParseException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e saveNusParser.parseCommand(INVALID_USER_INPUT));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 3,
      "robytanama": 33
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/parser/MakeSortCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.commands.MakeSortCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class MakeSortCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private MakeSortCommandParser parser \u003d new MakeSortCommandParser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parse_emptyFields_failure() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String noFieldsMessage \u003d FieldParser.NO_ARGUMENTS_USAGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String noFieldsUsage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                noFieldsMessage + \"\\n\" + MakeSortCommand.EXAMPLE_USAGE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertParseFailure(parser, \"           \", noFieldsUsage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 21
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.TypicalIndexes.INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.food.OpeningHours;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Price;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private static final String INVALID_NAME \u003d \"@yam\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private static final String INVALID_PRICE \u003d \"+6500q9\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private static final String INVALID_LOCATION \u003d \"37@+\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private static final String INVALID_CATEGORY \u003d \"+++\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private static final String VALID_NAME \u003d \"Ayam Penyet\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private static final String VALID_PRICE \u003d \"123\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"A valid description.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"Chicken\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"Rice\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            ParseException.class,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            MESSAGE_INVALID_INDEX, () -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        );"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(INDEX_FIRST_FOOD, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(INDEX_FIRST_FOOD, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parsePrice_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePrice((String) null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parsePrice_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePrice(INVALID_PRICE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parsePrice_validValueWithoutWhitespace_returnsPrice() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Price expectedPrice \u003d new Price(VALID_PRICE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(expectedPrice, ParserUtil.parsePrice(VALID_PRICE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parsePrice_validValueWithWhitespace_returnsTrimmedPrice() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String priceWithWhitespace \u003d WHITESPACE + VALID_PRICE + WHITESPACE;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Price expectedPrice \u003d new Price(VALID_PRICE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(expectedPrice, ParserUtil.parsePrice(priceWithWhitespace));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void parseDescription_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDescription(INVALID_DESCRIPTION));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsDescription() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(VALID_DESCRIPTION));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String descriptionWithWhitespace \u003d WHITESPACE + VALID_DESCRIPTION + WHITESPACE;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(descriptionWithWhitespace));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parseLocations_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseLocations(null));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parseLocations_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(ParserUtil.parseLocations(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parseLocations_collectionWithInvalidLocations_throwsParseException() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(INVALID_LOCATION)));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parseCategories_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCategories(null));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parseCategories_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(ParserUtil.parseCategories(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parseCategories_collectionWithInvalidLocations_throwsParseException() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseCategories(Arrays.asList(INVALID_CATEGORY)));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parse_collectionWithValidTags_returnsTagSet() throws ParseException {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String validOpeningHours \u003d \"0000 0001\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String invalidOpeningHours \u003d \"abcd efgh\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(ParserUtil.parseOpeningHours(validOpeningHours).equals(new OpeningHours(validOpeningHours)));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseOpeningHours(invalidOpeningHours));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(ParserUtil.parseOpeningHours(OpeningHours.DEFAULT_VALUE)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                   .equals(new OpeningHours(OpeningHours.DEFAULT_VALUE)));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 14,
      "seanlowjk": 60,
      "jon-chua": 13,
      "-": 127,
      "Raikonen": 1
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/parser/PreferenceCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.CATEGORY_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.CATEGORY_DESC_NASI_LEMAK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.LOCATION_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.LOCATION_DESC_NASI_LEMAK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.NAME_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.PRICE_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.TAG_DESC_CHICKEN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.TAG_DESC_RICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_CATEGORY_CHICKEN_RICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_CATEGORY_NASI_LEMAK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_LOCATION_CHICKEN_RICE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_LOCATION_NASI_LEMAK;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_TAG_CHICKEN;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_TAG_RICE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.parser.CommandParserTestUtil.assertPreferenceParseFailure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.parser.CommandParserTestUtil.assertPreferenceParseSuccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.logic.commands.DislikeCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.logic.commands.LikeCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.logic.commands.PreferenceCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Category;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Location;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.tag.Tag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "public class PreferenceCommandParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private PreferenceCommandParser parser \u003d new PreferenceCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private HashSet\u003cCategory\u003e expectedCategory \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private HashSet\u003cTag\u003e expectedTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private HashSet\u003cLocation\u003e expectedLocation \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        expectedCategory.add(new Category(VALID_CATEGORY_CHICKEN_RICE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        expectedCategory.add(new Category(VALID_CATEGORY_NASI_LEMAK));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        expectedTags.add(new Tag(VALID_TAG_CHICKEN));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        expectedTags.add(new Tag(VALID_TAG_RICE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        expectedLocation.add(new Location(VALID_LOCATION_CHICKEN_RICE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        expectedLocation.add(new Location(VALID_LOCATION_NASI_LEMAK));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void parse_nothingProvided_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertPreferenceParseSuccess(parser, PREAMBLE_WHITESPACE, new DislikeCommand(true), false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertPreferenceParseSuccess(parser, PREAMBLE_WHITESPACE, new LikeCommand(true), true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void parse_invalidField_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String command \u003d NAME_DESC_CHICKEN_RICE + PRICE_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, PreferenceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertPreferenceParseFailure(parser, command, expectedMessage, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertPreferenceParseFailure(parser, command, expectedMessage, true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void parse_invalidAndValidFields_failure() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String command \u003d NAME_DESC_CHICKEN_RICE + PRICE_DESC_CHICKEN_RICE + CATEGORY_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, PreferenceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertPreferenceParseFailure(parser, command, expectedMessage, false);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertPreferenceParseFailure(parser, command, expectedMessage, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void parse_validCategory_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String command \u003d CATEGORY_DESC_CHICKEN_RICE + CATEGORY_DESC_NASI_LEMAK;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertPreferenceParseSuccess(parser, command,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new DislikeCommand(expectedCategory, new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), false), false);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertPreferenceParseSuccess(parser, command,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new LikeCommand(expectedCategory, new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), false), true);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void parse_missingCategoryPrefix_failure() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String command \u003d VALID_CATEGORY_CHICKEN_RICE + VALID_CATEGORY_NASI_LEMAK;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, PreferenceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertPreferenceParseFailure(parser, command, expectedMessage, false);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertPreferenceParseFailure(parser, command, expectedMessage, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void parse_validTag_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String command \u003d TAG_DESC_CHICKEN + TAG_DESC_RICE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertPreferenceParseSuccess(parser, command,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new DislikeCommand(new HashSet\u003c\u003e(), expectedTags, new HashSet\u003c\u003e(), false), false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertPreferenceParseSuccess(parser, command,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new LikeCommand(new HashSet\u003c\u003e(), expectedTags, new HashSet\u003c\u003e(), false), true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void parse_missingTagPrefix_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String command \u003d VALID_TAG_CHICKEN + VALID_TAG_RICE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, PreferenceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertPreferenceParseFailure(parser, command, expectedMessage, false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertPreferenceParseFailure(parser, command, expectedMessage, true);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void parse_validLocation_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String command \u003d LOCATION_DESC_CHICKEN_RICE + LOCATION_DESC_NASI_LEMAK;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertPreferenceParseSuccess(parser, command,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new DislikeCommand(new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), expectedLocation, false), false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertPreferenceParseSuccess(parser, command,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new LikeCommand(new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), expectedLocation, false), true);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void parse_missingLocationPrefix_failure() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String command \u003d VALID_LOCATION_CHICKEN_RICE + VALID_LOCATION_NASI_LEMAK;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, PreferenceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertPreferenceParseFailure(parser, command, expectedMessage, false);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertPreferenceParseFailure(parser, command, expectedMessage, true);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void parse_allFields_success() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String command \u003d CATEGORY_DESC_CHICKEN_RICE + CATEGORY_DESC_NASI_LEMAK + TAG_DESC_CHICKEN + TAG_DESC_RICE"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + LOCATION_DESC_CHICKEN_RICE + LOCATION_DESC_NASI_LEMAK;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertPreferenceParseSuccess(parser, command,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new DislikeCommand(expectedCategory, expectedTags, expectedLocation, false), false);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertPreferenceParseSuccess(parser, command,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new LikeCommand(expectedCategory, expectedTags, expectedLocation, false), true);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void parse_multipleDuplicates_success() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String command \u003d CATEGORY_DESC_CHICKEN_RICE + CATEGORY_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + CATEGORY_DESC_CHICKEN_RICE + CATEGORY_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + TAG_DESC_CHICKEN + TAG_DESC_RICE"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + TAG_DESC_CHICKEN + TAG_DESC_RICE"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + LOCATION_DESC_CHICKEN_RICE + LOCATION_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + LOCATION_DESC_CHICKEN_RICE + LOCATION_DESC_NASI_LEMAK;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertPreferenceParseSuccess(parser, command,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new DislikeCommand(expectedCategory, expectedTags, expectedLocation, false), false);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertPreferenceParseSuccess(parser, command,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new LikeCommand(expectedCategory, expectedTags, expectedLocation, false), true);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void parse_duplicatesInDifferentCase_success() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String command \u003d CATEGORY_DESC_CHICKEN_RICE.toLowerCase() + CATEGORY_DESC_NASI_LEMAK.toLowerCase() + \" \""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + PREFIX_CATEGORY + VALID_CATEGORY_CHICKEN_RICE.toUpperCase() + \" \""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + PREFIX_CATEGORY + VALID_CATEGORY_NASI_LEMAK.toUpperCase()"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + TAG_DESC_CHICKEN.toLowerCase() + TAG_DESC_RICE.toLowerCase() + \" \""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + PREFIX_TAG + VALID_TAG_CHICKEN.toUpperCase() + \" \""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + PREFIX_TAG + VALID_TAG_RICE.toUpperCase()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + LOCATION_DESC_CHICKEN_RICE.toLowerCase() + LOCATION_DESC_NASI_LEMAK.toLowerCase() + \" \""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + PREFIX_LOCATION + VALID_LOCATION_CHICKEN_RICE.toUpperCase() + \" \""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + PREFIX_LOCATION + VALID_LOCATION_NASI_LEMAK.toUpperCase();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertPreferenceParseSuccess(parser, command,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new DislikeCommand(expectedCategory, expectedTags, expectedLocation, false), false);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertPreferenceParseSuccess(parser, command,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new LikeCommand(expectedCategory, expectedTags, expectedLocation, false), true);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void wrongMethodCalled_failure() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e parser.parse(\"Test\"));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jon-chua": 189
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/parser/RemovePrefCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.CATEGORY_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.CATEGORY_DESC_NASI_LEMAK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.LOCATION_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.LOCATION_DESC_NASI_LEMAK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.NAME_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.PRICE_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.TAG_DESC_CHICKEN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.TAG_DESC_RICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_CATEGORY_CHICKEN_RICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_CATEGORY_NASI_LEMAK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_LOCATION_CHICKEN_RICE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_LOCATION_NASI_LEMAK;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_TAG_CHICKEN;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_TAG_RICE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.parser.CommandParserTestUtil.assertRemovePreferenceParseFailure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.parser.CommandParserTestUtil.assertRemovePreferenceParseSuccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.logic.commands.RemoveDislikeCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.logic.commands.RemoveLikeCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.logic.commands.RemovePreferenceCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Category;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Location;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.tag.Tag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "public class RemovePrefCommandParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private RemovePreferenceCommandParser parser \u003d new RemovePreferenceCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private HashSet\u003cCategory\u003e expectedCategory \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private HashSet\u003cTag\u003e expectedTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private HashSet\u003cLocation\u003e expectedLocation \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        expectedCategory.add(new Category(VALID_CATEGORY_CHICKEN_RICE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        expectedCategory.add(new Category(VALID_CATEGORY_NASI_LEMAK));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        expectedTags.add(new Tag(VALID_TAG_CHICKEN));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        expectedTags.add(new Tag(VALID_TAG_RICE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        expectedLocation.add(new Location(VALID_LOCATION_CHICKEN_RICE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        expectedLocation.add(new Location(VALID_LOCATION_NASI_LEMAK));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void parse_nothingProvided_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertRemovePreferenceParseSuccess(parser, PREAMBLE_WHITESPACE, new RemoveDislikeCommand(true), false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertRemovePreferenceParseSuccess(parser, PREAMBLE_WHITESPACE, new RemoveLikeCommand(true), true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void parse_invalidField_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String command \u003d NAME_DESC_CHICKEN_RICE + PRICE_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemovePreferenceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertRemovePreferenceParseFailure(parser, command, expectedMessage, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertRemovePreferenceParseFailure(parser, command, expectedMessage, true);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void parse_invalidAndValidFields_failure() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String command \u003d NAME_DESC_CHICKEN_RICE + PRICE_DESC_CHICKEN_RICE + CATEGORY_DESC_CHICKEN_RICE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemovePreferenceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertRemovePreferenceParseFailure(parser, command, expectedMessage, false);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertRemovePreferenceParseFailure(parser, command, expectedMessage, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void parse_validCategory_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String command \u003d CATEGORY_DESC_CHICKEN_RICE + CATEGORY_DESC_NASI_LEMAK;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertRemovePreferenceParseSuccess(parser, command,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveDislikeCommand(expectedCategory, new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), false), false);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertRemovePreferenceParseSuccess(parser, command,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveLikeCommand(expectedCategory, new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), false), true);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void parse_missingCategoryPrefix_failure() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String command \u003d VALID_CATEGORY_CHICKEN_RICE + VALID_CATEGORY_NASI_LEMAK;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemovePreferenceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertRemovePreferenceParseFailure(parser, command, expectedMessage, false);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertRemovePreferenceParseFailure(parser, command, expectedMessage, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void parse_validTag_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String command \u003d TAG_DESC_CHICKEN + TAG_DESC_RICE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertRemovePreferenceParseSuccess(parser, command,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveDislikeCommand(new HashSet\u003c\u003e(), expectedTags, new HashSet\u003c\u003e(), false), false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertRemovePreferenceParseSuccess(parser, command,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveLikeCommand(new HashSet\u003c\u003e(), expectedTags, new HashSet\u003c\u003e(), false), true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void parse_missingTagPrefix_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String command \u003d VALID_TAG_CHICKEN + VALID_TAG_RICE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemovePreferenceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertRemovePreferenceParseFailure(parser, command, expectedMessage, false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertRemovePreferenceParseFailure(parser, command, expectedMessage, true);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void parse_validLocation_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String command \u003d LOCATION_DESC_CHICKEN_RICE + LOCATION_DESC_NASI_LEMAK;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertRemovePreferenceParseSuccess(parser, command,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveDislikeCommand(new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), expectedLocation, false), false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertRemovePreferenceParseSuccess(parser, command,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveLikeCommand(new HashSet\u003c\u003e(), new HashSet\u003c\u003e(), expectedLocation, false), true);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void parse_missingLocationPrefix_failure() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String command \u003d VALID_LOCATION_CHICKEN_RICE + VALID_LOCATION_NASI_LEMAK;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemovePreferenceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertRemovePreferenceParseFailure(parser, command, expectedMessage, false);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertRemovePreferenceParseFailure(parser, command, expectedMessage, true);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void parse_allFields_success() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String command \u003d CATEGORY_DESC_CHICKEN_RICE + CATEGORY_DESC_NASI_LEMAK + TAG_DESC_CHICKEN + TAG_DESC_RICE"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + LOCATION_DESC_CHICKEN_RICE + LOCATION_DESC_NASI_LEMAK;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertRemovePreferenceParseSuccess(parser, command,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveDislikeCommand(expectedCategory, expectedTags, expectedLocation, false), false);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertRemovePreferenceParseSuccess(parser, command,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveLikeCommand(expectedCategory, expectedTags, expectedLocation, false), true);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void parse_multipleDuplicates_success() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String command \u003d CATEGORY_DESC_CHICKEN_RICE + CATEGORY_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + CATEGORY_DESC_CHICKEN_RICE + CATEGORY_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + TAG_DESC_CHICKEN + TAG_DESC_RICE"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + TAG_DESC_CHICKEN + TAG_DESC_RICE"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + LOCATION_DESC_CHICKEN_RICE + LOCATION_DESC_NASI_LEMAK"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + LOCATION_DESC_CHICKEN_RICE + LOCATION_DESC_NASI_LEMAK;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertRemovePreferenceParseSuccess(parser, command,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveDislikeCommand(expectedCategory, expectedTags, expectedLocation, false), false);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertRemovePreferenceParseSuccess(parser, command,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveLikeCommand(expectedCategory, expectedTags, expectedLocation, false), true);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void parse_duplicatesInDifferentCase_success() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String command \u003d CATEGORY_DESC_CHICKEN_RICE.toLowerCase() + CATEGORY_DESC_NASI_LEMAK.toLowerCase() + \" \""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + PREFIX_CATEGORY + VALID_CATEGORY_CHICKEN_RICE.toUpperCase() + \" \""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + PREFIX_CATEGORY + VALID_CATEGORY_NASI_LEMAK.toUpperCase()"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + TAG_DESC_CHICKEN.toLowerCase() + TAG_DESC_RICE.toLowerCase() + \" \""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + PREFIX_TAG + VALID_TAG_CHICKEN.toUpperCase() + \" \""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + PREFIX_TAG + VALID_TAG_RICE.toUpperCase()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + LOCATION_DESC_CHICKEN_RICE.toLowerCase() + LOCATION_DESC_NASI_LEMAK.toLowerCase() + \" \""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + PREFIX_LOCATION + VALID_LOCATION_CHICKEN_RICE.toUpperCase() + \" \""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                + PREFIX_LOCATION + VALID_LOCATION_NASI_LEMAK.toUpperCase();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertRemovePreferenceParseSuccess(parser, command,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveDislikeCommand(expectedCategory, expectedTags, expectedLocation, false), false);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertRemovePreferenceParseSuccess(parser, command,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new RemoveLikeCommand(expectedCategory, expectedTags, expectedLocation, false), true);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void wrongMethodCalled_failure() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e parser.parse(\"Test\"));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jon-chua": 189
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/parser/SaveNusParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.ASCENDING_DIRECTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.QUANTIFY_EQUALS_TO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.TypicalIndexes.INDEX_FIRST_FOOD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.commands.AutoSortCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.logic.commands.BuyCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.savenus.logic.commands.CollapseCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.commands.CustomSortCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.commands.DefaultCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.savenus.logic.commands.DislikeCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.commands.ExpandCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.commands.FilterCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.savenus.logic.commands.LikeCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.commands.MakeSortCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.logic.commands.RecommendCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.testutil.EditFoodDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.testutil.FoodUtil;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class SaveNusParserTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private final SaveNusParser parser \u003d new SaveNusParser();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Food food \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(FoodUtil.getAddCommand(food));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(new AddCommand(food), command);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_FOOD.getOneBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_FOOD), command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        Food food \u003d new FoodBuilder().withTags(\"Food\").build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        EditCommand.EditFoodDescriptor descriptor \u003d new EditFoodDescriptorBuilder(food).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                + INDEX_FIRST_FOOD.getOneBased() + \" \" + FoodUtil.getEditFoodDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_FOOD, descriptor), command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parseCommand_sort() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(parser.parseCommand(SortCommand.COMMAND_WORD + \" \" + FIELD_NAME_NAME"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            + \" \" + ASCENDING_DIRECTION) instanceof SortCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parseCommand_default() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(parser.parseCommand(DefaultCommand.COMMAND_WORD) instanceof DefaultCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(parser.parseCommand(DefaultCommand.COMMAND_WORD + \" 3\") instanceof DefaultCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void parseCommand_budget() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(parser.parseCommand(BudgetCommand.COMMAND_WORD + \" 100 25\") instanceof BudgetCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void parseCommand_buy() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(parser.parseCommand(BuyCommand.COMMAND_WORD + \" 1\") instanceof BuyCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void parseCommand_recommend() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(parser.parseCommand(RecommendCommand.COMMAND_WORD) instanceof RecommendCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_like() throws ParseException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                parser.parseCommand(LikeCommand.COMMAND_WORD + \" c/Chinese\")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                        instanceof LikeCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_dislike() throws ParseException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                parser.parseCommand(DislikeCommand.COMMAND_WORD + \" c/Chinese\")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                     instanceof DislikeCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_collapse() throws ParseException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                parser.parseCommand(CollapseCommand.COMMAND_WORD) instanceof CollapseCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parseCommand_expand() throws ParseException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                parser.parseCommand(ExpandCommand.COMMAND_WORD) instanceof ExpandCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parseCommand_customSort() throws ParseException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                parser.parseCommand(CustomSortCommand.COMMAND_WORD) instanceof CustomSortCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parseCommand_makeSort() throws ParseException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                parser.parseCommand(MakeSortCommand.COMMAND_WORD + \" \" + FIELD_NAME_NAME"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        + \" \" + ASCENDING_DIRECTION) instanceof MakeSortCommand);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parseCommand_history() throws ParseException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parseCommand_filter() throws ParseException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                parser.parseCommand(FilterCommand.COMMAND_WORD + \" \" + FIELD_NAME_NAME"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        + \" \" + QUANTIFY_EQUALS_TO + \" Tom\") instanceof FilterCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parseCommand_autosort() throws ParseException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                parser.parseCommand(AutoSortCommand.COMMAND_WORD + \" ON\") instanceof AutoSortCommand);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 23,
      "seanlowjk": 68,
      "robytanama": 20,
      "-": 91
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/parser/SortCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class SortCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private SortCommandParser parser \u003d new SortCommandParser();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void parse_emptyFields_failure() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String noFieldsMessage \u003d FieldParser.NO_ARGUMENTS_USAGE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String noFieldsUsage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                noFieldsMessage + \"\\n\" + SortCommand.EXAMPLE_USAGE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertParseFailure(parser, \"           \", noFieldsUsage);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 21
    }
  },
  {
    "path": "src/test/java/seedu/savenus/logic/parser/TopUpCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.logic.commands.TopUpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class TopUpCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private TopUpCommandParser parser \u003d new TopUpCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void parse_validArgs_returnsTopUpCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertParseSuccess(parser, \"100\", new TopUpCommand(new BigDecimal(100)));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertParseFailure(parser, \"abcd asd\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, TopUpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void parse_empty_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertParseFailure(parser, \"\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, TopUpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 32
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/CommandHistoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class CommandHistoryTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private CommandHistory commandHistory \u003d CommandHistory.getInstance();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void storeInvalidCommand_success() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        commandHistory.storeInvalidCommand(\"asdasfgas\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertEquals(commandHistory.getCurrentCommandIndex(),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                commandHistory.getCommandHistory().size() - 1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void storeValidCommand_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        commandHistory.storeValidCommand(\"edit\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertEquals(commandHistory.getCurrentCommandIndex(),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                commandHistory.getCommandHistory().size());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void getPrev_correctReturnType() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertEquals(null,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                commandHistory.getPrev());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        commandHistory.storeValidCommand(\"edit\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        commandHistory.storeValidCommand(\"add\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        commandHistory.storeValidCommand(\"info\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                commandHistory.getCommandHistory().get(commandHistory.getCurrentCommandIndex() - 1),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                commandHistory.getPrev());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void getNext_correctReturnType() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertEquals(null, commandHistory.getNext());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void toString_correctReturnType() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertEquals(true, commandHistory.toString() instanceof String);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 46,
      "Raikonen": 1
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/MenuTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_TAG_CHICKEN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.CARBONARA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.getTypicalMenu;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.exceptions.DuplicateFoodException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.Wallet;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class MenuTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private final Menu menu \u003d new Menu();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertEquals(Collections.emptyList(), menu.getFoodList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e menu.resetData(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void resetData_withValidReadOnlyMenu_replacesData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Menu newData \u003d getTypicalMenu();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        menu.resetData(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertEquals(newData, menu);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void resetData_withDuplicatefoods_throwsDuplicatefoodException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // Two foods with the same identity fields"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Food editedAlice \u003d new FoodBuilder(CARBONARA).withTags(VALID_TAG_CHICKEN)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        List\u003cFood\u003e newFoods \u003d Arrays.asList(CARBONARA, editedAlice);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        MenuStub newData \u003d new MenuStub(newFoods);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertThrows(DuplicateFoodException.class, () -\u003e menu.resetData(newData));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void hasFood_nullfood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e menu.hasFood(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void hasFood_foodNotInMenu_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertFalse(menu.hasFood(CARBONARA));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void hasFood_foodInMenu_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        menu.addFood(CARBONARA);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertTrue(menu.hasFood(CARBONARA));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void hasFood_foodWithSameIdentityFieldsInMenu_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        menu.addFood(CARBONARA);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Food editedAlice \u003d new FoodBuilder(CARBONARA).withTags(VALID_TAG_CHICKEN)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertTrue(menu.hasFood(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void getFoodList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e menu.getFoodList().remove(0));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * A stub ReadOnlyMenu whose foods list can violate interface constraints."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private static class MenuStub implements ReadOnlyMenu {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        private final ObservableList\u003cFood\u003e foods \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        private final Wallet wallet \u003d new Wallet();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        MenuStub(Collection\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            this.foods.setAll(foods);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        public ObservableList\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            return foods;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        public Wallet getWallet() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            return wallet;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 32,
      "seanlowjk": 8,
      "-": 59,
      "Raikonen": 11
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.model.Model.PREDICATE_SHOW_ALL_FOOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.CARBONARA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.TONKATSU_RAMEN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.recommend.UserRecommendations;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.SavingsAccount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.sorter.CustomSorter;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.DaysToExpire;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.RemainingBudget;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.wallet.Wallet;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.testutil.MenuBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertEquals(new Menu(), new Menu(modelManager.getMenu()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertEquals(new SavingsAccount(), new SavingsAccount(modelManager.getSavingsAccount()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        userPrefs.setMenuFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        userPrefs.setMenuFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void setMenuFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setMenuFilePath(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void setMenuFilePath_validPath_setsMenuFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        modelManager.setMenuFilePath(path);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertEquals(path, modelManager.getMenuFilePath());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void hasFood_nullfood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasFood(null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void hasFood_foodNotInMenu_returnsFalse() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertFalse(modelManager.hasFood(CARBONARA));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void hasFood_foodInMenu_returnsTrue() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        modelManager.addFood(CARBONARA);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertTrue(modelManager.hasFood(CARBONARA));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void getFilteredfoodList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredFoodList().remove(0));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void getPurchaseHistoryList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getPurchaseHistoryList().remove(0));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void nullRecommendationComparator_throwsNullPointerException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.updateRecommendationComparator(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void nullRecommendationPredicate_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.updateRecommendationPredicate(null));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void updateRecommendationPredicate_inUse() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        Predicate\u003cFood\u003e recommendationPredicate \u003d x -\u003e false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        modelManager.updateRecommendationPredicate(recommendationPredicate);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        modelManager.setRecommendationSystemInUse(true);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertEquals(recommendationPredicate, modelManager.getRecommendationSystem().getRecommendationPredicate());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void updateRecommendationPredicate_notInUse() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        Predicate\u003cFood\u003e recommendationPredicate \u003d x -\u003e false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        modelManager.updateRecommendationPredicate(recommendationPredicate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        modelManager.setRecommendationSystemInUse(false);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertNotEquals(recommendationPredicate, modelManager.getRecommendationSystem().getRecommendationPredicate());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void updateRecommendationComparator_inUse() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        Comparator\u003cFood\u003e recommendationComparator \u003d (x, y) -\u003e 12345;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        modelManager.updateRecommendationComparator(recommendationComparator);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        modelManager.setRecommendationSystemInUse(true);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertEquals(recommendationComparator, modelManager.getRecommendationSystem().getRecommendationComparator());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void updateRecommendationComparator_notInUse() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        Comparator\u003cFood\u003e recommendationComparator \u003d (x, y) -\u003e 12345;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        modelManager.updateRecommendationComparator(recommendationComparator);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        modelManager.setRecommendationSystemInUse(false);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertNotEquals(recommendationComparator, modelManager.getRecommendationSystem().getRecommendationComparator());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void get_wallet_test() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Wallet wallet \u003d modelManager.getWallet();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(wallet, new Wallet());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertNotEquals(wallet, null);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void get_remainingBudget_test() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        Wallet wallet \u003d new Wallet(\"30\", \"10\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertTrue(new BigDecimal(30).compareTo(wallet.getRemainingBudgetAmount()) \u003d\u003d 0);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void set_remainingBudget_test() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        Wallet wallet \u003d new Wallet();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        wallet.setRemainingBudget(new RemainingBudget(\"250.50\"));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertTrue(new BigDecimal(250.50).compareTo(wallet.getRemainingBudgetAmount()) \u003d\u003d 0);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void set_remainingBudget_throwsCommandException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e modelManager"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                .setRemainingBudget(new RemainingBudget(\"1000000000\")));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void get_daysToExpire_test() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        Wallet wallet \u003d new Wallet(\"30\", \"10\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertEquals(10, wallet.getNumberOfDaysToExpire());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void set_daysToExpire_test() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        Wallet wallet \u003d new Wallet();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        wallet.setDaysToExpire(new DaysToExpire(\"50\"));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertEquals(50, wallet.getNumberOfDaysToExpire());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void set_daysToExpire_throwsCommandException() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        Wallet wallet \u003d new Wallet();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e modelManager"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                .setDaysToExpire(new DaysToExpire(\"1000\")));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void autoSortFlag_tests() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(modelManager.getAutoSortFlag(), false);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        modelManager.setAutoSortFlag(true);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(modelManager.getAutoSortFlag(), true);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Menu menu \u003d new MenuBuilder().withfood(CARBONARA).withfood(TONKATSU_RAMEN).build();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Menu differentMenu \u003d new Menu();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        SavingsAccount savingsAccount \u003d new SavingsAccount();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        UserRecommendations userRecs \u003d new UserRecommendations();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        PurchaseHistory purchaseHistory \u003d new PurchaseHistory();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        CustomSorter customSorter \u003d new CustomSorter();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        modelManager \u003d new ModelManager(menu, userPrefs, userRecs, purchaseHistory, customSorter, savingsAccount);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(menu, userPrefs, userRecs, purchaseHistory,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                customSorter, savingsAccount);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentMenu, userPrefs, userRecs, purchaseHistory,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                customSorter, savingsAccount)));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        String[] keywords \u003d CARBONARA.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        modelManager.updateFilteredFoodList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(menu, userPrefs, userRecs, purchaseHistory,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                customSorter, savingsAccount)));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        modelManager.updateFilteredFoodList(PREDICATE_SHOW_ALL_FOOD);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        differentUserPrefs.setMenuFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(menu, differentUserPrefs, userRecs, purchaseHistory,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                customSorter, savingsAccount)));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 33,
      "seanlowjk": 27,
      "jon-chua": 52,
      "-": 96,
      "Raikonen": 49
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/PurchaseHistoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalPurchaseHistory.getTypicalPurchaseHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.Wallet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class PurchaseHistoryTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private final PurchaseHistory purchaseHistory \u003d new PurchaseHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertEquals(Collections.emptyList(), purchaseHistory.getPurchaseHistoryList());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e purchaseHistory.resetData(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void resetData_withValidReadOnlyMenu_replacesData() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        PurchaseHistory newData \u003d getTypicalPurchaseHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        purchaseHistory.resetData(newData);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertEquals(newData, purchaseHistory);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void getPurchaseHistoryList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e purchaseHistory.getPurchaseHistoryList().remove(0));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * A stub ReadOnlyMenu whose foods list can violate interface constraints."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private static class MenuStub implements ReadOnlyMenu {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        private final ObservableList\u003cFood\u003e foods \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        private final Wallet wallet \u003d new Wallet();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        MenuStub(Collection\u003cFood\u003e foods) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            this.foods.setAll(foods);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        public ObservableList\u003cFood\u003e getFoodList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            return foods;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        public Wallet getWallet() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            return wallet;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 68
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setMenuFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 3,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/food/CategoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class CategoryTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Category(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void constructor_invalidCategory_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String invalidCategory \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Category(invalidCategory));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void isBlankCategory() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(Category.isValidCategory(\"\")); // empty string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(Category.isValidCategory(\" \")); // spaces only"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(Category.isValidCategory(\"             \")); // tons of spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void isInvalidCategory() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Category.isValidCategory(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // with unexpected characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(Category.isValidCategory(\"@35^\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(Category.isValidCategory(\"-------\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void isValidCategory() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(Category.isValidCategory(\"abc\")); // short string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(Category.isValidCategory(\"Abracadabra\")); // medium string"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(Category.isValidCategory(\"Abracadabra Alakazam\")); // long string"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void get_field_test() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String sampleString \u003d \"Chinese\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(new Category(sampleString).getField(), sampleString);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertNotEquals(new Category(sampleString).getField(), \"\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void compareTests() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Category normalCategory \u003d new Category(\"Malay\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(normalCategory.compareTo(null), 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(normalCategory.compareTo(normalCategory), 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 2,
      "seanlowjk": 60
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/food/DescriptionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void isBlankDescription() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(Description.isValidDescription(\"           \")); // tons of spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        // valid description"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertTrue(Description.isValidDescription(\"prawn noodles\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertTrue(Description.isValidDescription(\"good\")); // minimal"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertTrue(Description.isValidDescription(\"chicken with plenty rice\")); // alphabets only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void get_field_test() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String sampleString \u003d \"Chinese\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(new Description(sampleString).getField(), sampleString);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertNotEquals(new Description(sampleString).getField(), \"\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void compareTests() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Description normalDescription \u003d new Description(\"Malay\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(normalDescription.compareTo(null), 1);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(normalDescription.compareTo(normalDescription), 0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 5,
      "seanlowjk": 23,
      "jon-chua": 27
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/food/FoodFilterTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_CATEGORY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_LOCATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_OPENING_HOURS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_PRICE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_RESTRICTIONS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.QUANTIFY_EQUALS_TO;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.QUANTIFY_LESS_THAN;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.QUANTIFY_MORE_THAN;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.CARBONARA;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.TEH_PING;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class FoodFilterTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private List\u003cString\u003e fieldList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private FoodFilter foodFilter;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void create_dummyFields_test() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        fieldList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        foodFilter \u003d new FoodFilter(fieldList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // Create new Price"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(foodFilter.createDummyField(FIELD_NAME_PRICE, \"4.00\"), new Price(\"4.00\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertNotEquals(foodFilter.createDummyField(FIELD_NAME_PRICE, \"4.00\"), new Price(\"3.00\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // Create new Category"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(foodFilter.createDummyField(FIELD_NAME_CATEGORY, \"400\"), new Category(\"400\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertNotEquals(foodFilter.createDummyField(FIELD_NAME_CATEGORY, \"400\"), new Category(\"300\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // Create new Description"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(foodFilter.createDummyField(FIELD_NAME_DESCRIPTION, \"400\"), new Description(\"400\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertNotEquals(foodFilter.createDummyField(FIELD_NAME_DESCRIPTION, \"400\"), new Description(\"300\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // Create new Location"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(foodFilter.createDummyField(FIELD_NAME_LOCATION, \"400\"), new Location(\"400\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertNotEquals(foodFilter.createDummyField(FIELD_NAME_LOCATION, \"400\"), new Location(\"300\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // Create new Name"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(foodFilter.createDummyField(FIELD_NAME_NAME, \"400\"), new Name(\"400\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertNotEquals(foodFilter.createDummyField(FIELD_NAME_NAME, \"400\"), new Name(\"300\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // Create new OpeningHours"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(foodFilter.createDummyField(FIELD_NAME_OPENING_HOURS, \"0000 0000\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            new OpeningHours(\"0000 0000\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertNotEquals(foodFilter.createDummyField(FIELD_NAME_OPENING_HOURS, \"0000 0000\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            new OpeningHours(\"0000 0001\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // Create new Restrictions"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(foodFilter.createDummyField(FIELD_NAME_RESTRICTIONS, \"400\"), new Restrictions(\"400\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertNotEquals(foodFilter.createDummyField(FIELD_NAME_RESTRICTIONS, \"400\"), new Restrictions(\"300\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(foodFilter.createDummyField(\"OOF\", \"400\"), null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void quantifier_tests() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        fieldList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        foodFilter \u003d new FoodFilter(fieldList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // Check for equals"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(foodFilter.quantifierMatches(QUANTIFY_EQUALS_TO, 0));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(foodFilter.quantifierMatches(QUANTIFY_EQUALS_TO, -100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(foodFilter.quantifierMatches(QUANTIFY_EQUALS_TO, 100));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(foodFilter.quantifierMatches(QUANTIFY_LESS_THAN, -100));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(foodFilter.quantifierMatches(QUANTIFY_LESS_THAN, 0));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(foodFilter.quantifierMatches(QUANTIFY_LESS_THAN, 100));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(foodFilter.quantifierMatches(QUANTIFY_MORE_THAN, 100));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(foodFilter.quantifierMatches(QUANTIFY_MORE_THAN, -100));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(foodFilter.quantifierMatches(QUANTIFY_MORE_THAN, 0));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void test_main_test() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        fieldList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        fieldList.add(FIELD_NAME_PRICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        fieldList.add(QUANTIFY_MORE_THAN);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        fieldList.add(\"4.00\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        foodFilter \u003d new FoodFilter(fieldList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // True"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(foodFilter.doesFoodPassTest(CARBONARA));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(foodFilter.doesFoodPassTest(TEH_PING));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void predicate_tests() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        fieldList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        fieldList.add(FIELD_NAME_PRICE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        fieldList.add(QUANTIFY_MORE_THAN);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        fieldList.add(\"4.00\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        foodFilter \u003d new FoodFilter(fieldList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(foodFilter.test(CARBONARA));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(foodFilter.test(TEH_PING));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 111
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/food/FoodTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_DESCRIPTION_NASI_LEMAK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_LOCATION_NASI_LEMAK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_NAME_NASI_LEMAK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_PRICE_NASI_LEMAK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_TAG_CHICKEN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_CATEGORY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_LOCATION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_OPENING_HOURS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_PRICE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_RESTRICTIONS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.CARBONARA;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.NASI_LEMAK;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class FoodTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Food food \u003d new FoodBuilder().build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e food.getTags().remove(0));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void isSameFood() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertTrue(CARBONARA.isSameFood(CARBONARA));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertFalse(CARBONARA.isSameFood(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        // different price and description -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Food editedAlice \u003d new FoodBuilder(CARBONARA).withPrice(VALID_PRICE_NASI_LEMAK)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_NASI_LEMAK).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertFalse(CARBONARA.isSameFood(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        editedAlice \u003d new FoodBuilder(CARBONARA).withName(VALID_NAME_NASI_LEMAK).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertFalse(CARBONARA.isSameFood(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // same name, same price, different description -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        editedAlice \u003d new FoodBuilder(CARBONARA).withDescription(VALID_DESCRIPTION_NASI_LEMAK)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertFalse(CARBONARA.isSameFood(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // same name, same description, different price -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        editedAlice \u003d new FoodBuilder(CARBONARA).withPrice(VALID_PRICE_NASI_LEMAK)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertFalse(CARBONARA.isSameFood(editedAlice));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // same name, same price, same description, different tags -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        editedAlice \u003d new FoodBuilder(CARBONARA).withTags(VALID_TAG_CHICKEN).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertTrue(CARBONARA.isSameFood(editedAlice));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void get_field_tests() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Food carbonaraCopy \u003d new FoodBuilder(CARBONARA).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(carbonaraCopy.getField(FIELD_NAME_CATEGORY), carbonaraCopy.getCategory());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(carbonaraCopy.getField(FIELD_NAME_NAME), carbonaraCopy.getName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(carbonaraCopy.getField(FIELD_NAME_PRICE), carbonaraCopy.getPrice());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(carbonaraCopy.getField(FIELD_NAME_LOCATION), carbonaraCopy.getLocation());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(carbonaraCopy.getField(FIELD_NAME_OPENING_HOURS), carbonaraCopy.getOpeningHours());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(carbonaraCopy.getField(FIELD_NAME_RESTRICTIONS), carbonaraCopy.getRestrictions());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Food aliceCopy \u003d new FoodBuilder(CARBONARA).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertTrue(CARBONARA.equals(aliceCopy));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertTrue(CARBONARA.equals(CARBONARA));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertFalse(CARBONARA.equals(null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertFalse(CARBONARA.equals(5));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // different food -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertFalse(CARBONARA.equals(NASI_LEMAK));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Food editedAlice \u003d new FoodBuilder(CARBONARA).withName(VALID_NAME_NASI_LEMAK).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertFalse(CARBONARA.equals(editedAlice));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // different price -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        editedAlice \u003d new FoodBuilder(CARBONARA).withPrice(VALID_PRICE_NASI_LEMAK).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertFalse(CARBONARA.equals(editedAlice));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        editedAlice \u003d new FoodBuilder(CARBONARA).withDescription(VALID_DESCRIPTION_NASI_LEMAK).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertFalse(CARBONARA.equals(editedAlice));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        editedAlice \u003d new FoodBuilder(CARBONARA).withTags(VALID_TAG_CHICKEN).build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertFalse(CARBONARA.equals(editedAlice));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        // different location -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        editedAlice \u003d new FoodBuilder(CARBONARA).withLocation(VALID_LOCATION_NASI_LEMAK).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertFalse(CARBONARA.equals(editedAlice));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 34,
      "seanlowjk": 29,
      "jon-chua": 7,
      "-": 42,
      "Raikonen": 2
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/food/LocationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "package seedu.savenus.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "public class LocationTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Location(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void constructor_invalidCategory_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String invalidLocation \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Location(invalidLocation));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void isEmptyLocation() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertFalse(Location.isValidLocation(\"\")); // empty string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertFalse(Location.isValidLocation(\" \")); // spaces only"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(Location.isValidLocation(\"             \")); // tons of spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void isNullLocation() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // null location"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Location.isValidLocation(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void isValidLocation() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        // valid location"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertTrue(Location.isValidLocation(\"abc\")); // short string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertTrue(Location.isValidLocation(\"Abracadabra\")); // medium string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertTrue(Location.isValidLocation(\"Abracadabra Alakazam\")); // long string"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        // with unexpected characters"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertTrue(Location.isValidLocation(\"@35^\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void get_field_test() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String sampleString \u003d \"123321\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(new Location(sampleString).getField(), sampleString);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertNotEquals(new Location(sampleString).getField(), \"\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void compareTests() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Location normalLocation \u003d new Location(\"888888\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(normalLocation.compareTo(null), 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(normalLocation.compareTo(normalLocation), 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 24,
      "jon-chua": 37
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/food/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // different food -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Ayam\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertTrue(predicate.test(new FoodBuilder().withName(\"Ayam Penyet\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(predicate.test(new FoodBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(predicate.test(new FoodBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(predicate.test(new FoodBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(predicate.test(new FoodBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(predicate.test(new FoodBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        // Keywords match price, description and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(predicate.test(new FoodBuilder().withName(\"Alice\").withPrice(\"12.30\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .withDescription(\"alice@email.com\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 4,
      "seanlowjk": 6,
      "jon-chua": 2,
      "-": 62,
      "Raikonen": 1
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/food/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void constructor_nameWithSpacesOnly_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String invalidName \u003d \"                      \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertFalse(Name.isValidName(\"prata*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertTrue(Name.isValidName(\"cheese prata\")); // alphabets only"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        //assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        //assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertTrue(Name.isValidName(\"Cheese Prata\")); // with capital letters"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertTrue(Name.isValidName(\"Beauty in a Pot with Kambing Soup\")); // long names"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void isEmptyName() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(Name.isValidName(\"           \")); // tons of spaces"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void get_field_test() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String sampleString \u003d \"Chinese\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(new Name(sampleString).getField(), sampleString);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertNotEquals(new Name(sampleString).getField(), \"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void compareTests() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Name normalName \u003d new Name(\"Malay\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(normalName.compareTo(null), 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(normalName.compareTo(normalName), 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 8,
      "seanlowjk": 29,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/food/OpeningHoursTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class OpeningHoursTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new OpeningHours(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void constructor_invalidOpeningHours_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        String invalidOpeningHours \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new OpeningHours(invalidOpeningHours));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void isInvalidOpeningHours() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        // blank opening hours"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        // with unexpected characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"@35^\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        // wrong HHMM HHMM format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"0823 20923\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void isValidOpeningHours() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        // valid opening hours"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(OpeningHours.isValidOpeningHours(\"1200 1900\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(OpeningHours.isValidOpeningHours(\"0000 2359\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(OpeningHours.isValidOpeningHours(\"1200 1200\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void get_field_test() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String sampleString \u003d \"0000 2000\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(new OpeningHours(sampleString).getField(), sampleString);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertNotEquals(new OpeningHours(sampleString).getField(), \"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void compareTests() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        OpeningHours normalOpeningHours \u003d new OpeningHours(\"0000 2359\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(normalOpeningHours.compareTo(null), 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(normalOpeningHours.compareTo(normalOpeningHours), 0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 2,
      "robytanama": 38,
      "seanlowjk": 19
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/food/PriceTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class PriceTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Price(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void constructor_invalidPrice_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String invalidPrice \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Price(invalidPrice));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void isValidPrice() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // null price number"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Price.isValidPrice(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // invalid price numbers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(Price.isValidPrice(\"price\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(Price.isValidPrice(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(Price.isValidPrice(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(Price.isValidPrice(\"9312.1\")); // digits with 1 decimal point"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(Price.isValidPrice(\"9312.1\")); // too big amount"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // valid price numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(Price.isValidPrice(\"911.10\")); // small amount"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertTrue(Price.isValidPrice(\"4999.10\")); // big amount"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // other prices"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(Price.isValidPrice(\"5002.00\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void isEmptyPrice() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(Price.isValidPrice(\"\")); // empty string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(Price.isValidPrice(\" \")); // spaces only"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(Price.isValidPrice(\"           \")); // tons of spaves"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void get_field_test() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String sampleString \u003d \"5.00\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(new Price(sampleString).getField(), sampleString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertNotEquals(new Price(sampleString).getField(), \"\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void compareTests() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Price normalPrice \u003d new Price(\"4.00\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(normalPrice.compareTo(null), 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(normalPrice.compareTo(normalPrice), 0);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 2,
      "seanlowjk": 61,
      "Raikonen": 2
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/food/RecommendationSystemTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.CARBONARA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.recommend.RecommendationSystem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class RecommendationSystemTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void calculateRecommendation_test() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        double recommendationValue \u003d RecommendationSystem.getInstance().calculateRecommendation(CARBONARA);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(recommendationValue, 0);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 15,
      "jon-chua": 2
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/food/RestrictionsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class RestrictionsTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Restrictions(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void constructor_invalidRestrictions_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        String invalidRestrictions \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Restrictions(invalidRestrictions));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void isValidRestrictions() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        // null restrictions"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Restrictions.isValidRestrictions(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        // valid restrictions"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(Restrictions.isValidRestrictions(\"PeterJack1examplecom\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertTrue(Restrictions.isValidRestrictions(\"food\")); // minimal"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertTrue(Restrictions.isValidRestrictions(\"steak with cheese and chilli\")); // alphabets only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void isBlankRestrictions() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        // blank restrictions"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(Restrictions.isValidRestrictions(\"\")); // empty string"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(Restrictions.isValidRestrictions(\" \")); // spaces only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(Restrictions.isValidRestrictions(\"          \")); // tons of spaces"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void get_field_test() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String sampleString \u003d \"Chinese\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(new Restrictions(sampleString).getField(), sampleString);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertNotEquals(new Restrictions(sampleString).getField(), \"\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void compareTests() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Restrictions normalRestrictions \u003d new Restrictions(\"Malay\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(normalRestrictions.compareTo(null), 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(normalRestrictions.compareTo(normalRestrictions), 0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 4,
      "robytanama": 27,
      "seanlowjk": 25
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/food/UniqueFoodListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model.food;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_TAG_CHICKEN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.CARBONARA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.NASI_LEMAK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.exceptions.DuplicateFoodException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.exceptions.FoodNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.testutil.FoodBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class UniqueFoodListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private final UniqueFoodList uniqueFoodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void contains_nullfood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFoodList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void contains_foodNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertFalse(uniqueFoodList.contains(CARBONARA));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void contains_foodInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        uniqueFoodList.add(CARBONARA);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertTrue(uniqueFoodList.contains(CARBONARA));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void contains_foodWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        uniqueFoodList.add(CARBONARA);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Food editedAlice \u003d new FoodBuilder(CARBONARA).withTags(VALID_TAG_CHICKEN)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(uniqueFoodList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void add_nullfood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFoodList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void add_duplicatefood_throwsDuplicatefoodException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        uniqueFoodList.add(CARBONARA);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertThrows(DuplicateFoodException.class, () -\u003e uniqueFoodList.add(CARBONARA));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void setFood_nullTargetfood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFoodList.setFood(null, CARBONARA));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void setFood_nullEditedfood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFoodList.setFood(CARBONARA, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void setFood_targetfoodNotInList_throwsfoodNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertThrows(FoodNotFoundException.class, () -\u003e uniqueFoodList.setFood(CARBONARA, CARBONARA));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void setFood_editedfoodisSameFood_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        uniqueFoodList.add(CARBONARA);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        uniqueFoodList.setFood(CARBONARA, CARBONARA);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        UniqueFoodList expectedUniqueFoodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        expectedUniqueFoodList.add(CARBONARA);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(expectedUniqueFoodList, uniqueFoodList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void setFood_editedfoodHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        uniqueFoodList.add(CARBONARA);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Food editedAlice \u003d new FoodBuilder(CARBONARA).withTags(VALID_TAG_CHICKEN)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        uniqueFoodList.setFood(CARBONARA, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        UniqueFoodList expectedUniqueFoodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        expectedUniqueFoodList.add(editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(expectedUniqueFoodList, uniqueFoodList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void setFood_editedfoodHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        uniqueFoodList.add(CARBONARA);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        uniqueFoodList.setFood(CARBONARA, NASI_LEMAK);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        UniqueFoodList expectedUniqueFoodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        expectedUniqueFoodList.add(NASI_LEMAK);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(expectedUniqueFoodList, uniqueFoodList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void setFood_editedfoodHasNonUniqueIdentity_throwsDuplicatefoodException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        uniqueFoodList.add(CARBONARA);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        uniqueFoodList.add(NASI_LEMAK);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertThrows(DuplicateFoodException.class, () -\u003e uniqueFoodList.setFood(CARBONARA, NASI_LEMAK));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void remove_nullfood_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFoodList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void remove_foodDoesNotExist_throwsfoodNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertThrows(FoodNotFoundException.class, () -\u003e uniqueFoodList.remove(CARBONARA));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void remove_existingfood_removesfood() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        uniqueFoodList.add(CARBONARA);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        uniqueFoodList.remove(CARBONARA);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        UniqueFoodList expectedUniqueFoodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(expectedUniqueFoodList, uniqueFoodList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void setFoods_nullUniqueFoodList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFoodList.setFoods((UniqueFoodList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void setFoods_uniqueFoodList_replacesOwnListWithProvidedUniqueFoodList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        uniqueFoodList.add(CARBONARA);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        UniqueFoodList expectedUniqueFoodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        expectedUniqueFoodList.add(NASI_LEMAK);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        uniqueFoodList.setFoods(expectedUniqueFoodList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(expectedUniqueFoodList, uniqueFoodList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void setFoods_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFoodList.setFoods((List\u003cFood\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void setFoods_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        uniqueFoodList.add(CARBONARA);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        List\u003cFood\u003e foodList \u003d Collections.singletonList(NASI_LEMAK);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        uniqueFoodList.setFoods(foodList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        UniqueFoodList expectedUniqueFoodList \u003d new UniqueFoodList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        expectedUniqueFoodList.add(NASI_LEMAK);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(expectedUniqueFoodList, uniqueFoodList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void setFoods_listWithDuplicatefoods_throwsDuplicatefoodException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        List\u003cFood\u003e listWithDuplicateFoods \u003d Arrays.asList(CARBONARA, CARBONARA);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(DuplicateFoodException.class, () -\u003e uniqueFoodList.setFoods(listWithDuplicateFoods));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            -\u003e uniqueFoodList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 37,
      "seanlowjk": 130,
      "Raikonen": 2
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/info/AddInfoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package seedu.savenus.model.info;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class AddInfoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void addInfo_differentClass() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        AddInfo addInfo \u003d new AddInfo();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(addInfo.equals(new AddInfo()));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void add_correctCommandWord() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(AddInfo.COMMAND_WORD.equals(\"add\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void add_wrongCommandWord() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(AddInfo.COMMAND_WORD.equals(\"edit\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void add_wrongInformation() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(AddInfo.INFORMATION.isEmpty());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void add_correctOutput() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(AddInfo.OUTPUT.contains(\"name\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 35
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/info/BudgetInfoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package seedu.savenus.model.info;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class BudgetInfoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void budgetInfo_differentClass() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        BudgetInfo budgetInfo \u003d new BudgetInfo();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(budgetInfo.equals(new BudgetInfo()));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void budget_correctCommandWord() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(BudgetInfo.COMMAND_WORD.equals(\"budget\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void budget_wrongCommandWord() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(BudgetInfo.COMMAND_WORD.equals(\"epic\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void budget_wrongInformation() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(BudgetInfo.INFORMATION.isEmpty());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void budget_correctUsage() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(BudgetInfo.USAGE.equals(\"Budget 100 23\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 35
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/info/BuyInfoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package seedu.savenus.model.info;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class BuyInfoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void buyInfo_differentClass() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        BuyInfo buyInfo \u003d new BuyInfo();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(buyInfo.equals(new BuyInfo()));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void buy_correctCommandWord() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(BuyInfo.COMMAND_WORD.equals(\"buy\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void buy_wrongInformation() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(BuyInfo.INFORMATION.equals(\"anyh9ow\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void buy_correctUsage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(BuyInfo.USAGE.contains(\"buy\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void buy_wrongOutput() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(BuyInfo.OUTPUT.equals(\"isduafgsdg\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 35
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/info/ClearInfoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package seedu.savenus.model.info;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class ClearInfoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void clearInfo_differentClass() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        ClearInfo clearInfo \u003d new ClearInfo();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(clearInfo.equals(new ClearInfo()));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void clear_correctCommandWord() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(ClearInfo.COMMAND_WORD.equals(\"clear\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void clear_wrongInformation() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(ClearInfo.INFORMATION.equals(\"\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void clear_correctUsage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(ClearInfo.USAGE.equals(\"clear\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void clear_emptyWrongOutput() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(ClearInfo.OUTPUT.isEmpty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 35
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/info/DefaultInfoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package seedu.savenus.model.info;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.logic.commands.DefaultCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class DefaultInfoTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void defaultInfo_differentClass() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        DefaultInfo defaultInfo \u003d new DefaultInfo();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(defaultInfo.equals(new DefaultInfo()));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void default_correctCommandWord() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(DefaultInfo.COMMAND_WORD.equals(DefaultCommand.COMMAND_WORD));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void default_wrongInformation() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(DefaultInfo.INFORMATION.equals(\"\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void default_wrongUsage() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(DefaultInfo.USAGE.isEmpty());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void default_emptyWrongOutput() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(!DefaultInfo.OUTPUT.isEmpty());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 37
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/info/DeleteInfoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package seedu.savenus.model.info;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class DeleteInfoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void deleteInfo_differentClass() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        DeleteInfo deleteInfo \u003d new DeleteInfo();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(deleteInfo.equals(new DeleteInfo()));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void delete_wrongCommandWord() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(DeleteInfo.COMMAND_WORD.equals(\"edit\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void delete_wrongInformation() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(DeleteInfo.INFORMATION.equals(\"  \"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void delete_correctUsage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(DeleteInfo.USAGE.equals(\"delete 3\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void delete_wrongOutput() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(DeleteInfo.OUTPUT.isEmpty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 35
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/info/EditInfoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package seedu.savenus.model.info;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class EditInfoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void editInfo_differentClass() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        EditInfo editInfo \u003d new EditInfo();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(editInfo.equals(new EditInfo()));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void edit_correctCommandWord() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(EditInfo.COMMAND_WORD.equals(\"edit\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void edit_wrongInformation() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(EditInfo.INFORMATION.isEmpty());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void edit_correctUsage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(EditInfo.USAGE.contains(\"edit\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void edit_wrongOutput() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(EditInfo.OUTPUT.equals(\"nothing\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 35
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/info/ExitInfoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package seedu.savenus.model.info;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class ExitInfoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void exitInfo_differentClass() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        ExitInfo exitInfo \u003d new ExitInfo();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(exitInfo.equals(new ExitInfo()));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void exit_correctCommandWord() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(ExitInfo.COMMAND_WORD.equals(\"exit\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void exit_wrongInformation() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(ExitInfo.INFORMATION.isEmpty());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void exit_correctUsage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(ExitInfo.USAGE.equals(\"exit\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void exit_correctOutput() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(ExitInfo.OUTPUT.equals(\"The app will close.\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 35
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/info/FindInfoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package seedu.savenus.model.info;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class FindInfoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void findInfo_differentClass() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        FindInfo findInfo \u003d new FindInfo();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(findInfo.equals(new FindInfo()));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void find_correctCommandWord() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(FindInfo.COMMAND_WORD.equals(\"find\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void find_wrongInformation() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(FindInfo.INFORMATION.equals(\"find\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void find_correctUsage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(FindInfo.USAGE.contains(\"find\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void find_correctOutput() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(FindInfo.OUTPUT.contains(\"list\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 35
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/info/HelpInfoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package seedu.savenus.model.info;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class HelpInfoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void helpInfo_differentClass() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        HelpInfo helpInfo \u003d new HelpInfo();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(helpInfo.equals(new HelpInfo()));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void help_correctCommandWord() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(HelpInfo.COMMAND_WORD.equals(\"help\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void help_wrongInformation() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(HelpInfo.INFORMATION.isEmpty());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void help_correctUsage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(HelpInfo.USAGE.equals(\"help\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void help_wrongOutput() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(HelpInfo.OUTPUT.isEmpty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 35
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/info/InfoInfoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package seedu.savenus.model.info;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class InfoInfoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void infoInfo_differentClass() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        InfoInfo infoInfo \u003d new InfoInfo();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(infoInfo.equals(new InfoInfo()));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void info_correctCommandWord() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(InfoInfo.COMMAND_WORD.equals(\"info\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void info_wrongInformation() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(InfoInfo.INFORMATION.equals(\"empty\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void info_correctUsage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(InfoInfo.USAGE.contains(\"info\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void info_wrongOutput() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(InfoInfo.OUTPUT.isEmpty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 35
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/info/ListInfoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package seedu.savenus.model.info;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class ListInfoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void listInfo_differentClass() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        ListInfo listInfo \u003d new ListInfo();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(listInfo.equals(new ListInfo()));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void list_correctCommandWord() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(ListInfo.COMMAND_WORD.equals(\"list\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void list_wrongInformation() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(ListInfo.INFORMATION.isEmpty());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void list_correctUsage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(ListInfo.USAGE.equals(\"list\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void list_wrongOutput() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(ListInfo.OUTPUT.isEmpty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 35
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/info/RecommendInfoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package seedu.savenus.model.info;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class RecommendInfoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void recommendInfo_differentClass() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        RecommendInfo recommendInfo \u003d new RecommendInfo();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(recommendInfo.equals(new RecommendInfo()));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void recommend_correctCommandWord() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(RecommendInfo.COMMAND_WORD.equals(\"recommend\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void recommend_wrongInformation() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(RecommendInfo.INFORMATION.isEmpty());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void recommend_correctUsage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(RecommendInfo.USAGE.equals(\"recommend\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void recommend_wrongOutput() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(RecommendInfo.OUTPUT.isEmpty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 35
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/info/SortInfoTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package seedu.savenus.model.info;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class SortInfoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void sortInfo_differentClass() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        SortInfo sortInfo \u003d new SortInfo();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(sortInfo.equals(new SortInfo()));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void sort_correctCommandWord() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(SortInfo.COMMAND_WORD.equals(\"sort\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void sort_wrongInformation() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(SortInfo.INFORMATION.isEmpty());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void sort_correctUsage() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertTrue(SortInfo.USAGE.contains(\"sort\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void sort_wrongOutput() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertFalse(SortInfo.OUTPUT.isEmpty());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 35
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/purchase/PurchaseHistoryListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.model.purchase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.BEE_HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.CARBONARA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.purchase.exceptions.PurchaseNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class PurchaseHistoryListTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private final Purchase testPurchase \u003d new Purchase(CARBONARA);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private final PurchaseHistoryList testPurchaseHistoryList \u003d new PurchaseHistoryList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private final List\u003cPurchase\u003e testListOfPurchases \u003d new ArrayList\u003c\u003e(List.of("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            new Purchase(CARBONARA, new TimeOfPurchase(\"1570976664361\")),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            new Purchase(BEE_HOON, new TimeOfPurchase(\"1570976665687\"))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    ));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void add_nullPurchase_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e testPurchaseHistoryList.add(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void remove_nullPurchase_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e testPurchaseHistoryList.remove(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void remove_purchaseDoesNotExist_throwsPurchaseNotFoundException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertThrows(PurchaseNotFoundException.class, () -\u003e testPurchaseHistoryList.remove(testPurchase));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void remove_existingfood_removesfood() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        testPurchaseHistoryList.add(testPurchase);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        testPurchaseHistoryList.remove(testPurchase);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        PurchaseHistoryList expectedPurchaseHistoryList \u003d new PurchaseHistoryList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertEquals(expectedPurchaseHistoryList, testPurchaseHistoryList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void setPurchases_nullPurchaseHistory_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                NullPointerException.class, () -\u003e testPurchaseHistoryList.setPurchases((PurchaseHistoryList) null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void setPurchases_purchaseHistory_replacesOwnListWithProvidedPurchaseHistory() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        testPurchaseHistoryList.add(testPurchase);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        PurchaseHistoryList expectedPurchaseHistoryList \u003d new PurchaseHistoryList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        expectedPurchaseHistoryList.add(testPurchase);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        testPurchaseHistoryList.setPurchases(expectedPurchaseHistoryList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertEquals(expectedPurchaseHistoryList, testPurchaseHistoryList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void setPurchases_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e testPurchaseHistoryList.setPurchases((List\u003cPurchase\u003e) null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void setPurchases_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        List\u003cPurchase\u003e purchaseList \u003d Collections.singletonList(testPurchase);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        testPurchaseHistoryList.setPurchases(purchaseList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        PurchaseHistoryList expectedPurchaseHistoryList \u003d new PurchaseHistoryList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        expectedPurchaseHistoryList.add(testPurchase);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertEquals(expectedPurchaseHistoryList, testPurchaseHistoryList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e testPurchaseHistoryList"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                .asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void get_iterator_test() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        System.out.println(testPurchaseHistoryList.iterator());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertNotEquals(testPurchaseHistoryList.iterator(), FXCollections.observableArrayList().iterator());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void toString_test() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertEquals(testPurchaseHistoryList.toString(), \"No Purchases Made\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        testPurchaseHistoryList.add(testPurchase);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertEquals(testPurchaseHistoryList.toString(), \"Current Purchases: \\n\""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                + testPurchase.toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 12,
      "Raikonen": 87
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/purchase/PurchaseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.model.purchase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.CARBONARA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.NASI_LEMAK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class PurchaseTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private final String testTimeOfPurchaseInMillisSinceEpoch \u003d \"1570680000000\"; // 2019/10/10 12:00:00"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private final TimeOfPurchase testTimeOfPurchase \u003d new TimeOfPurchase(testTimeOfPurchaseInMillisSinceEpoch);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private final Purchase testPurchase \u003d new Purchase(CARBONARA, testTimeOfPurchase);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void test_timeOfPurchase() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        LocalDateTime time \u003d testPurchase.getTimeOfPurchaseInLocalDateTime();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        LocalDateTime accurateTime \u003d testPurchase.getTimeOfPurchase().getTimeOfPurchaseInLocalDateTime();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(time, accurateTime);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void test_timeAgo() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String timeAgo \u003d testPurchase.getTimeAgoString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(timeAgo, \"Thu, 10 Oct\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        Purchase testPurchaseCopy \u003d new Purchase(CARBONARA, testTimeOfPurchase);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertTrue(testPurchase.equals(testPurchaseCopy));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertTrue(testPurchase.equals(testPurchase));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(testPurchase.equals(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(testPurchase.equals(5));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // different food -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        Purchase editedPurchase \u003d new Purchase(NASI_LEMAK, testTimeOfPurchase);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(testPurchase.equals(editedPurchase));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // different time of purchase -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        editedPurchase \u003d new Purchase(CARBONARA, TimeOfPurchase.generate());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(testPurchase.equals(editedPurchase));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 16,
      "Raikonen": 38
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/purchase/TimeOfPurchaseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.model.purchase;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class TimeOfPurchaseTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void isValidTimeOfPurchaseTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TimeOfPurchase.isValidTimeOfPurchase(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // invalid remainingBudget"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(TimeOfPurchase.isValidTimeOfPurchase(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(TimeOfPurchase.isValidTimeOfPurchase(\"prata*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(TimeOfPurchase.isValidTimeOfPurchase(\"-123.50\")); // negative remainingBudget"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(TimeOfPurchase.isValidTimeOfPurchase(\"\")); // empty string"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(TimeOfPurchase.isValidTimeOfPurchase(\" \")); // spaces only"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(TimeOfPurchase.isValidTimeOfPurchase(\"           \")); // tons of spaces"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // valid remainingBudget"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertTrue(TimeOfPurchase.isValidTimeOfPurchase(\"1570680000000\")); // valid remainingBudget"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 28
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/sorter/CustomSorterTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.model.sorter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class CustomSorterTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        CustomSorter sorter \u003d new CustomSorter();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(sorter, sorter);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertNotEquals(sorter, new Object());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 15
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/sorter/DefaultComparatorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.model.sorter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.CARBONARA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.NASI_AYAM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class DefaultComparatorTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void check_compare() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DefaultComparator().compare(CARBONARA, null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(new DefaultComparator().compare(CARBONARA, CARBONARA), 0);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertNotEquals(new DefaultComparator().compare(NASI_AYAM, CARBONARA), 0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 19
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/sorter/FieldComparatorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.model.sorter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.CARBONARA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.NASI_LEMAK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class FieldComparatorTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private FieldComparator fieldComparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void compareFields() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        fieldComparator \u003d new FieldComparator();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertNotEquals(fieldComparator.compare(CARBONARA.getPrice(), NASI_LEMAK.getPrice()), 0);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(fieldComparator.compare(CARBONARA.getPrice(), CARBONARA.getPrice()), 0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(ClassCastException.class, () -\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                                               fieldComparator.compare(CARBONARA.getPrice(), CARBONARA.getName()));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 21
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/sorter/FoodComparatorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.model.sorter;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.ASCENDING_DIRECTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.DESCENDING_DIRECTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.FIELD_NAME_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.CARBONARA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.NASI_AYAM;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class FoodComparatorTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private List\u003cString\u003e fields \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void check_compare() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        fields.add(FIELD_NAME_NAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        fields.add(ASCENDING_DIRECTION);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new FoodComparator(fields).compare(CARBONARA, null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(new FoodComparator(fields).compare(CARBONARA, CARBONARA), 0);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertNotEquals(new FoodComparator(fields).compare(CARBONARA, NASI_AYAM), 0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void check_compare_desc() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        fields.add(FIELD_NAME_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        fields.add(DESCENDING_DIRECTION);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new FoodComparator(fields).compare(CARBONARA, null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(new FoodComparator(fields).compare(CARBONARA, CARBONARA), 0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertNotEquals(new FoodComparator(fields).compare(CARBONARA, NASI_AYAM), 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void check_direction() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        FoodComparator test \u003d new FoodComparator(fields);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(test.isDirectionAscending(ASCENDING_DIRECTION));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(test.isDirectionAscending(DESCENDING_DIRECTION));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        FoodComparator comparator \u003d new FoodComparator(new ArrayList\u003cString\u003e());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertNotEquals(comparator, new Object());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(comparator, comparator);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 53
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/tag/TagTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void isNullTagName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void isBlankTagName() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(Tag.isValidTagName(\"\")); // blank"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(Tag.isValidTagName(\" \")); // one space"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(Tag.isValidTagName(\"              \")); // tons of spaces"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(Tag.isValidTagName(\"Western\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertTrue(Tag.isValidTagName(\"ChickenRice\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 2,
      "seanlowjk": 17,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/util/SampleDataUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "robytanama"
        },
        "content": "package seedu.savenus.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.model.ReadOnlyMenu;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "robytanama"
        },
        "content": "import seedu.savenus.model.wallet.Wallet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "robytanama"
        },
        "content": "public class SampleDataUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void correctSampleFoodAmount() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertEquals(6,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                SampleDataUtil.getSampleFood().length);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void getSampleWallet_correctReturnType() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertEquals(true,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                SampleDataUtil.getSampleWallet() instanceof Wallet);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public void getSampleMenu_correctReturnType() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        assertEquals(true,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                SampleDataUtil.getSampleMenu() instanceof ReadOnlyMenu);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "robytanama"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "robytanama": 29
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/util/TimeFormatterTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class TimeFormatterTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void getDaysAgoTest() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        LocalDateTime testLocalDateTime \u003d LocalDateTime.ofInstant("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            Instant.ofEpochMilli(Long.parseLong(\"1570680000000\")), ZoneId.systemDefault()); // 2019/10/10 12:00:00"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        LocalDateTime testLocalDateTime2DaysAgo \u003d LocalDateTime.ofInstant("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            Instant.ofEpochMilli(Long.parseLong(\"1570507200000\")), ZoneId.systemDefault()); // 2019/10/08 12:00:00"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertTrue(TimeFormatter.getDaysAgo(testLocalDateTime2DaysAgo, testLocalDateTime) \u003d\u003d 2);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 23
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/wallet/DaysToExpireTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.model.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class DaysToExpireTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DaysToExpire(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void constructor_invalidDaysToExpire_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        String invalidDaysToExpire \u003d \"abc\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DaysToExpire(invalidDaysToExpire));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void constructor_daysToExpireWithSpacesOnly_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        String invalidDaysToExpire \u003d \"                      \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new DaysToExpire(invalidDaysToExpire));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void isValidDaysToExpireTest() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e DaysToExpire.isValidDaysToExpire(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // invalid daysToExpire"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(DaysToExpire.isValidDaysToExpire(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(DaysToExpire.isValidDaysToExpire(\"prata*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(DaysToExpire.isValidDaysToExpire(\"-10\")); // negative daysToExpire"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // valid daysToExpire"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertTrue(DaysToExpire.isValidDaysToExpire(\"123\")); // valid daysToExpire"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void isOutOfBoundsTest() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // in bound remainingBudget"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(new DaysToExpire(\"100\").isOutOfBounds()); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // out of bounds remainingBudget"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertTrue(new DaysToExpire(\"1000000000\").isOutOfBounds()); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void isEmptyDaysToExpire() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(DaysToExpire.isValidDaysToExpire(\"\")); // empty string"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(DaysToExpire.isValidDaysToExpire(\" \")); // spaces only"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(DaysToExpire.isValidDaysToExpire(\"           \")); // tons of spaces"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 57
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/wallet/RemainingBudgetTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.model.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class RemainingBudgetTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RemainingBudget(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void constructor_invalidRemainingBudget_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        String invalidRemainingBudget \u003d \"abc\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new RemainingBudget(invalidRemainingBudget));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void constructor_remainingBudgetWithSpacesOnly_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        String invalidRemainingBudget \u003d \"                      \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new RemainingBudget(invalidRemainingBudget));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void isValidRemainingBudgetTest() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e RemainingBudget.isValidRemainingBudget(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // invalid remainingBudget"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(RemainingBudget.isValidRemainingBudget(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(RemainingBudget.isValidRemainingBudget(\"prata*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(RemainingBudget.isValidRemainingBudget(\"-123.50\")); // negative remainingBudget"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // valid remainingBudget"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertTrue(RemainingBudget.isValidRemainingBudget(\"123.50\")); // valid remainingBudget"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void isOutOfBoundsTest() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // in bound remainingBudget"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(new RemainingBudget(\"10000\").isOutOfBounds()); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // out of bounds remainingBudget"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertTrue(new RemainingBudget(\"1000000000\").isOutOfBounds()); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void isEmptyRemainingBudget() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(RemainingBudget.isValidRemainingBudget(\"\")); // empty string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(RemainingBudget.isValidRemainingBudget(\" \")); // spaces only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(RemainingBudget.isValidRemainingBudget(\"           \")); // tons of spaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 58
    }
  },
  {
    "path": "src/test/java/seedu/savenus/model/wallet/WalletTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.model.wallet;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.food.Price;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class WalletTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static final Wallet EMPTYWALLET \u003d new Wallet(\"0\" , \"10\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static final Wallet RICHWALLET \u003d new Wallet(\"300\", \"10\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static final Price VALIDPRICE \u003d new Price(\"2.50\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void deduct_validPriceEnoughFunds_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        Wallet modelWallet \u003d new Wallet(RICHWALLET.getRemainingBudget(), RICHWALLET.getDaysToExpire());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            modelWallet.deduct(VALIDPRICE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertEquals(modelWallet, new Wallet(\"297.50\", \"10\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void deduct_invalidPriceEnoughFunds_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        Wallet modelWallet \u003d new Wallet(RICHWALLET.getRemainingBudget(), RICHWALLET.getDaysToExpire());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e modelWallet.deduct(new Price(\"abc\")));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void deduct_validPriceNotEnoughFunds_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        Wallet modelWallet \u003d new Wallet(EMPTYWALLET.getRemainingBudget(), EMPTYWALLET.getDaysToExpire());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertThrows(CommandException.class, Messages.MESSAGE_INSUFFICIENT_FUNDS"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                + \" to make purchase!\", () -\u003e modelWallet.deduct(VALIDPRICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 7,
      "Raikonen": 35
    }
  },
  {
    "path": "src/test/java/seedu/savenus/storage/JsonAdaptedCustomSortTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.sorter.CustomSorter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class JsonAdaptedCustomSortTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void null_adaptedCustomSort_error() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        CustomSorter sort \u003d null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                NullPointerException.class, () -\u003e new JsonAdaptedCustomSort(sort));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void invalidFields_error() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        List\u003cString\u003e fields \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        fields.add(\"invalid\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        JsonAdaptedCustomSort sorter \u003d new JsonAdaptedCustomSort(fields);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                IllegalValueException.class, () -\u003e sorter.toModelType());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 29
    }
  },
  {
    "path": "src/test/java/seedu/savenus/storage/JsonAdaptedFoodTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.storage.JsonAdaptedFood.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.TONKATSU_RAMEN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Category;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Location;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.food.OpeningHours;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Price;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.food.Restrictions;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class JsonAdaptedFoodTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private static final String INVALID_PRICE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private static final String INVALID_CATEGORY \u003d \"#\u0026*\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private static final String INVALID_LOCATION \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private static final String INVALID_OPENING_HOURS \u003d \"hours\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private static final String INVALID_RESTRICTIONS \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private static final String VALID_NAME \u003d TONKATSU_RAMEN.getName().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private static final String VALID_PRICE \u003d TONKATSU_RAMEN.getPrice().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d TONKATSU_RAMEN.getDescription().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private static final String VALID_CATEGORY \u003d TONKATSU_RAMEN.getCategory().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d TONKATSU_RAMEN.getTags().stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private static final String VALID_LOCATION \u003d \"The Deck @ NUS\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private static final String VALID_OPENING_HOURS \u003d \"0800 1800\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private static final String VALID_RESTRICTIONS \u003d \"Not halal\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void toModelType_validfoodDetails_returnsfood() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(TONKATSU_RAMEN);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertEquals(TONKATSU_RAMEN, food.toModelType());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        JsonAdaptedFood food \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                new JsonAdaptedFood(INVALID_NAME, VALID_PRICE, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                        VALID_CATEGORY, VALID_TAGS, VALID_LOCATION, VALID_OPENING_HOURS, VALID_RESTRICTIONS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(null, VALID_PRICE, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                VALID_CATEGORY, VALID_TAGS, VALID_LOCATION, VALID_OPENING_HOURS, VALID_RESTRICTIONS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void toModelType_invalidPrice_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        JsonAdaptedFood food \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                new JsonAdaptedFood(VALID_NAME, INVALID_PRICE, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                        VALID_CATEGORY, VALID_TAGS, VALID_LOCATION, VALID_OPENING_HOURS, VALID_RESTRICTIONS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String expectedMessage \u003d Price.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void toModelType_nullPrice_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(VALID_NAME, null, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                VALID_CATEGORY, VALID_TAGS, VALID_LOCATION, VALID_OPENING_HOURS, VALID_RESTRICTIONS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Price.class.getSimpleName());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void toModelType_invalidDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        JsonAdaptedFood food \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                new JsonAdaptedFood(VALID_NAME, VALID_PRICE, INVALID_DESCRIPTION,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                        VALID_CATEGORY, VALID_TAGS, VALID_LOCATION, VALID_OPENING_HOURS, VALID_RESTRICTIONS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(VALID_NAME, VALID_PRICE, null,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                VALID_CATEGORY, VALID_TAGS, VALID_LOCATION, VALID_OPENING_HOURS, VALID_RESTRICTIONS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void toModelType_invalidCategory_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        JsonAdaptedFood food \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                new JsonAdaptedFood(VALID_NAME, VALID_PRICE, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                        INVALID_CATEGORY, VALID_TAGS, VALID_LOCATION, VALID_OPENING_HOURS, VALID_RESTRICTIONS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String expectedMessage \u003d Category.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void toModelType_invalidOpeningHours_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        JsonAdaptedFood food \u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                new JsonAdaptedFood(VALID_NAME, VALID_PRICE, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        VALID_CATEGORY,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        VALID_TAGS, VALID_LOCATION, INVALID_OPENING_HOURS, VALID_RESTRICTIONS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String expectedMessage \u003d OpeningHours.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void toModelType_nullOpeningHours_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(VALID_NAME, VALID_PRICE, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                VALID_CATEGORY,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                VALID_TAGS, VALID_LOCATION, null, VALID_RESTRICTIONS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, OpeningHours.class.getSimpleName());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void toModelType_invalidRestrictions_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        JsonAdaptedFood food \u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                new JsonAdaptedFood(VALID_NAME, VALID_PRICE, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        VALID_CATEGORY,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                        VALID_TAGS, VALID_LOCATION, VALID_OPENING_HOURS, INVALID_RESTRICTIONS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String expectedMessage \u003d Restrictions.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void toModelType_nullRestrictions_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(VALID_NAME, VALID_PRICE, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                VALID_CATEGORY,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                VALID_TAGS, VALID_LOCATION, VALID_OPENING_HOURS, null);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Restrictions.class.getSimpleName());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        JsonAdaptedFood food \u003d"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                new JsonAdaptedFood(VALID_NAME, VALID_PRICE, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                        VALID_CATEGORY, invalidTags, VALID_LOCATION, VALID_OPENING_HOURS, VALID_RESTRICTIONS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(IllegalValueException.class, food::toModelType);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void toModelType_invalidLocation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        JsonAdaptedFood food \u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new JsonAdaptedFood(VALID_NAME, VALID_PRICE, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                        VALID_CATEGORY, VALID_TAGS, INVALID_LOCATION, VALID_OPENING_HOURS, VALID_RESTRICTIONS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String expectedMessage \u003d Location.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void toModelType_nullLocation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        JsonAdaptedFood food \u003d new JsonAdaptedFood(VALID_NAME, VALID_PRICE, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                VALID_CATEGORY, VALID_TAGS, null, VALID_OPENING_HOURS, VALID_RESTRICTIONS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Location.class.getSimpleName());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, food::toModelType);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 14,
      "seanlowjk": 74,
      "robytanama": 4,
      "jon-chua": 33,
      "-": 48,
      "Raikonen": 1
    }
  },
  {
    "path": "src/test/java/seedu/savenus/storage/JsonAdaptedPurchaseTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.storage.JsonAdaptedPurchase.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.CARBONARA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.purchase.Purchase;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.purchase.TimeOfPurchase;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class JsonAdaptedPurchaseTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private static final TimeOfPurchase VALID_TIMEOFPURCHASE \u003d new TimeOfPurchase(\"1570976664361\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private static final String VALID_TIMEOFPURCHASESTRING \u003d \"1570976664361\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private static final JsonAdaptedFood VALID_JSONADAPTEDFOOD \u003d new JsonAdaptedFood(CARBONARA);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void toModelType_validPurchase_returnsPurchase() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        JsonAdaptedPurchase purchase \u003d new JsonAdaptedPurchase(VALID_JSONADAPTEDFOOD, VALID_TIMEOFPURCHASESTRING);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                new Purchase(CARBONARA, VALID_TIMEOFPURCHASE),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                purchase.toModelType());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    // Validity of Food and TimeOfPurchase guaranteed with tests already."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void toModelType_nullFood_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        JsonAdaptedPurchase purchase \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                new JsonAdaptedPurchase(null, VALID_TIMEOFPURCHASESTRING);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Food.class.getSimpleName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, purchase::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void toModelType_nullTimeOfPurchase_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        JsonAdaptedPurchase purchase \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                new JsonAdaptedPurchase(VALID_JSONADAPTEDFOOD, null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, TimeOfPurchase.class.getSimpleName());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, purchase::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 48
    }
  },
  {
    "path": "src/test/java/seedu/savenus/storage/JsonAdaptedRecsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "package seedu.savenus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalRecs.DISLIKED_CATEGORY_SET;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalRecs.DISLIKED_CATEGORY_SET_STRING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalRecs.DISLIKED_LOCATION_SET;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalRecs.DISLIKED_LOCATION_SET_STRING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalRecs.DISLIKED_TAG_SET;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalRecs.DISLIKED_TAG_SET_STRING;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalRecs.INVALID_CATEGORY_SET;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalRecs.INVALID_LOCATION_SET;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalRecs.INVALID_TAG_SET;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalRecs.LIKED_CATEGORY_SET;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalRecs.LIKED_CATEGORY_SET_STRING;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalRecs.LIKED_LOCATION_SET;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalRecs.LIKED_LOCATION_SET_STRING;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalRecs.LIKED_TAG_SET;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalRecs.LIKED_TAG_SET_STRING;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Category;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Location;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.recommend.UserRecommendations;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "public class JsonAdaptedRecsTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void toModelType_validRecDetails_returnsRec() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        JsonAdaptedRecs recs \u003d new JsonAdaptedRecs(LIKED_CATEGORY_SET_STRING, LIKED_TAG_SET_STRING,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                LIKED_LOCATION_SET_STRING, DISLIKED_CATEGORY_SET_STRING,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                DISLIKED_TAG_SET_STRING, DISLIKED_LOCATION_SET_STRING);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        UserRecommendations expectedRecs \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new UserRecommendations(LIKED_CATEGORY_SET, LIKED_TAG_SET, LIKED_LOCATION_SET,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                        DISLIKED_CATEGORY_SET, DISLIKED_TAG_SET, DISLIKED_LOCATION_SET);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertEquals(recs.toModelType(), recs.toModelType());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertEquals(recs.toModelType(), expectedRecs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void toModelType_validRecDetails_jsonAdaptedRecs() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        UserRecommendations recs \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new UserRecommendations(LIKED_CATEGORY_SET, LIKED_TAG_SET, LIKED_LOCATION_SET,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                        DISLIKED_CATEGORY_SET, DISLIKED_TAG_SET, DISLIKED_LOCATION_SET);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        JsonAdaptedRecs expectedRecs \u003d new JsonAdaptedRecs(recs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertEquals(expectedRecs.toModelType(), expectedRecs.toModelType());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertEquals(expectedRecs.toModelType(), recs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void toModelType_invalidCategory_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        JsonAdaptedRecs recs \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new JsonAdaptedRecs(INVALID_CATEGORY_SET, LIKED_TAG_SET_STRING, LIKED_LOCATION_SET_STRING,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                        DISLIKED_CATEGORY_SET_STRING, DISLIKED_TAG_SET_STRING, DISLIKED_LOCATION_SET_STRING);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String expectedMessage \u003d Category.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recs::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        recs \u003d new JsonAdaptedRecs(LIKED_CATEGORY_SET_STRING, LIKED_TAG_SET_STRING, LIKED_LOCATION_SET_STRING,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                INVALID_CATEGORY_SET, DISLIKED_TAG_SET_STRING, DISLIKED_LOCATION_SET_STRING);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recs::toModelType);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void toModelType_nullCategory_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        JsonAdaptedRecs recs \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new JsonAdaptedRecs(null, LIKED_TAG_SET_STRING, LIKED_LOCATION_SET_STRING,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                        DISLIKED_CATEGORY_SET_STRING, DISLIKED_TAG_SET_STRING, DISLIKED_LOCATION_SET_STRING);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                String.format(JsonAdaptedRecs.MISSING_FIELD_MESSAGE_FORMAT, Category.class.getSimpleName());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recs::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        recs \u003d new JsonAdaptedRecs(LIKED_CATEGORY_SET_STRING, LIKED_TAG_SET_STRING, LIKED_LOCATION_SET_STRING,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                null, DISLIKED_TAG_SET_STRING, DISLIKED_LOCATION_SET_STRING);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recs::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void toModelType_overlapCategory_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        JsonAdaptedRecs recs \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new JsonAdaptedRecs(LIKED_CATEGORY_SET_STRING, LIKED_TAG_SET_STRING, LIKED_LOCATION_SET_STRING,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                        LIKED_CATEGORY_SET_STRING, DISLIKED_TAG_SET_STRING, DISLIKED_LOCATION_SET_STRING);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                String.format(JsonAdaptedRecs.DUPLICATE_ENTRY_OPPOSING_FOUND, Location.class.getSimpleName());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recs::toModelType);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void toModelType_invalidLocation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        JsonAdaptedRecs recs \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new JsonAdaptedRecs(LIKED_CATEGORY_SET_STRING, LIKED_TAG_SET_STRING, INVALID_LOCATION_SET,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                        DISLIKED_CATEGORY_SET_STRING, DISLIKED_TAG_SET_STRING, DISLIKED_LOCATION_SET_STRING);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String expectedMessage \u003d Location.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recs::toModelType);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        recs \u003d new JsonAdaptedRecs(LIKED_CATEGORY_SET_STRING, LIKED_TAG_SET_STRING, LIKED_LOCATION_SET_STRING,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                DISLIKED_CATEGORY_SET_STRING, DISLIKED_TAG_SET_STRING, INVALID_LOCATION_SET);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recs::toModelType);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void toModelType_nullLocation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        JsonAdaptedRecs recs \u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new JsonAdaptedRecs(LIKED_CATEGORY_SET_STRING, LIKED_TAG_SET_STRING, null,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                        DISLIKED_CATEGORY_SET_STRING, DISLIKED_TAG_SET_STRING, DISLIKED_LOCATION_SET_STRING);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                String.format(JsonAdaptedRecs.MISSING_FIELD_MESSAGE_FORMAT, Location.class.getSimpleName());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recs::toModelType);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        recs \u003d new JsonAdaptedRecs(LIKED_CATEGORY_SET_STRING, LIKED_TAG_SET_STRING, LIKED_LOCATION_SET_STRING,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                DISLIKED_CATEGORY_SET_STRING, DISLIKED_TAG_SET_STRING, null);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recs::toModelType);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void toModelType_overlapLocation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        JsonAdaptedRecs recs \u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new JsonAdaptedRecs(LIKED_CATEGORY_SET_STRING, LIKED_TAG_SET_STRING, LIKED_LOCATION_SET_STRING,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                        DISLIKED_CATEGORY_SET_STRING, DISLIKED_TAG_SET_STRING, LIKED_LOCATION_SET_STRING);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                String.format(JsonAdaptedRecs.DUPLICATE_ENTRY_OPPOSING_FOUND, Location.class.getSimpleName());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recs::toModelType);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        JsonAdaptedRecs recs \u003d"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new JsonAdaptedRecs(LIKED_CATEGORY_SET_STRING, INVALID_TAG_SET, LIKED_LOCATION_SET_STRING,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                        DISLIKED_CATEGORY_SET_STRING, DISLIKED_TAG_SET_STRING, DISLIKED_LOCATION_SET_STRING);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String expectedMessage \u003d Tag.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recs::toModelType);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        recs \u003d new JsonAdaptedRecs(LIKED_CATEGORY_SET_STRING, LIKED_TAG_SET_STRING, LIKED_LOCATION_SET_STRING,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                DISLIKED_CATEGORY_SET_STRING, INVALID_TAG_SET, DISLIKED_LOCATION_SET_STRING);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recs::toModelType);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void toModelType_nullTag_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        JsonAdaptedRecs recs \u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new JsonAdaptedRecs(LIKED_CATEGORY_SET_STRING, null, LIKED_LOCATION_SET_STRING,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                        DISLIKED_CATEGORY_SET_STRING, DISLIKED_TAG_SET_STRING, DISLIKED_LOCATION_SET_STRING);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                String.format(JsonAdaptedRecs.MISSING_FIELD_MESSAGE_FORMAT, Tag.class.getSimpleName());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recs::toModelType);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        recs \u003d new JsonAdaptedRecs(LIKED_CATEGORY_SET_STRING, LIKED_TAG_SET_STRING, LIKED_LOCATION_SET_STRING,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                DISLIKED_CATEGORY_SET_STRING, null, DISLIKED_LOCATION_SET_STRING);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recs::toModelType);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void toModelType_overlapTag_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        JsonAdaptedRecs recs \u003d"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                new JsonAdaptedRecs(LIKED_CATEGORY_SET_STRING, LIKED_TAG_SET_STRING, LIKED_LOCATION_SET_STRING,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                        DISLIKED_CATEGORY_SET_STRING, LIKED_TAG_SET_STRING, DISLIKED_LOCATION_SET_STRING);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                String.format(JsonAdaptedRecs.DUPLICATE_ENTRY_OPPOSING_FOUND, Location.class.getSimpleName());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, recs::toModelType);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jon-chua": 166
    }
  },
  {
    "path": "src/test/java/seedu/savenus/storage/JsonAdaptedWalletTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.storage.JsonAdaptedWallet.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.DaysToExpire;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.RemainingBudget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.Wallet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class JsonAdaptedWalletTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void toModelType_validWallet_returnsWallet() throws Exception {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        JsonAdaptedWallet wallet \u003d new JsonAdaptedWallet(\"100\", \"30\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertEquals(new Wallet(\"100\", \"30\"), wallet.toModelType());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void toModelType_invalidBudgetAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        JsonAdaptedWallet wallet \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                new JsonAdaptedWallet(\"abc\", \"30\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        String expectedMessage \u003d RemainingBudget.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, wallet::toModelType);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void toModelType_nullBudgetAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        JsonAdaptedWallet wallet \u003d new JsonAdaptedWallet(null, \"30\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, RemainingBudget.class.getSimpleName());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, wallet::toModelType);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void toModelType_invalidBudgetDuration_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        JsonAdaptedWallet wallet \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                new JsonAdaptedWallet(\"100\", \"abc\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        String expectedMessage \u003d DaysToExpire.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, wallet::toModelType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void toModelType_nullBudgetDuration_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        JsonAdaptedWallet wallet \u003d new JsonAdaptedWallet(\"100\", null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, DaysToExpire.class.getSimpleName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, wallet::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 51
    }
  },
  {
    "path": "src/test/java/seedu/savenus/storage/JsonCustomSortStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "package seedu.savenus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.sorter.CustomSorter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class JsonCustomSortStorageTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            \"test\", \"data\", \"JsonCustomSortStorageTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void readFields_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readFields(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private java.util.Optional\u003cCustomSorter\u003e readFields(String filePath) throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return new JsonCustomSortStorage(Paths.get(filePath)).readFields(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private java.util.Optional\u003cCustomSorter\u003e readFields() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return new JsonCustomSortStorage(TEST_DATA_FOLDER).readFields();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertFalse(readFields(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void dataConversion_error() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFields());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFields(\"notJsonFormatCustomSort.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void readMenu_invalidAndValidRecs_throwDataConversionException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readFields(\"invalidCustomSorter.json\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private void saveFields(CustomSorter sort, String filePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            new JsonCustomSortStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    .saveFields(sort, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Saves {@code addressBook}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private void saveFields(CustomSorter sort) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            new JsonCustomSortStorage(TEST_DATA_FOLDER)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                    .saveFields(sort);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void saveFields_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        CustomSorter sort \u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveFields(new CustomSorter(), null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveFields(sort));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "seanlowjk": 91
    }
  },
  {
    "path": "src/test/java/seedu/savenus/storage/JsonMenuStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.BEE_HOON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.CARBONARA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.FISHBALL_NOODLES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.getTypicalMenu;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Menu;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.ReadOnlyMenu;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class JsonMenuStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonMenuStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void readMenu_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readMenu(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private java.util.Optional\u003cReadOnlyMenu\u003e readMenu(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return new JsonMenuStorage(Paths.get(filePath)).readMenu(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertFalse(readMenu(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readMenu(\"notJsonFormatMenu.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void readMenu_invalidfoodMenu_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readMenu(\"invalidFoodMenu.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void readMenu_invalidAndValidfoodMenu_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readMenu(\"invalidAndValidFoodMenu.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void readAndSaveMenu_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempMenu.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Menu original \u003d getTypicalMenu();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        JsonMenuStorage jsonMenuStorage \u003d new JsonMenuStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        jsonMenuStorage.saveMenu(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        ReadOnlyMenu readBack \u003d jsonMenuStorage.readMenu(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertEquals(original, new Menu(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        original.addFood(BEE_HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        original.removeFood(CARBONARA);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        jsonMenuStorage.saveMenu(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        readBack \u003d jsonMenuStorage.readMenu(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertEquals(original, new Menu(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        original.addFood(FISHBALL_NOODLES);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        jsonMenuStorage.saveMenu(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        readBack \u003d jsonMenuStorage.readMenu().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertEquals(original, new Menu(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void saveMenu_nullMenu_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveMenu(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private void saveMenu(ReadOnlyMenu addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            new JsonMenuStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                    .saveMenu(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void saveMenu_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveMenu(new Menu(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 40,
      "-": 66,
      "Raikonen": 4
    }
  },
  {
    "path": "src/test/java/seedu/savenus/storage/JsonPurchaseHistoryStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.BAK_KUT_TEH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.TONKATSU_RAMEN;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalPurchaseHistory.getTypicalPurchaseHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.PurchaseHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.ReadOnlyPurchaseHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.purchase.Purchase;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.purchase.TimeOfPurchase;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class JsonPurchaseHistoryStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            \"JsonPurchaseHistoryStorageTest\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private java.util.Optional\u003cReadOnlyPurchaseHistory\u003e readPurchaseHistory(String filePath) throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return new JsonPurchaseHistoryStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                .readPurchaseHistory(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void readPurchaseHistory_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readPurchaseHistory(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertFalse(readPurchaseHistory(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                DataConversionException.class, () -\u003e readPurchaseHistory(\"notJsonFormatPurchaseHistory.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void readAndSavePurchaseHistory_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempMenu.json\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        PurchaseHistory original \u003d getTypicalPurchaseHistory();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        JsonPurchaseHistoryStorage jsonPurchaseHistoryStorage \u003d new JsonPurchaseHistoryStorage(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        jsonPurchaseHistoryStorage.savePurchaseHistory(original, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        ReadOnlyPurchaseHistory readBack \u003d jsonPurchaseHistoryStorage.readPurchaseHistory(filePath).get();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        original.addPurchase(new Purchase(TONKATSU_RAMEN, new TimeOfPurchase(\"1570680000000\")));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        jsonPurchaseHistoryStorage.savePurchaseHistory(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        readBack \u003d jsonPurchaseHistoryStorage.readPurchaseHistory(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        original.addPurchase(new Purchase(BAK_KUT_TEH, new TimeOfPurchase(\"1570280000000\")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        jsonPurchaseHistoryStorage.savePurchaseHistory(original); // file path not specified"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        readBack \u003d jsonPurchaseHistoryStorage.readPurchaseHistory().get(); // file path not specified"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void saveMenu_nullPurchaseHistory_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e savePurchaseHistory(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     * Saves {@code PurchaseHistory} at the specified {@code filePath}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private void savePurchaseHistory(PurchaseHistory purchaseHistory, String filePath) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            new JsonPurchaseHistoryStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                    .savePurchaseHistory(purchaseHistory, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void saveRecs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e savePurchaseHistory(new PurchaseHistory(), null));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 103
    }
  },
  {
    "path": "src/test/java/seedu/savenus/storage/JsonRecsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "package seedu.savenus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalRecs.ADDED_ANOTHER_CATEGORY_SET;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalRecs.ADDED_ANOTHER_LOCATION_SET;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalRecs.ADDED_ANOTHER_TAG_SET;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalRecs.ADDED_CATEGORY_SET;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalRecs.ADDED_LOCATION_SET;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalRecs.ADDED_TAG_SET;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.recommend.UserRecommendations;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "public class JsonRecsStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonRecsStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void readRecs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readRecs(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private java.util.Optional\u003cUserRecommendations\u003e readRecs(String filePath) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return new JsonRecsStorage(Paths.get(filePath)).readRecs(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertFalse(readRecs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readRecs(\"notJsonFormatRecs.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void readMenu_invalidAndValidRecs_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readRecs(\"invalidAndValidRecs.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public UserRecommendations getTypicalRecs() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return new UserRecommendations();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void readAndSaveMenu_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempMenu.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        UserRecommendations original \u003d getTypicalRecs();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        JsonRecsStorage jsonRecsStorage \u003d new JsonRecsStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        jsonRecsStorage.saveRecs(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        UserRecommendations readBack \u003d jsonRecsStorage.readRecs(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        original.addLikes(ADDED_CATEGORY_SET, ADDED_TAG_SET, ADDED_LOCATION_SET);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        jsonRecsStorage.saveRecs(original, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        readBack \u003d jsonRecsStorage.readRecs(filePath).get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        original.addDislikes(ADDED_ANOTHER_CATEGORY_SET, ADDED_ANOTHER_TAG_SET, ADDED_ANOTHER_LOCATION_SET);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        jsonRecsStorage.saveRecs(original); // file path not specified"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        readBack \u003d jsonRecsStorage.readRecs().get(); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void saveMenu_nullRecs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveRecs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private void saveRecs(UserRecommendations recs, String filePath) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            new JsonRecsStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                    .saveRecs(recs, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void saveRecs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveRecs(new UserRecommendations(), null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jon-chua": 109
    }
  },
  {
    "path": "src/test/java/seedu/savenus/storage/JsonSerializableMenuTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Menu;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.testutil.TypicalMenu;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class JsonSerializableMenuTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableMenuTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private static final Path TYPICAL_FOOD_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalFoodMenu.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private static final Path INVALID_FOOD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidFoodMenu.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private static final Path INVALID_WALLET_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidWalletMenu.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private static final Path DUPLICATE_FOOD_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateFoodMenu.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void toModelType_invalidFoodMenu_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        JsonSerializableMenu dataFromFile \u003d JsonUtil.readJsonFile(INVALID_FOOD_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            JsonSerializableMenu.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void toModelType_invalidWalletMenu_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        JsonSerializableMenu dataFromFile \u003d JsonUtil.readJsonFile(INVALID_WALLET_FILE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                JsonSerializableMenu.class).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void toModelType_typicalFoodMenu_success() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        JsonSerializableMenu dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_FOOD_FILE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            JsonSerializableMenu.class).get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        Menu menuFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        Menu typicalMenu \u003d TypicalMenu.getTypicalMenu();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertEquals(menuFromFile, typicalMenu);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void toModelType_duplicateFood_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        JsonSerializableMenu dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_FOOD_FILE,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            JsonSerializableMenu.class).get();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableMenu.MESSAGE_DUPLICATE_FOOD,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            dataFromFile::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 11,
      "-": 23,
      "Raikonen": 21
    }
  },
  {
    "path": "src/test/java/seedu/savenus/storage/JsonSerializablePurchaseHistoryTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.PurchaseHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.testutil.TypicalPurchaseHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class JsonSerializablePurchaseHistoryTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            \"JsonSerializablePurchaseHistoryTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private static final Path VALID_PURCHASEHISTORY_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPurchaseHistory.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private static final Path INVALID_FOOD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidFood.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private static final Path INVALID_TIMEOFPURCHASE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidTimeOfPurchase.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void toModelType_invalidFood_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        JsonSerializablePurchaseHistory dataFromFile \u003d JsonUtil.readJsonFile(INVALID_FOOD_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                JsonSerializablePurchaseHistory.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void toModelType_invalidTimeOfPurchase_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        JsonSerializablePurchaseHistory dataFromFile \u003d JsonUtil.readJsonFile(INVALID_TIMEOFPURCHASE_FILE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                JsonSerializablePurchaseHistory.class).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void toModelType_validPurchaseHistory_success() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        JsonSerializablePurchaseHistory dataFromFile \u003d JsonUtil.readJsonFile(VALID_PURCHASEHISTORY_FILE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                JsonSerializablePurchaseHistory.class).get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        PurchaseHistory purchaseHistoryFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        PurchaseHistory typicalPurchaseHistory \u003d TypicalPurchaseHistory.getTypicalPurchaseHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertEquals(purchaseHistoryFromFile, typicalPurchaseHistory);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 47
    }
  },
  {
    "path": "src/test/java/seedu/savenus/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        userPrefs.setMenuFilePath(Paths.get(\"savenus-menu.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 5,
      "-": 117,
      "Raikonen": 1
    }
  },
  {
    "path": "src/test/java/seedu/savenus/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.getTypicalMenu;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalPurchaseHistory.getTypicalPurchaseHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.testutil.TypicalRecs.getTypicalRecs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Menu;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.PurchaseHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.ReadOnlyMenu;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.ReadOnlyPurchaseHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.recommend.UserRecommendations;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.savings.JsonSavingsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import seedu.savenus.model.sorter.CustomSorter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        JsonMenuStorage menuStorage \u003d new JsonMenuStorage(getTempFilePath(\"menuTemp\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        JsonSavingsStorage savingsStorage \u003d new JsonSavingsStorage(getTempFilePath(\"savingsTemp\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        JsonRecsStorage userRecsStorage \u003d new JsonRecsStorage(getTempFilePath(\"recs\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        JsonPurchaseHistoryStorage purchaseHistoryStorage \u003d new JsonPurchaseHistoryStorage("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "                getTempFilePath(\"purchases\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        JsonCustomSortStorage customSortStorage \u003d new JsonCustomSortStorage(getTempFilePath(\"sort\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        storageManager \u003d new StorageManager(menuStorage, userPrefsStorage, userRecsStorage,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "                purchaseHistoryStorage, customSortStorage, savingsStorage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void menuReadSave() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "         * {@link JsonMenuStorage} class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonMenuStorageTest} class."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Menu original \u003d getTypicalMenu();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        storageManager.saveMenu(original);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        ReadOnlyMenu retrieved \u003d storageManager.readMenu().get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertEquals(original, new Menu(retrieved));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public void purchaseHistoryReadSave() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "         * {@link JsonPurchaseHistoryStorage} class."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonPurchaseHistoryStorage} class."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "         */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        PurchaseHistory original \u003d getTypicalPurchaseHistory();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        storageManager.savePurchaseHistory(original);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        ReadOnlyPurchaseHistory retrieved \u003d storageManager.readPurchaseHistory().get();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        assertEquals(original, new PurchaseHistory(retrieved));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void newUserRecommendationsSave() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        UserRecommendations recommendations \u003d new UserRecommendations();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        storageManager.saveRecs(recommendations);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        UserRecommendations retrieved \u003d storageManager.readRecs().get();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(recommendations, retrieved);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void newCustomSortSave() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        CustomSorter sorter \u003d new CustomSorter();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        storageManager.saveFields(sorter);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        CustomSorter theSorter \u003d storageManager.readFields().get();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertEquals(theSorter, sorter);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public void recsReadSave() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "         * {@link JsonRecsStorage} class."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonRecsStorageTest} class."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "         */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        UserRecommendations original \u003d getTypicalRecs();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        storageManager.saveRecs(original);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        UserRecommendations retrieved \u003d storageManager.readRecs().get();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertNotNull(storageManager.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public void getMenuFilePath() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        assertNotNull(storageManager.getMenuFilePath());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void getRecsFilePath() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertNotNull(storageManager.getRecsFilePath());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public void getSortFilePath() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        assertNotNull(storageManager.getSortFilePath());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 19,
      "seanlowjk": 33,
      "jon-chua": 12,
      "-": 54,
      "Raikonen": 19
    }
  },
  {
    "path": "src/test/java/seedu/savenus/testutil/Assert.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/savenus/testutil/EditFoodDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.EditCommand.EditFoodDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Location;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.OpeningHours;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Price;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Restrictions;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * A utility class to help with building EditFoodDescriptor objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class EditFoodDescriptorBuilder {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private EditFoodDescriptor descriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public EditFoodDescriptorBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        descriptor \u003d new EditFoodDescriptor();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public EditFoodDescriptorBuilder(EditFoodDescriptor descriptor) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.descriptor \u003d new EditFoodDescriptor(descriptor);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns an {@code EditFoodDescriptor} with fields containing {@code food}\u0027s details"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public EditFoodDescriptorBuilder(Food food) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        descriptor \u003d new EditFoodDescriptor();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        descriptor.setName(food.getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        descriptor.setPrice(food.getPrice());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        descriptor.setDescription(food.getDescription());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        descriptor.setCategory(food.getCategory());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        descriptor.setTags(food.getTags());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        descriptor.setLocation(food.getLocation());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        descriptor.setOpeningHours(food.getOpeningHours());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        descriptor.setRestrictions(food.getRestrictions());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Sets the {@code Name} of the {@code EditFoodDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public EditFoodDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Sets the {@code Price} of the {@code EditFoodDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public EditFoodDescriptorBuilder withPrice(String price) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        descriptor.setPrice(new Price(price));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Sets the {@code Description} of the {@code EditFoodDescriptor} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public EditFoodDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Sets the {@code Category} of the {@code EditFoodDescriptor} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public EditFoodDescriptorBuilder withCategory(String category) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        descriptor.setCategory(new Category(category));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditFoodDescriptor}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public EditFoodDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Sets the {@code Location} of the {@code EditFoodDescriptor} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public EditFoodDescriptorBuilder withLocation(String location) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        descriptor.setLocation(new Location(location));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Sets the {@code OpeningHours} of the {@code EditFoodDescriptor} that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public EditFoodDescriptorBuilder withOpeningHours(String openingHours) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        descriptor.setOpeningHours(new OpeningHours(openingHours));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Sets the {@code Restrictions} of the {@code EditFoodDescriptor} that we are building."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public EditFoodDescriptorBuilder withRestrictions(String restrictions) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        descriptor.setRestrictions(new Restrictions(restrictions));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public EditFoodDescriptor build() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 10,
      "seanlowjk": 75,
      "robytanama": 18,
      "jon-chua": 14
    }
  },
  {
    "path": "src/test/java/seedu/savenus/testutil/FoodBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Category;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Location;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.OpeningHours;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Price;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Restrictions;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * A utility class to help with building Food objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class FoodBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static final String DEFAULT_PRICE \u003d \"2.55\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Test Description.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final String DEFAULT_CATEGORY \u003d \"Test Category\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String DEFAULT_LOCATION \u003d \"Test Location\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String DEFAULT_OPENING_HOURS \u003d \"0800 1800\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public static final String DEFAULT_RESTRICTIONS \u003d \"Test Restrictions\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Price price;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    private Category category;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private OpeningHours openingHours;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    private Restrictions restrictions;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public FoodBuilder() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        price \u003d new Price(DEFAULT_PRICE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        category \u003d new Category(DEFAULT_CATEGORY);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        location \u003d new Location(DEFAULT_LOCATION);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        openingHours \u003d new OpeningHours(DEFAULT_OPENING_HOURS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        restrictions \u003d new Restrictions(DEFAULT_RESTRICTIONS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Initializes the FoodBuilder with the data of {@code foodToCopy}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public FoodBuilder(Food foodToCopy) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        name \u003d foodToCopy.getName();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        price \u003d foodToCopy.getPrice();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        description \u003d foodToCopy.getDescription();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        category \u003d foodToCopy.getCategory();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(foodToCopy.getTags());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        location \u003d foodToCopy.getLocation();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        openingHours \u003d foodToCopy.getOpeningHours();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        restrictions \u003d foodToCopy.getRestrictions();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Sets the {@code Name} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public FoodBuilder withName(String name) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Food} that we are building."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public FoodBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Sets the {@code Price} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public FoodBuilder withPrice(String price) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.price \u003d new Price(price);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Sets the {@code Description} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public FoodBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Sets the {@code Category} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public FoodBuilder withCategory(String category) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        this.category \u003d new Category(category);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     * Sets the {@code Location} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public FoodBuilder withLocation(String location) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        this.location \u003d new Location(location);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Sets the {@code OpeningHours} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public FoodBuilder withOpeningHours(String openingHours) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        this.openingHours \u003d new OpeningHours(openingHours);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     * Sets the {@code Restrictions} of the {@code Food} that we are building."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "robytanama"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    public FoodBuilder withRestrictions(String restrictions) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        this.restrictions \u003d new Restrictions(restrictions);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "robytanama"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "robytanama"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public Food build() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return new Food(name, price, description, category, tags, location, openingHours, restrictions);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 10,
      "seanlowjk": 30,
      "robytanama": 24,
      "jon-chua": 21,
      "-": 46,
      "Raikonen": 1
    }
  },
  {
    "path": "src/test/java/seedu/savenus/testutil/FoodUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_OPENING_HOURS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_RESTRICTIONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.logic.commands.EditCommand.EditFoodDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * A utility class for Food."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "public class FoodUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns an add command string for adding the {@code food}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static String getAddCommand(Food food) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getfoodDetails(food);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns the part of command string for the given {@code food}\u0027s details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static String getfoodDetails(Food food) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        sb.append(PREFIX_NAME + food.getName().fullName + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        sb.append(PREFIX_PRICE + food.getPrice().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + food.getDescription().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        sb.append(PREFIX_CATEGORY + food.getCategory().category + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        food.getTags().stream().forEach("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        sb.append(PREFIX_LOCATION + food.getLocation().location + \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        sb.append(PREFIX_OPENING_HOURS + food.getOpeningHours().openingHours + \" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        sb.append(PREFIX_RESTRICTIONS + food.getRestrictions().restrictions + \" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns the part of command string for the given {@code EditFoodDescriptor}\u0027s details."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static String getEditFoodDescriptorDetails(EditFoodDescriptor descriptor) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        descriptor.getPrice().ifPresent(price -\u003e sb.append(PREFIX_PRICE).append(price.value).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        descriptor.getDescription().ifPresent(description -\u003e sb.append(PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .append(description.value).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        descriptor.getCategory().ifPresent(category -\u003e sb.append(PREFIX_CATEGORY)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "                .append(category.category).append(\" \"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        descriptor.getLocation().ifPresent(location -\u003e sb.append(PREFIX_LOCATION)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                .append(location.location).append(\" \"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        descriptor.getOpeningHours().ifPresent(openingHours -\u003e sb.append(PREFIX_OPENING_HOURS)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                .append(openingHours.openingHours).append(\" \"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "robytanama"
        },
        "content": "        descriptor.getRestrictions().ifPresent(restrictions -\u003e sb.append(PREFIX_RESTRICTIONS)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "robytanama"
        },
        "content": "                .append(restrictions.restrictions).append(\" \"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 12,
      "seanlowjk": 16,
      "robytanama": 6,
      "jon-chua": 7,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/savenus/testutil/MenuBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Menu;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * A utility class to help with building Menu objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " *     {@code Menu menu \u003d new MenuBuilder().withfood(\"nasi\", \"lemak\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "public class MenuBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    private Menu menu;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public MenuBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        menu \u003d new Menu();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public MenuBuilder(Menu menu) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        this.menu \u003d menu;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Adds a new {@code Food} to the {@code Menu} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public MenuBuilder withfood(Food food) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        menu.addFood(food);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "fatclarence"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public Menu build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return menu;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 34
    }
  },
  {
    "path": "src/test/java/seedu/savenus/testutil/SerializableTestClass.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/savenus/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns the middle index of the food in the {@code model}\u0027s food list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFoodList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns the last index of the food in the {@code model}\u0027s food list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return Index.fromOneBased(model.getFilteredFoodList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "     * Returns the food in the {@code model}\u0027s food list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static Food getFood(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        return model.getFilteredFoodList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 5,
      "seanlowjk": 6,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/savenus/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final Index INDEX_FIRST_FOOD \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final Index INDEX_SECOND_FOOD \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static final Index INDEX_THIRD_FOOD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 2,
      "seanlowjk": 3,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/savenus/testutil/TypicalMenu.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_CATEGORY_CHICKEN_RICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_CATEGORY_NASI_LEMAK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_DESCRIPTION_CHICKEN_RICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_DESCRIPTION_NASI_LEMAK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_LOCATION_CHICKEN_RICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_LOCATION_NASI_LEMAK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_NAME_CHICKEN_RICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_NAME_NASI_LEMAK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_OPENING_HOURS_CHICKEN_RICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_OPENING_HOURS_NASI_LEMAK;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_PRICE_CHICKEN_RICE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_PRICE_NASI_LEMAK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_RESTRICTIONS_CHICKEN_RICE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_RESTRICTIONS_NASI_LEMAK;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_TAG_CHICKEN;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.logic.commands.CommandTestUtil.VALID_TAG_RICE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.Menu;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.model.food.Food;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.wallet.Wallet;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": " * A utility class containing a list of {@code Food} objects to be used in tests."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class TypicalMenu {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final Food CARBONARA \u003d new FoodBuilder().withName(\"Carbonara\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            .withDescription(\"Italian noodle with cheese and meat\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            .withPrice(\"5.00\").withCategory(\"Italian\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            .withTags(\"Noodle\").withLocation(\"The Deck\").withOpeningHours(\"0800 1700\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            .withRestrictions(\"Contains dairy and pork\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final Food TONKATSU_RAMEN \u003d new FoodBuilder().withName(\"Tonkotsu Ramen\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            .withPrice(\"11.00\").withDescription(\"Japanese noodle with pork\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            .withCategory(\"Japanese\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            .withTags(\"Noodle\", \"Asian\").withLocation(\"Frontier Canteen\").withOpeningHours(\"0800 1800\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            .withRestrictions(\"Contains pork\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final Food BAK_KUT_TEH \u003d new FoodBuilder().withName(\"Bak Kut Teh\").withPrice(\"10.00\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            .withCategory(\"Chinese\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            .withDescription(\"Chinese pork soup with spices\").withTags(\"Asian\").withLocation(\"University Town\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            .withOpeningHours(\"0800 1800\").withRestrictions(\"Contains pork\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final Food TEH_PING \u003d new FoodBuilder().withName(\"Teh Ping\").withPrice(\"1.50\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            .withCategory(\"Chinese\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            .withDescription(\"Really good tea\").withTags(\"Tea\", \"Leaves\").withLocation(\"Cool Spot\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            .withOpeningHours(\"0000 2359\").withRestrictions(\"May cause cancer\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final Food MALA_XIANG_GUO \u003d new FoodBuilder().withName(\"Mala Xiang Guo\").withPrice(\"15.00\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            .withCategory(\"Chinese\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            .withDescription(\"Spicy chinese food\").withTags(\"Spicy\", \"Vegetables\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            .withLocation(\"Liang Ban Kung Fu at The Deck\").withOpeningHours(\"0800 1930\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            .withRestrictions(\"Not halal\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final Food WAGYU_DONBURI \u003d new FoodBuilder().withName(\"Wagyu Donburi with Teh\").withPrice(\"17.99\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            .withCategory(\"Japanese\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            .withDescription(\"Japanese rice with wagyu beef, with tea\").withTags(\"Expensive\", \"Beef\", \"Luxury\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            .withLocation(\"Atas Place in NUS\").withOpeningHours(\"1000 1700\").withRestrictions(\"Expensive\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final Food NASI_AYAM \u003d new FoodBuilder().withName(\"Nasi Ayam\").withPrice(\"4.80\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            .withCategory(\"Malay\").withDescription(\"Fatty rice with chicken\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "            .withTags(\"Chicken\", \"Roasted\", \"Steamed\").withLocation(\"Techno Edge\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            .withOpeningHours(\"0900 1700\").withRestrictions(\"Halal\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final Food BEE_HOON \u003d new FoodBuilder().withName(\"Bee Hoon\").withPrice(\"3.20\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            .withCategory(\"Chinese\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            .withDescription(\"Thin chinese noodles\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final Food FISHBALL_NOODLES \u003d new FoodBuilder().withName(\"Fishball noodles\").withPrice(\"2.99\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            .withCategory(\"Chinese\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "robytanama"
        },
        "content": "            .withDescription(\"Chinese square noodles with fishballs\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    // Manually added - Food\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final Food CHICKEN_RICE \u003d new FoodBuilder().withName(VALID_NAME_CHICKEN_RICE)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            .withPrice(VALID_PRICE_CHICKEN_RICE)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_CHICKEN_RICE).withCategory(VALID_CATEGORY_CHICKEN_RICE)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            .withTags(VALID_TAG_RICE).withLocation(VALID_LOCATION_CHICKEN_RICE)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            .withOpeningHours(VALID_OPENING_HOURS_CHICKEN_RICE)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            .withRestrictions(VALID_RESTRICTIONS_CHICKEN_RICE).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static final Food NASI_LEMAK \u003d new FoodBuilder().withName(VALID_NAME_NASI_LEMAK)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            .withPrice(VALID_PRICE_NASI_LEMAK)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_NASI_LEMAK).withCategory(VALID_CATEGORY_NASI_LEMAK)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            .withTags(VALID_TAG_CHICKEN, VALID_TAG_RICE).withLocation(VALID_LOCATION_NASI_LEMAK)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            .withOpeningHours(VALID_OPENING_HOURS_NASI_LEMAK)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            .withRestrictions(VALID_RESTRICTIONS_NASI_LEMAK).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private TypicalMenu() {} // prevents instantiation"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "     * Returns an {@code Menu} with all the typical foods."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "    public static Menu getTypicalMenu() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        Menu menu \u003d new Menu();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "        for (Food food : getTypicalFood()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "            menu.addFood(food);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        menu.setWallet(new Wallet(\"100.00\", \"30\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return menu;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "seanlowjk"
        },
        "content": "    public static List\u003cFood\u003e getTypicalFood() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "        .asList(CARBONARA, TONKATSU_RAMEN, BAK_KUT_TEH, TEH_PING, MALA_XIANG_GUO, WAGYU_DONBURI, NASI_AYAM));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 45,
      "seanlowjk": 4,
      "robytanama": 15,
      "jon-chua": 13,
      "-": 23,
      "Raikonen": 6
    }
  },
  {
    "path": "src/test/java/seedu/savenus/testutil/TypicalPurchaseHistory.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "package seedu.savenus.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.CARBONARA;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import static seedu.savenus.testutil.TypicalMenu.WAGYU_DONBURI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.PurchaseHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.purchase.Purchase;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "import seedu.savenus.model.purchase.TimeOfPurchase;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " * A utility class containing a list of {@code Purchase} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Raikonen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "public class TypicalPurchaseHistory {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private static final TimeOfPurchase VALID_TIMEOFPURCHASE_1 \u003d new TimeOfPurchase(\"1570680000000\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private static final TimeOfPurchase VALID_TIMEOFPURCHASE_2 \u003d new TimeOfPurchase(\"1570976664361\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    private TypicalPurchaseHistory() {} // prevents instantiation"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Raikonen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    public static PurchaseHistory getTypicalPurchaseHistory() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        PurchaseHistory purchaseHistory \u003d new PurchaseHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        purchaseHistory.addPurchase(new Purchase(CARBONARA, VALID_TIMEOFPURCHASE_1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        purchaseHistory.addPurchase(new Purchase(WAGYU_DONBURI, VALID_TIMEOFPURCHASE_2));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "        return purchaseHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Raikonen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Raikonen": 26
    }
  },
  {
    "path": "src/test/java/seedu/savenus/testutil/TypicalRecs.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "package seedu.savenus.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Category;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.food.Location;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.recommend.UserRecommendations;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "import seedu.savenus.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " * A utility class containing a list of sets to be used in recommendation tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jon-chua"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "public class TypicalRecs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String INVALID_CATEGORY \u003d \"#\u0026*\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String INVALID_LOCATION \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String VALID_LIKED_CATEGORY \u003d \"japanese\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String VALID_LIKED_TAGS \u003d \"ramen\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String VALID_LIKED_LOCATION \u003d \"the deck @ nus\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String VALID_DISLIKED_CATEGORY \u003d \"western\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String VALID_DISLIKED_TAGS \u003d \"healthy\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final String VALID_DISLIKED_LOCATION \u003d \"the terrace @ nus\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final Set\u003cString\u003e LIKED_CATEGORY_SET_STRING \u003d new HashSet\u003c\u003e() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            add(VALID_LIKED_CATEGORY);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    };"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final Set\u003cString\u003e LIKED_TAG_SET_STRING \u003d new HashSet\u003c\u003e() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            add(VALID_LIKED_TAGS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    };"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final Set\u003cString\u003e LIKED_LOCATION_SET_STRING \u003d new HashSet\u003c\u003e() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            add(VALID_LIKED_LOCATION);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    };"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final Set\u003cCategory\u003e LIKED_CATEGORY_SET \u003d new HashSet\u003c\u003e() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            add(new Category(VALID_LIKED_CATEGORY));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    };"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final Set\u003cTag\u003e LIKED_TAG_SET \u003d new HashSet\u003c\u003e() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            add(new Tag(VALID_LIKED_TAGS));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    };"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final Set\u003cLocation\u003e LIKED_LOCATION_SET \u003d new HashSet\u003c\u003e() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            add(new Location(VALID_LIKED_LOCATION));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    };"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final Set\u003cString\u003e DISLIKED_CATEGORY_SET_STRING \u003d new HashSet\u003c\u003e() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            add(VALID_DISLIKED_CATEGORY);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    };"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final Set\u003cString\u003e DISLIKED_TAG_SET_STRING \u003d new HashSet\u003c\u003e() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            add(VALID_DISLIKED_TAGS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    };"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final Set\u003cString\u003e DISLIKED_LOCATION_SET_STRING \u003d new HashSet\u003c\u003e() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            add(VALID_DISLIKED_LOCATION);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    };"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final Set\u003cCategory\u003e DISLIKED_CATEGORY_SET \u003d new HashSet\u003c\u003e() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            add(new Category(VALID_DISLIKED_CATEGORY));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    };"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final Set\u003cTag\u003e DISLIKED_TAG_SET \u003d new HashSet\u003c\u003e() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            add(new Tag(VALID_DISLIKED_TAGS));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    };"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final Set\u003cLocation\u003e DISLIKED_LOCATION_SET \u003d new HashSet\u003c\u003e() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            add(new Location(VALID_DISLIKED_LOCATION));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    };"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final Set\u003cString\u003e INVALID_CATEGORY_SET \u003d new HashSet\u003c\u003e() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            add(INVALID_CATEGORY);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    };"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final Set\u003cString\u003e INVALID_TAG_SET \u003d new HashSet\u003c\u003e() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            add(INVALID_TAG);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    };"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final Set\u003cString\u003e INVALID_LOCATION_SET \u003d new HashSet\u003c\u003e() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            add(INVALID_LOCATION);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    };"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final Set\u003cCategory\u003e ADDED_CATEGORY_SET \u003d new HashSet\u003c\u003e() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            add(new Category(\"added category\"));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    };"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final Set\u003cTag\u003e ADDED_TAG_SET \u003d new HashSet\u003c\u003e() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            add(new Tag(\"newtag\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    };"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final Set\u003cLocation\u003e ADDED_LOCATION_SET \u003d new HashSet\u003c\u003e() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            add(new Location(\"new location\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    };"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final Set\u003cCategory\u003e ADDED_ANOTHER_CATEGORY_SET \u003d new HashSet\u003c\u003e() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            add(new Category(\"another added category\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    };"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final Set\u003cTag\u003e ADDED_ANOTHER_TAG_SET \u003d new HashSet\u003c\u003e() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            add(new Tag(\"newtag1234567890\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    };"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final Set\u003cLocation\u003e ADDED_ANOTHER_LOCATION_SET \u003d new HashSet\u003c\u003e() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "            add(new Location(\"another location\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    };"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jon-chua"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    public static final UserRecommendations getTypicalRecs() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "        return new UserRecommendations(LIKED_CATEGORY_SET, LIKED_TAG_SET, LIKED_LOCATION_SET,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "                DISLIKED_CATEGORY_SET, DISLIKED_TAG_SET, DISLIKED_LOCATION_SET);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jon-chua"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jon-chua": 144
    }
  },
  {
    "path": "src/test/java/seedu/savenus/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/savenus/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "package seedu.savenus.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import static seedu.savenus.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "import seedu.savenus.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003c?import seedu.savenus.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "fatclarence"
        },
        "content": "\u003cfx:root type\u003d\"seedu.savenus.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "fatclarence": 1,
      "-": 5
    }
  }
]
