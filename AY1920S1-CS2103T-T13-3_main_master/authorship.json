[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\u003d treasurerPro"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "https://travis-ci.com/AY1920S1-CS2103T-T13-3/main[image:https://travis-ci.com/AY1920S1-CS2103T-T13-3/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-T13-3/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-T13-3/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* This is a desktop application called treasurerPro (tP)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "* It is aimed towards Co-curricular Activities Treasurers to help them better manage finances and reimbursements to members."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "* It makes planning and budgeting events much easier with everything consolidated in one application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by _Marco Jakob_."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "* AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 1,
      "kangyeelim": 5,
      "CoderStellaJ": 3,
      "-": 24
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "run {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\tstandardInput \u003d System.in"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 6,
      "-": 155
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "treasurerPro (tP) was developed by the CS2103T T13-3 team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\u003d\u003d Project Team Members"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003d\u003d\u003d Daniel Wong"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "image::dawo5010.png[width\u003d\"150\",align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "{empty}[https://dawo.me/[homepage]] [https://github.com/dawo5010[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Responsibilities: In charge of Home"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003d\u003d\u003d Evon Dong"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "image::evondong.png[width\u003d\"150\",align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "{empty}[http://github.com/EvonDong[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Role: Code Quality +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Responsibilities: In charge of Cashier"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003d\u003d\u003d Lim Kang Yee"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "image::kangyeelim.png[width\u003d\"150\",align\u003d\"left\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "{empty}[http://github.com/kangyeelim[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Role: Deliverables and deadlines, Scheduling and Tracking +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Responsibilities: In charge of Transactions"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003d\u003d\u003d Michaela Tang"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "image::MichaelaTSH.png[width\u003d\"150\",align\u003d\"left\"]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "{empty}[http://github.com/MichaelaTSH[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Role: Documentation +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Responsibilities: In charge of Inventory"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003d\u003d\u003d Jin Shuyuan"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "image::coderstellaj.png[width\u003d\"150\",align\u003d\"left\"]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "{empty}[http://github.com/CoderStellaJ[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Role: Testing +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "Responsibilities: In charge of Reimbursements"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 24,
      "MichaelaTSH": 2,
      "kangyeelim": 1,
      "CoderStellaJ": 2,
      "-": 31
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-T13-3/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* *Contributing* : We welcome pull requests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "* *Email us* : You can also reach us at `danielw [at] u.nus.edu`"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 2,
      "CoderStellaJ": 2,
      "-": 4
    }
  },
  {
    "path": "docs/DevOps.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Dev Ops"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ". Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "A project often depends on third-party libraries."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "For example, Address Book depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Managing these _dependencies_ can be automated using Gradle."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 10,
      "-": 44
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "By: `CS2103T-T13-3`      Since: `September 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Given below is a quick overview of each component."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "It is responsible for,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "The `UI` component uses JavaFx UI framework."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ". `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ". This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ". The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ". The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ". In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Step 1. The user launches the application for the first time."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Step 5. The user then decides to execute the command `list`."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "We designed it this way because it no longer makes sense to redo the `add n/David ...` command."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "** Cons: Logic is duplicated twice."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "We are using `java.util.logging` package for logging."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "* has a need to manage a significant number of transactions, items in inventory and contacts"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "*Value proposition*: Provides money and reimbursement management specific for treasurers in a consolidated application"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "|`* * *` |new user |add my CCA expenses with (when, where, how much, who) details |better manage expense history"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "|`* * *` |user |add a new transactions |"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "|`* * *` |user |add a new member|"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "|`* * *` |user |add a new inventory items|"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "|`* * *` |user |delete a transaction |remove entries that I no longer need"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "|`* * *` |user |delete a member |remove members that left the CCA"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "|`* * *` |user |delete an item from inventory |remove items keyed in wrongly"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "|`* * *` |user |edit entries when user mistype, or when updates are required |not have to delete and make a new one"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "|`* * *` |user |view an overview of all transactions and sales |budget for new events and check financial health"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "|`* * *` |user |find a transaction by description |locate details of transactions without having to go through the entire list"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "|`* * *` |user |sort transactions by date, amount and alphabetical order of name of person who spent the amount |view and prioritise reimbursements of transactions"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "|`* * *` |user |an overview of the expenditure for each event| that I can keep track for future purposes or reporting to the school"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "|`* * *` |user |track individual sales at an event and tabulate total sales at the end of the day |"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "|`* * *` |user |find transactions by a single person and if reimbursment has been done|locate total amount of money to reimburse the person and keep track of reimbursements"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "|`* * *` |user |function to schedule goals and plan budget/spending |"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "|`* * *` |user |have information of the person I need to reimburse| easily find information to contact the person for reimbursement"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "|`* * *` |user|generate and export to print out overview reports of the financials| present it during board meetings and give it to other board directors"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "|`* * *` |user |have a cashier mode for another member who do sales input data directly in real time when the transaction is made | not spend extra time to collate their sales and revenue and key it in myself"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "|`* * *` |user |plan and estimate my budget for events by comparing with previous transactions|"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "|`* *` |user |can tag and see who I have to reimburse back to most urgently |"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "|`* *` |user |have a reminder pop up when I open the app of the reimbursements I have to do within this week from the current date |"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "|`*` |user |schedule deadlines in order to plan for events |"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "|`*` |user|auto complete for people already in database |know if I have to get their contact details to fill into the database later"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "|`*` |user |upload receipt proofs into the system| better check for validity of transaction and for security"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "|`*`|user |upload receipt proofs into the system| better check for validity of transaction and for security"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "(For all use cases below, the *System* is the `treasurerPro (tP)` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003d\u003d\u003d Overview Tab"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003d\u003d\u003d Use Case 1: Sets goals for expenditure, budget and sales"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "*Guarantees*"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "- Financial goals are only valid if they are a positive, non-zero amount"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "- Financial goals are aligned within a time period"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "1. The user arrives on the Overview tab"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "2. The user chooses to update the expenditure, budget or sales goal"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "3. The user keys in the amount to be set as the goal"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "4. The user keys in the period to be set for the goal (week, month, year)"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "5. The user sets the reset day/date for the goal"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "6. The overview updates with the new data"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* 2a."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "The user keys in an invalid goal to update"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "** 2a1. The system requests for a correct category to set goal for"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "** 2a2. User enters new category"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "** Steps 2a1. and 2a2. are repeated until user keys in correct data"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "+"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Use case resumes from step 3."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* 3a."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "The user keys in a negative amount"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "+"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "** 3a1. The system requests for a new, non-zero amount"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "** 3a2. User enters new amount"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "** Steps 3a1. and 3a2. are repeated until user keys in correct data"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "+"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Use case resumes from step 4"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* 4a."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "The user keys in an invalid period"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "+"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "** 4a1. The system requests for a new response"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "** 4a2. User enters period for goal"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "** Steps 4a1. and 4a2. are repeated until user keys in correct data"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "+"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Use case resumes from step 5"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* 5a."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "The user chooses an invalid reset day/date"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "+"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "** 5a1. The system requests for a new day/date"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "** 5a2. User enters new day/date"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "** Steps 5a1. and 5a2. are repeated until user keys in correct data"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "+"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Use case resumes from step 6"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003d\u003d\u003d Use Case 2: Sets reminders for expenditure limit/sales targets *Guarantees*"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "- Reminders are only valid if they are for a positive, non-zero amount"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "1. The user arrives on the Overview tab"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "2. The user chooses to set a reminder for their expense limits/sales targets"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "3. The user keys in the amount to be set as the goal"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "4. The overview updates with the new data"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "+"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* 2a."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "The user keys in an invalid goal to update"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "+"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "** 2a1. The system requests for a correct category to set goal for"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "** 2a2. User enters new category"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "** Steps 2a1. and 2a2. are repeated until user keys in correct data"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "+"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Use case resumes from step 3."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* 3a."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "The user keys in a negative amount"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "+"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "** 3a1. The system requests for a new, non-zero amount"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "** 3a2. User enters new amount"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "** Steps 3a1. and 3a2. are repeated until user keys in correct data"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "+"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Use case resumes from step 4"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003d\u003d\u003d Transaction Tab"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003d\u003d\u003d Use Case 3: Add a transaction"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "1. User type in command field"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "2. Lion replies with success message"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "*Extension*"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* 2a."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Lion replies with wrong input message"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003d\u003d\u003d Use Case 4: Delete a transaction"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "1. User type command in command field"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "2. Lion replies with a confirmation message"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "3. User types confirmation"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "4. Lion replies with success message and info on all transactions"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "*Extension*"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* 3a."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Lion replies with wrong input message"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003d\u003d\u003d Use Case 5: Edit a transaction"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "1. Type in command field"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "2. Lion replies with message"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "*Extension*"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* 2a."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Lion replies with wrong input message"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003d\u003d\u003d Use Case 6: Sort transactions"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "1. Type in command field"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "2. Lion replies with success message"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "3. List is sorted"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "*Extension*"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* 2a."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Lion replies with wrong input message"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003d\u003d\u003d Reimbursement Tab"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003d\u003d\u003d Use Case 7: Refresh and update reimbursement status"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "*Preconditions*"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "- User is on Reimbursement page"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "- Reimbursement page shows correct amount of reimbursement for each person by retrieving data from Transaction tab"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "*Guarantees*"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "- Reimbursement status is updated to “Completed” if the user confirms to update"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "1. The user goes to the ‘Reimbursement’ tab."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "2. Refresh Reimbursement records"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "3. The user chooses to update the reimbursement status for a person."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "4. System asks for confirmation"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "5. Reimbursement status is updated"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* 4a."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "User agrees to confirm"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Use case resumes from step 5"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* 4b."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "User disagrees to confirm"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "+"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003d\u003d\u003d Inventory Tab"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003d\u003d\u003d Use Case 8: Edit an item"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "*Guarantees*"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "- Index used must contain an item"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "1. Go to Inventory Tab"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "2. User types in the command line using the item’s index"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "3. Lion shows a success message and compares the old information to the new"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "*Extension*"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* 1a."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Add a cancel/undo function"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* 2a."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Add an error message if the index inputted does not have an item"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003d\u003d\u003d Use Case 9: Calculate total profit"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "*Guarantees*"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "- Item must exist in the inventory and have a cost price and price"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "1. Go to Inventory Tab"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "2. User type in the command line"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "*Extension*"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* 2a."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "If typing “total” profit, the lion returns the sum of all price minus sum of all cost price"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* 2b."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "If just typing the index, the lion returns the total profit for that item"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003d\u003d\u003d Cashier Tab"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "\u003d\u003d\u003d Use Case 10: Stores the information of transactions"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "*Guarantees*"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "- Transaction is valid only if the quantity in the inventory is more than or equal to the quantity keyed in."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "- The type of item bought is already listed in the inventory"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "1. The user arrives on the ‘Cashier’ tab."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "2. The user chooses to update the purchases made."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "3. CS requests for details of the purchase."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "4. User enters the requested details."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "5. CS process the purchase and displays the amount change, if valid."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* 4a."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "CS detects that the item is not listed in the inventory or quantity is insufficient"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "** 4a1. CS requests for valid item"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "** 4a2. User enters new item."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "** 4a3. Steps 4a1 to 4a2 are repeated until data entered are correct."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "** 4a4. Use case resumes from Step 5."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* *a."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "At any time, User chooses to cancel the purchase made."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "** *a1. CS requests for confirmation."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "** *a2. User confirms the cancellation."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "+"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ". Technical Requirements:"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* Should work on both 32-bit and 64-bit environments."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* Should be easy to navigate to other tabs"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ". Quality Requirements:"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* Should be easy to pick up and intuitive for novice user"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* The messages the lion says should be understandable and not result in information overload"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* The GUI should look neat and organised"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* Should be intuitive and easy to understand and learn for a total novice"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* Our mascot should be original or not copied"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* Clear and grammatically correct English should be used throughout the program"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ". Process Requirements:"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* Members should aim to do increments according to schedule"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* Members should sound out when help is needed in their increments"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* Members will be doing back-end first before proceeding to front-end designing"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ". Data Requirements:"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* Should be able to store sufficient data for 1 year’s worth of transactions within a CCA"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* Should be as much resistant to data loss as possible"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* Should be able to read data quickly to prevent long loading times"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "[[mainstream-os]]"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Mainstream OS::"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "[[private-contact-detail]]"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Private contact detail::"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "[[transactions]]"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "Transactions::"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "Transactions include all the expenses spent and sales made."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "[[inventory]]"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "Inventory::"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "Inventory refers to the items that are stored to be sold. It consists of item description and quantity left."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Expected: Shows the GUI with a set of sample contacts."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "The window size may not be optimum."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ".. Resize the window to an optimum size."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Move the window to a different location."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Close the window."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ".. Prerequisites: List all persons using the `list` command."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Multiple persons in the list."
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Expected: First contact is deleted from the list."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Details of the deleted contact shown in the status message."
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Expected: No person is deleted."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Error details shown in the status message."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Status bar remains the same."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "Expected: Similar to previous."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dawo5010": 1,
      "MichaelaTSH": 23,
      "EvonDong": 9,
      "kangyeelim": 43,
      "CoderStellaJ": 318,
      "-": 387
    }
  },
  {
    "path": "docs/Documentation.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Documentation"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ". Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Template"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5. These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 3,
      "-": 120
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize User Stories `[LO-UserStories]`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/userStories/[se-edu/se-book: Requirements: Specifying Requirements: User Stories]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more user stories"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* Assume you are planing to expand the functionality of the AddressBook (but keep it as a CLI application)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "What other user stories do you think AddressBook should support?"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Add those user stories to the `DeveloperGuide.adoc`."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize use cases `[LO-UseCases]`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/useCases/[se-edu/se-book: Requirements: Specifying Requirements: Use Cases]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a \u0027Rename tag\u0027 use case"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a use case to the `DeveloperGuide.adoc` to cover the case of _renaming of an existing tag_."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "e.g. rename the tag `friends` to `buddies` (i.e. all persons who had the `friends` tag will now have a `buddies` tag instead) Assume that AddressBook confirms the change with the user before carrying out the operation."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Non Functional Requirements `[LO-NFR]`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/requirements/nonFunctionalRequirements/[se-edu/se-book: Requirements: Non-Functional Requirements]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more NFRs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* Add some more NFRs to the `DeveloperGuide.adoc`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Polymorphism `[LO-Polymorphism]`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Command::execute()` method shows polymorphic behavior."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/polymorphism/[se-edu/se-book: Paradigms: OOP: Polymorphism]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/polymorphism/[se-edu/se-book: C++ to Java: OOP: Polymorphism]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a polymorphic `isMutating` method"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* Add a method `boolean isMutating()` to the `Command` class."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "This method will return `true` for command types that mutate the data. e.g. `AddCommand`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently, AddressBook data are saved to the file after every command."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Take advantage of the the new method you added to limit file saving to only for command types that mutate data."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `add` command should always save the data while `list` command should never save data to the file."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "There may be better ways to limit file saving to commands that mutate data."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "The above approach, while not optimal, will give you chance to implement a polymorphic behavior."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use abstract classes/methods `[LO-Abstract]`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/abstractClasses/[se-edu/se-book: Paradigms: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/abstractClassesAndMethods/[se-edu/se-book: C++ to Java: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Make `Command#execute()` method abstract"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* Make the `Command#execute()` method abstract (hint: refer to the comment given below the method)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use interfaces `[LO-Interfaces]`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `AddressBook` class implements the `ReadOnlyAddressBook` interface so that clients who don\u0027t need write access to the `AddressBook` can access the `AddressBook` through the `ReadOnlyAddressBook` interface instead."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "image::ReadOnlyAddressBookUsage.png[width\u003d500]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/interfaces/[se-edu/se-book: Paradigms: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/interfaces/[se-edu/se-book: C++ to Java: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a `Printable` interface"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `Printable` interface as follows."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "image::PrintableInterface.png[width\u003d400]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "* `Override` the `getPrintableString` in classes `Name`, `Phone`, `Email`, and `Address` so that each produces a printable string representation of the object. e.g. `Name: John Smith`, `Phone: 12349862`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* Add the following method in a suitable place of some other class."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Note how the method depends on the Interface."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns a concatenated version of the printable strings of each object."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "String getPrintableString(Printable... printables) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "The above method can be used to get a printable string representing a bunch of person details."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "For example, you should be able to call that method like this:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "// p is a Person object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "return getPrintableString(p.getPhone(), p.getEmail(), p.getAddress());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Follow Liskov Substitution Principle `[LO-LSP]`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/liskovSubstitutionPrinciple/[se-edu/se-book: Principles: Liskov Substitution Principle]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add an exception to an overridden method"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* Add a `throws Exception` clause to the `AddCommand::execute` method."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Notice how Java compiler will not allow it, unless you add the same `throws` clause to the parent class method."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "This is because if a child class throws an exception that is not specified by the Parent\u0027s contract, the child class is no longer substitutable in place of the parent class."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* Also note that while in the above example the compiler enforces LSP, there are other situations where it is up to the programmer to enforce it."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "For example, if the method in the parent class works for `null` input, the overridden method in the child class should not reject `null` inputs."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "This will not be enforced by the compiler."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Java-FX for GUI programming `[LO-JavaFx]`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/javaTools/javaFXBasic/[se-edu/se-book: Tools: Java: JavaFX: Basic]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance GUI"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* Do some enhancements to the AddressBook GUI. e.g. add an application icon, change font size/style"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Analyze Coupling and Cohesion of designs `[LO-CouplingCohesion]`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how having a separate `ParserUtil` class to handle user input validation, space trimming etc. of model data (an application of the Single Responsibility Principle) improves the _cohesion_ of the model component (since it does not need to be concerned with handling user input) as well as the `ParserUtil` class."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/coupling/[se-edu/se-book: Design: Design Principles: Coupling]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/cohesion/[se-edu/se-book: Design: Design Principles: Cohesion]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Identify places to reduce coupling and increase cohesion"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the design coupling can be reduced further, or cohesion can be increased further?"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "[[apply-dependency-inversion-principle-lo-dip]]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Dependency Inversion Principle `[LO-DIP]`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the `LogicManager` class doesn\u0027t depend on `StorageManager` directly, but rather the interface `Storage`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "This is an application of the Dependency Inversion Principle."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicStorageDIP.png[width\u003d300]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the code do you notice the application of DIP?"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/dependencyInversionPrinciple/[se-edu/se-book: Principles: Dependency Inversion Principle]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Dependency Injection `[LO-DI]`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how the `LogicManager` class does not depend on the `StorageManager` class, but depends on the `Storage` interface."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to use _Dependency Injection_ to test the `LogicManager` class without getting the `StorageManager` class involved."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/dependencyInjection/[se-edu/se-book: Quality Assurance: Testing: Dependency Injection]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Facilitate injecting a StorageStub"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how `LogicManagerTest` tests `LogicManager` by constructing a `StorageManager` object."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* Implement `StorageStub` such that calls to its `save*` methods do nothing (i.e. empty method body)."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* Update `LogicManagerTest` to work with the `StorageStub` instead of the actual `StorageManager` object."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `LogicManagerTest` injects a `StorageStub` object when constructing a `LogicManager` before testing it."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjection.png[width\u003d600]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "* The example above uses \u003c\u003capply-dependency-inversion-principle-lo-dip, DIP\u003e\u003e as a means to achieve DI."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Note that there is another way to inject a `StorageStub` object, as shown below."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "In this case we do not apply the DIP but we still achieve DI."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjectionWithoutDIP.png[width\u003d250]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Open-Closed Principle `[LO-OCP]`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/openClosedPrinciple/[se-edu/se-book: Principles: Open-Closed Principle]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Analyze OCP-compliance of the `LogicManager` class"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* Consider adding a new command to the Address Book. e.g. an `edit` command."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Notice how little you need to change in the `LogicManager` class to extend its behavior so that it can execute the new command."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "That is because `LogicManager` follows the OCP i.e. `LogicManager` is _open to be extended_ with more commands but _closed for modifications_."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* Is it possible to make the `AddressBookParser` class more OCP-compliant in terms of extending it to handle more command types?"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* In terms of how it saves data, is `LogicManager` more OCP-compliant due to the application of DIP as given in \u003c\u003capply-dependency-inversion-principle-lo-dip, `LO-DIP`\u003e\u003e?"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "How can you improve ``LogicManager``\u0027s OCP-compliance further so that it can not only work with different types of storages, but different number of storages (e.g. save to both a text file and a database)."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Work in a 3KLoC code base `[LO-3KLoC]`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance AddressBook"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* Enhance AddressBook in some way. e.g. add a new command"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 20,
      "-": 193
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Do not disable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ". Locate the `build.gradle` file and select it."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Click `OK`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ". Run the `seedu.address.person.Main` and try a few commands"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "To rectify,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level3` repo."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level3`), you should do the following:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocumentation#Docs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, AddressBook\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "CoderStellaJ": 11,
      "-": 78
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ". _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "e.g. `seedu.address.person.commons.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "e.g. `seedu.address.person.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ". Hybrids of unit and integration tests."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "e.g. `seedu.address.person.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 3,
      "CoderStellaJ": 3,
      "-": 47
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "By: `CS2103T-T13-3`      Since: `September 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "treasurerPro (tP) is for those who *prefer to use a desktop app for managing their club expenses*."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "More importantly, tP is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "If you can type fast, tP can get your expense management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Interested?"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Jump to the \u003c\u003cQuick Start\u003e\u003e to get started."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Enjoy!"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ". Download the latest `treasurerPro.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ". Copy the file to the folder you want to use as the home folder for your treasurerPro."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ". Double-click the file to start the app."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "e.g. typing *`go /home`* and pressing kbd:[Enter] will take you to the Home tab."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "\u003d\u003d Universal Commands"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "These are commands available within the command box for all tabs."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "\u003d\u003d\u003d Navigation: `go /TAB`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "Allows you to navigate between tabs"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* `go /home`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* `go /inventory`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* `go /reimbursement`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* `go /cashier`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* `go /overview`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "\u003d\u003d\u003d Search: `search /KEYWORD`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "Allows you to search for any item in the inventory, reimbursement, home tab with a keyword"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "\u003d\u003d Feature Specific Commands"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "These are commands that are specific to each feature which would be categorised into tabs in our application."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "\u003d\u003d\u003d Home"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* Home tab shows the transaction history of each expenditure."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* The columns will show the date/time of the transaction, description of the expenditure, category it is under, amount spent and the person who bought it."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* At the side, our mascot lion will help to give replies to indicate successful addition, deletion, edits of the command line input."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* He will also give you replies when there is a wrong input."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* There is a function to filter the transactions by date so from latest to oldest, person so by alphabetical order of the person and amount so from most to least."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* There will be autocomplete for the person according to who is in our address book database."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* To add an expense:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "`add dt/DATE_AND_TIME d/DESCRIPTION c/CATEGORY a/AMOUNT p/PERSON`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "`add dt/January 1st 2019, 07:00PM d/Printer ink c/Miscellaneous a/3.50 p/Janelle`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* To delete an expense:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "`delete INDEX` or `delete DESCRIPTION`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "** `delete 1`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "** `delete Printer ink`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* To edit:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "`edit INDEX` or `edit DESCRIPTION`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "** `edit 1`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "** `edit Printer ink`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* To sort:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "** By date: `sort d`"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "** By person: `sort p`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "** By amount: `sort a`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "\u003d\u003d\u003d Inventory"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* The inventory tab contains a detailed inventory of items belonging to the CCA for a variety of purposes. Each item will have 6 attributes: category, description, quantity, cost per unit, total cost, and price."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* The last attribute will be used for sales purposes."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* The inventory tab can be used in conjunction with the cashier tab by keeping track of the variety of items for sale and the remaining quantity of unsold products, as well as throw an error message via the lion if the cashier attempts to sell more than the specified quantity."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* To add an item:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "`add c/CATEGORY d/DESCRIPTION q/QUANTITY cu/COST_PER_UNIT p/PRICE`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "`add c/Food d/Cupcake q/100 cu/0.70 p/1.50`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* To delete an expense:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "`delete INDEX` or `delete DESCRIPTION`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "** `delete 1`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "** `delete Cupcake`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* To edit:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "`edit INDEX` or `edit DESCRIPTION`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "** `edit 1`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "** `edit Cupcake`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* To sort:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "** By category: `sort c`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "** By description: `sort d`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "** By quantity: `sort q`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "** By cost per unit: `sort cu`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "** By total cost: `sort co`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "** By price: `sort p`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "\u003d\u003d\u003d Reimbursements"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* The reimbursement page contains details of reimbursement for each CCA member."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* Each reimbursement record is represented by Person, Amount, Description and Status."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* Once the person is reimbursed, the status can be modified from Pending to Completed."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* This page helps the treasurer to directly retrieve the amount of reimbursement for each person from expenditure histories."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* This page also contains a Manage People button. Once clicked, a pop up page will come out and show all the CCA members’ information."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* To find an reimbursement:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "`find p/PERSON`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* To update status:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "`update p/PERSON`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* To add a person:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "`add p/PERSON a/BANK_ACCOUNT_NUMBER`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "\u003d\u003d\u003d Cashier"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* Cashier tab allows the cashier to key in and record the items sold from the inventory."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* The columns will show the description of the item being sold, the amount per quantity, the quantity and the items subtotal."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* At the side, just like other tabs, our mascot lion will reply and guide the user along to key in the correct inputs."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* To add an item being sold:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "`add d/DESCRIPTION q/QUANTITY`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* To delete an item being sold:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "`delete INDEX`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* To checkout:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "`checkout AMOUNT_PAID_BY_CUSTOMER`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "** If the total cost of items is greater than the amount paid, the lion will give an error message."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "** Else, the lion will state the amount receive and calculate the change."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "\u003d\u003d\u003d Overview"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* The overview tab allows for the treasurer to get an overview of the expenditure this month, the sales for the month, the inventory value remaining and the remaining budget for the club."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* At the side, the lion mascot will guide the user along to what inputs are permissible, and also offer financial advice based on the data gathered."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* To filter results by certain criteria:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "** By date range: `filter /from DATE /to DATE`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "** By category: `filter /by CATEGORY`"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* To set goals:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "** To set budget goal: `set /budget AMOUNT`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "** To set expense goal: `set /expense AMOUNT`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "** To set sales goal: `set /sales AMOUNT`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "* To notify when a certain goal has reached specific percentage of completion:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "** To set expense goal notification: `notify /expense PERCENTAGE`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "** To set budget goal notification: `notify /budget PERCENTAGE`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "** To set sales goal notification: `notify /sales PERCENTAGE`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "There is no need to save manually."
      }
    ],
    "authorContributionMap": {
      "dawo5010": 4,
      "MichaelaTSH": 116,
      "CoderStellaJ": 5,
      "-": 86
    }
  },
  {
    "path": "docs/UsingAppVeyor.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AppVeyor"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "This document was originally written for _AddressBook Level 4_ and hence its screenshots refer to `addressbook-level4`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "For use with _AddressBook Level 3_, wherever `addressbook-level4` is used in the screenshots, you should use *`addressbook-level3`*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "https://www.appveyor.com/[AppVeyor] is a _Continuous Integration_ platform for GitHub projects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "It runs its builds on Windows virtual machines."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "AppVeyor can run the project\u0027s tests automatically whenever new code is pushed to the repo."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "This ensures that existing functionality and features have not been broken on Windows by the changes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "The current AppVeyor setup runs `gradlew.bat test` whenever someone pushes code to the repo."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "If you would like to customize your AppVeyor build further, you can learn more about AppVeyor from the https://www.appveyor.com/docs/[AppVeyor Documentation]."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up AppVeyor"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork the repo to your own organization."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ". Go to https://ci.appveyor.com/, and under `Login`, click on `GitHub` to login with your GitHub account."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Enter your GitHub account details if needed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/login.png[Click on GitHub in the login page]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ". After logging in, you will be brought to your projects dashboard."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Click on `NEW PROJECT`."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/add-project-1.png[Click on \"NEW PROJECT\" in the projects dashboard]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ". You will be brought to the `Select repository` page."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Select `GitHub`."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* On your first usage of AppVeyor, you will need to give AppVeyor authorization to your GitHub account."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Click on `Authorize GitHub`."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/add-project-2.png[Click on Authorize GitHub]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* This will bring you to a GitHub page that manages the access of third-party applications to your repositories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Depending on whether you are the owner of the repository, you can either grant access:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image:grant_access.png[Grant Access]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Or request access:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "image:request_access.png[Request Access]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ". AppVeyor will then list the repositories you have access to in your GitHub account."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Find the repository you want to set AppVeyor up on, and then click `ADD`."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/add-project-3.png[Click \"Add\" on the repository you want to set AppVeyor up on]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ". AppVeyor will then be activated on that repository."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "To see the CI in action, push a commit to any branch!"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* Go to the repository and see the pushed commit."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "There should be an icon which will link you to the AppVeyor build:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/ci-pending.png[Commit build]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "* As the build is run on a remote machine, we can only examine the logs it produces:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/ci-log.png[AppVeyor build]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ". Update the link to the \"build status\" badge at the top of `README.adoc` to point to the AppVeyor build status of your own repo."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* To find your build status badge URL, first go to your project settings by clicking on the \"Settings\" icon:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/project-settings-1.png[Click on project settings]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "* Then go to the `Badges` section of your project settings by clicking on it:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/project-settings-2.png[Click on \"Badges\"]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* As AppVeyor does not provide asciidoc code for the badge, we will have to create our own."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Start by copying the markdown code provided:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "image:appveyor/project-settings-3.png[Copy the markdown code]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "The markdown code should be in this format:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[![Build status](\u003clink to image\u003e)](\u003clink to project\u003e)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Convert it to the asciidoc format as follows:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003clink to project\u003e[image:\u003clink to image\u003e[Build status]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "The asciidoc code should look similar to:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level3[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Copy and paste the asciidoc code to your `README.adoc` file."
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 21,
      "-": 82
    }
  },
  {
    "path": "docs/UsingCheckstyle.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Checkstyle-IDEA"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "This document was originally written for _AddressBook Level 4_ and hence its screenshots refer to `addressbook-level4`."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "For use with _AddressBook Level 3_, wherever `addressbook-level4` is used in the screenshots, you should use *`addressbook-level3`*."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configuring Checkstyle-IDEA"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". Install the Checkstyle-IDEA plugin by going to `File` \u003e `Settings` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS). +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Select `Plugins`, press `Browse Repository`, and find the plugin. +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Restart the IDE to complete the installation."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `File` \u003e `Settings...` \u003e `Other Settings` \u003e `Checkstyle`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ". Set `Scan Scope`  to `Only Java sources (including tests)`, so that the plugin will run checkstyle for our test source codes as well"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ". Ensure that the `Checkstyle version` is set to `8.1`."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "This is the same version that we are using inside Gradle, so that you won\u0027t get any errors due to version incompatibility"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* If `Checkstyle version` is not set to `8.1`, set it to version `8.1` and click `Apply`"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-scan-scope.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Click the plus sign under `Configuration File`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter an arbitrary description e.g. addressbook"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Use a local Checkstyle file`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the checkstyle configuration file found at `config/checkstyle/checkstyle.xml`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Next` \u003e `Finish`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Mark `Active` for the newly imported check configuration"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "image::checkstyle-idea-configuration.png[width\u003d\"700\"]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Checkstyle-IDEA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: When importing `checkstyle.xml`, Checkstyle-IDEA plugin complains that `The Checkstyle rules file could not be parsed. ... The file has been blacklisted for 60s.`**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: `checkstyle.xml` is written for a particular version, but the plugin was not configured to the correct version."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Ensure that you have selected the correct `Checkstyle version` that matches the version in `build.gradle` and have clicked `Apply`, as `checkstyle.xml` is written for Gradle\u0027s checkstyle."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: After setting up `checkstyle.xml`, Checkstyle-IDEA plugin does not seem to highlight the errors / real-time scanning seems broken.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: The plugin may not immediately run after setting it up."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Restart the IDE."
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 2,
      "-": 47
    }
  },
  {
    "path": "docs/UsingCoveralls.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Coveralls"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "This document was originally written for _AddressBook Level 4_ and hence its screenshots refer to `addressbook-level4`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "For use with _AddressBook Level 3_, wherever `addressbook-level4` is used in the screenshots, you should use *`addressbook-level3`*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/[Coveralls] is a web service that tracks code coverage over time for GitHub projects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Coveralls requires Travis CI to be set up beforehand as Travis sends the coverage report from the latest build to Coveralls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "If you have not set up Travis CI, see \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Currently, Coveralls supports Travis CI but not AppVeyor."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up Coveralls"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ". Go to https://coveralls.io/ and click `SIGN IN`."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Then click `GITHUB SIGN IN` and enter your GitHub account details if needed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ". After logging in, you will be brought to the `Your Repositories` page."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "On the site\u0027s navigation bar, click https://coveralls.io/repos/new[ADD REPOS]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Find the switch for the forked repository."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* If the organization is not shown, click `GITHUB SETTINGS` as shown below:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/github_settings.png[GitHub settings]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "This should bring you to a GitHub page that manages the access of third-party applications."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Depending on whether you are the owner of the repository, you can either grant access"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "image:grant_access.png[Grant Access]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "or request access"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "image:request_access.png[Request Access]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "to Coveralls so that it can access your repository."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* If your repository cannot be found, click `SYNC REPOS`."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/sync_repos.png[Sync repos]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Activate the switch."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Update the link of the `Coverage Status` badge at the top of your \u003c\u003cREADME#, README.adoc\u003e\u003e to point to that of your own repo by replacing the outlined areas with `your-org-name/your-repo-name`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/coverage_asciidoc_code.png[Coverage Status Badge]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ". You can now see the coverage report for your project after each Travis build by clicking on the `Coverage Status` badge."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/coverage_report.png[Coverage Report Summary]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Disabling Coveralls Automatic Comments on Pull Requests"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Coveralls automatically comments on the coverage status of the pull requests in GitHub."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "If it\u0027s a hindrance, you can disable it in the settings of your project in Coveralls:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Settings`."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ". Uncheck the `LEAVE COMMENTS?` checkbox."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Then click `SAVE CHANGES`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "image:coveralls/disable_comments.png[Disable comments,width \u003d 942]"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 12,
      "-": 57
    }
  },
  {
    "path": "docs/UsingGradle.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Gradle"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "https://gradle.org/[Gradle] is a build automation tool."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "It can automate build-related tasks such as"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* Running tests"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* Managing library dependencies"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* Analyzing code for style compliance"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "The gradle configuration for this project is defined in the _build script_ link:../build.gradle[`build.gradle`]."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "To learn more about gradle build scripts, refer https://docs.gradle.org/current/userguide/tutorial_using_tasks.html[Build Scripts Basics]."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Gradle Commands"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "To run a Gradle command, open a command window on the project folder and enter the Gradle command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Gradle commands look like this:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* On Windows: `gradlew \u003ctask1\u003e \u003ctask2\u003e ...` e.g. `gradlew clean test`"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* On Mac/Linux: `./gradlew \u003ctask1\u003e \u003ctask2\u003e...` e.g."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "`./gradlew clean test`"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "If you do not specify any tasks, Gradlew will run the default tasks `clean` `test` `coverage`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Cleaning the Project"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* *`clean`* +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the files created during the previous build tasks (e.g. files in the `build` folder). e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*`clean` to force Gradle to execute a task*: +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "When running a Gradle task, Gradle will try to figure out if the task needs running at all."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "If Gradle determines that the output of the task will be same as the previous time, it will not run the task."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "For example, it will not build the JAR file again if the relevant source files have not changed since the last time the JAR file was built."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "If we want to force Gradle to run a task, we can combine that task with `clean`."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Once the build files have been `clean` ed, Gradle has no way to determine if the output will be same as before, so it will be forced to execute the task."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Creating the JAR file"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* *`shadowJar`* +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "Creates the `addressbook.jar` file in the `build/jar` folder, _if the current file is outdated_. +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew shadowJar`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "To force Gradle to create the JAR file even if the current one is up-to-date, you can \u0027`clean`\u0027 first. +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `./gradlew clean shadowJar`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "*Why do we create a fat JAR?* If we package only our own class files into the JAR file, it will not work properly unless the user has all the other JAR files (i.e. third party libraries) our classes depend on, which is rather inconvenient."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Therefore, we package all dependencies into a single JAR files, creating what is also known as a _fat_ JAR file."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "To create a fat JAR file, we use the Gradle plugin https://github.com/johnrengelman/shadow[shadow jar]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Rendering AsciiDoc files"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* **`asciidoctor`** +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Converts AsciiDoc files in `docs` to HTML format."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Generated HTML files can be found in `build/docs`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "* **`deployOfflineDocs`** +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Updates the offline user guide, and its associated files, used by the Help window in the application."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Deployed HTML files and images can be found in `src/main/resources/docs`."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running the application"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "* *`run`* +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Builds and runs the application."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* *`runShadow`* +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running code style checks"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`** +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the main code base"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleTest`** +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Runs the code style check for the test code base"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "The set of code style rules implemented can be found in `config/checkstyle/checkstyle.xml`."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "To enable _exceptions_ to code styles, add in the comment `//CODESTYLE.OFF: RuleName` at the start of the section and `//CODESTYLE.ON: RuleName` at the end of the section."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* **`test`** +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "Runs all tests."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some examples:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew test` -- Runs all tests"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "* `./gradlew clean test` -- Cleans the project and runs tests"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Dependencies"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to run these Gradle tasks manually as they are called automatically by other relevant Gradle tasks."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileJava`** +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to compile and run the main program, and download any missing dependencies before compiling the classes. +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "`allprojects` -\u003e `dependencies` -\u003e `compile` for the list of dependencies required."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* **`compileTestJava`** +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "Checks whether the project has the required dependencies to perform testing, and download any missing dependencies before compiling the test classes. +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "See `build.gradle` -\u003e `allprojects` -\u003e `dependencies` -\u003e `testCompile` for the list of dependencies required."
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 18,
      "-": 92
    }
  },
  {
    "path": "docs/UsingNetlify.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using Netlify"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "This document was originally written for _AddressBook Level 4_ and hence its screenshots refer to `addressbook-level4`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "For use with _AddressBook Level 3_, wherever `addressbook-level4` is used in the screenshots, you should use *`addressbook-level3`*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "https://www.netlify.com/[Netlify] is an automated hosting platform for deploying static websites."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "With the aid of build tools such as Gradle, Netlify provides a smoother experience for previewing documentation."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "This can be done by using Netlify\u0027s https://www.netlify.com/blog/2016/07/20/introducing-deploy-previews-in-netlify/[Deploy Previews] feature, which shows a preview of the updated documentation whenever a pull request is made."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up Netlify"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork the repository to your own organization."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ". Go to https://www.netlify.com/ and click `Sign Up`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Next, click `GITHUB SIGN IN`, enter your GitHub account details and authorize netlify."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ". After logging in, click `New site from Git`."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ". You will then be brought to the setup page."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Click `GitHub` to link your repository to Netlify."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* Depending on whether you are the owner of the repository, you can either grant or request access to Netlify so that it can access your repository and build your documentation."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image:netlify/grant_or_request_access.png[Grant or request access,width \u003d 630]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* After granting or requesting access to your repository, click `Authorize netlify`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Pick your repository from the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ". Fill out the details as follows and then click `Deploy site`."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* Branch to deploy: select `master` branch"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* Build command: `./gradlew asciidoctor`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "The build command is the command that builds the documentation into HTML format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* Publish directory: `build/docs/html5`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "The publish directory is the directory in which the built HTML documentation resides."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Once Netlify has completed building your project, you can now:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* View your main branch\u0027s deployed documentation on the site name given by Netlify (customizable as shown \u003c\u003cChanging the site name of your project, below\u003e\u003e)."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "image:netlify/temp_site_name.png[Temporary site name,width \u003d 630]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Preview the updated documentation whenever a pull request is made by clicking the `Details` hyperlink next to the Netlify test status."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "image:netlify/netlify_details.png[Netlify details link,width \u003d 630]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Changing the site name of your project"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "If you don\u0027t like the site name given by Netlify, you can change it as follows:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on `Settings`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Then click `Change site name` and fill in your desired site name."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "image:netlify/change_site_name.png[Change site name,width \u003d 630]"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 9,
      "-": 56
    }
  },
  {
    "path": "docs/UsingPlantUml.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Using PlantUML"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images/plantuml"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction to PlantUML"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "PlantUML is a tool used in this project to create UML diagrams."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "For more information about the basics of PlantUML, head over to http://plantuml.com/[its official website]."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Set up PlantUML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Installing Graphviz"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Graphviz is a dependency that PlantUML requires to generate more advanced diagrams."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Head over to the https://www.graphviz.org/download/[downloads page] on the official Graphviz website and follow instructions to install Graphviz."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Installing the `PlantUML integration` plugin for IntelliJ IDEA"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Go to `Settings` \u003e `Plugins` \u003e `Marketplace` and install the plugin `PlantUML integration`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Then go to `Settings` \u003e `Other Settings` \u003e `PlantUML` or search for PlantUML."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Configure the path to the `dot` executable."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This executable can be found in the `/bin` directory where you installed GraphViz."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".Settings - Other Settings - PlantUML: input the path to your dot executable"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image::ConfiguringGraphviz.png[]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create/Edit PlantUML diagrams"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "After installing the `PlantUML integration` plugin, simply create or open any `.puml` file to start editing it."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".Editing `DeleteSequenceDiagram.puml`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::EditingDeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Any changes you make in editor pane on the left will be reflected in the preview pane on the right."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "However, do take note that these changes _will not_ be reflected in the developers guide until you export the diagram."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "//TODO: Discussion about why we\u0027re not using asciidoctor-diagram"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Export PlantUML diagrams"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "The `PlantUML integration` plugin allows you to export individual diagrams to a location of your choosing."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "Click the `Save Current Diagram Only` button and choose the location to export the image file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: You will have to `git add` any new diagrams generated!"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Common tasks"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Applying consistent formatting to PlantUML diagrams"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "It is highly recommended to consistently color your UML diagrams as an visual aid."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "You can achieve this by creating a dictionary of colors and import it like CSS."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "For example, you can create a `Style.puml` with the contents:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".Style.puml"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "[source]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR #3333C4"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T1 #7777DB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T2 #5252CE"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T3 #1616B0"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "!define LOGIC_COLOR_T4 #101086"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Then you can use it in another PlantUML file like this:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".UndoSequenceDiagram.puml"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "!include Style.puml"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T2"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":AddressBookParser\" as AddressBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":UndoCommand\" as UndoCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "You can fine-tune the formatting of PlantUML diagrams with the `skinparam` command."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "For example, `skinparam backgroundColor transparent` turns the background of the diagram transparent."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "For a comprehensive list of ``skinparam``s head over to the https://plantuml-documentation.readthedocs.io/en/latest/[unofficial PlantUML skinparam documentation]."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "***"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Repositioning elements in PlantUML diagrams"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "While PlantUML\u0027s automatic layout engine usually produces satisfactory results, at times the result can be less than ideal, especially on larger diagrams."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Here is an example where the default layout generated by PlantUML has a lot of overlapping lines that are hard to decipher:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ".The UI class diagram without additional formatting"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image::RawUiDiagram.png[]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: In most cases, you should consider decomposing the diagram into smaller ones or focusing on a more specific portion of the diagram."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some of the techniques we used in this project to obtain a more palatable diagram."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Link lengths"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "By default, a short link (`\\-\u003e`) points to right and a long link (`-\\-\u003e`) points downwards. you can extend any link to make it longer (```--\\-\u003e```)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Length of arrows and its effects"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArrowLength.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Link directions"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "Clever usage of arrow directions will resolve most layout issues."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the table below shows how the way in which you specify arrows can results in drastically different layouts for the same diagram."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Link directions"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"40a,60a\"]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "|Source |Result"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e Z"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "B --\u003e Z"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e Z"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "D --\u003e Z"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e 1"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "B --\u003e 2"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e 3"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "D --\u003e 4"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "|image::AllDown.png[]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027default is down"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e Z"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027specify down"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "B -down-\u003e Z"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027shorthand for down"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "C -d-\u003e Z"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027arrow lengths take priority"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "D -down\u003e Z"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "A -up-\u003e 1"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "B -up-\u003e 2"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "C -up-\u003e 3"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "D -up-\u003e 4"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "|image::UpAndDown.png[]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "A -up-\u003e Z"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "B -up-\u003e Z"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "C -up-\u003e Z"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "D -up-\u003e Z"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e 1"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "B --\u003e 2"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e 3"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "D --\u003e 4"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Force A B C D"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "A -right[hidden]- B"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "B -right[hidden]- C"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "C -right[hidden]- D"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "|image::HiddenArrows.png[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Reordering definitions"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "As a general rule of thumb, the layout engine will attempt to order objects in the order in which they are defined."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "If there is no formal definition, the objects is taken to be declared upon its first usage."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ".Definition ordering and outcomes"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"70a,30a\"]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "|Source |Result"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e B"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e D"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "|image::ABeforeC.png[]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Class C is defined before A"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Class C"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "A --\u003e B"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "C --\u003e D"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "|image::CBeforeA.png[]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "|[source, puml]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "package \"Rule Of Thumb\"{"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    Class C"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    A --\u003e B"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    C --\u003e D"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "|image::PackagesAndConsistency.png[]"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Explicitly define all symbols to avoid any potential layout mishaps."
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 4,
      "-": 209
    }
  },
  {
    "path": "docs/UsingTravis.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Travis CI"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "This document was originally written for _AddressBook Level 4_ and hence its screenshots refer to `addressbook-level4`."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "For use with _AddressBook Level 3_, wherever `addressbook-level4` is used in the screenshots, you should use *`addressbook-level3`*."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/[Travis CI] is a _Continuous Integration_ platform for GitHub projects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Travis CI can run the projects\u0027 tests automatically whenever new code is pushed to the repo."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "This ensures that existing functionality and features have not been broken by the changes."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "The current Travis CI set up performs the following things whenever someone push code to the repo:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* Runs the `./gradlew clean test coverage coveralls -i` command (see \u003c\u003cUsingGradle#, UsingGradle\u003e\u003e for more details on what this command means)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* Renders documentation from asciidoc to html and automatically publishes them using GitHub Pages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* Runs additional link:#repository-wide-checks[repository-wide checks]."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "If you would like to customise your travis build further, you can learn more about Travis from https://docs.travis-ci.com/[Travis CI Documentation]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up Travis CI"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork the repo to your own organization."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to https://travis-ci.org/ and click `Sign in with GitHub`, then enter your GitHub account details if needed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image:signing_in.png[Signing into Travis CI]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* If the organization is not shown, click `Review and add` as shown below:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "image:review_and_add.png[Review and add]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "This should bring you to a GitHub page that manages the access of third-party applications."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Depending on whether you are the owner of the repository, you can either grant access"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "image:grant_access.png[Grant Access]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "or request access"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "image:request_access.png[Request Access]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "to Travis CI so that it can access your commits and build your code."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* If repository cannot be found, click `Sync account`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Activate the switch."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "image:flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ". This repo comes with a link:../.travis.yml[`.travis.yml`] that tells Travis what to do."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "So there is no need for you to create one yourself."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". To see the CI in action, push a commit to the master branch!"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "* Go to the repository and see the pushed commit."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "There should be an icon which will link you to the Travis build."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "image:build_pending.png[Commit build]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* As the build is run on a provided remote machine, we can only examine the logs it produces:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "image:travis_build.png[Travis build]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". If the build is successful, you should be able to check the coverage details of the tests at http://coveralls.io/[Coveralls]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ". Update the link to the \u0027build status\u0027 badge at the top of the `README.adoc` to point to the build status of your own repo."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enabling auto-publishing of documentation"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ". Ensure that you have followed the steps above to set up Travis CI."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ". On GitHub, create a new user account and give this account collaborator and admin access to the repo. +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "   Using this account, generate a personal access token https://github.com/settings/tokens/new[here]."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Personal access tokens are like passwords so make sure you keep them secret!"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "If the personal access token is leaked, please delete it and generate a new one."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "We use a new user account to generate the token for team projects to prevent team members from gaining access to other team members\u0027 repos. +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "If you are the only one with write access to the repo, you can use your own account to generate the token."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a description for the token. (e.g. `Travis CI - deploy docs to gh-pages`)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* Check the `public_repo` checkbox."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* Click `Generate Token` and copy your new personal access token."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "We will use this token to grant Travis access to the repo."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "image:generate_token.png[Generate token]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ". Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image:flick_repository_switch.png[Activate the switch]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ". Click on the settings button next to the switch."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "In the Environment Variables section, add a new environment variable with"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "* name: `GITHUB_TOKEN`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "* value: personal access token copied in step 1"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* Display value in build log: `OFF`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "--"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "image:travis_add_token.png[Travis add token]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "*Make sure you set `Display value in build log` to `OFF`.* +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "Otherwise, other people will be able to see the personal access token and thus have access this repo. +"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "Similarly, make sure you *do not print `$GITHUB_TOKEN` to the logs* in Travis scripts as the logs are viewable by the public."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ". Now, whenever there\u0027s a new commit to master branch, Travis will push the latest documentation to gh-pages branch."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "**To verify that it works,**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ". Trigger Travis to regenerate documentation."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "To do so, you need to push a new commit to the master branch of the fork. +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "   Suggested change: Remove the codacy badge from `README`."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ". Wait for Travis CI to finish running the build on your new commit."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ". Go to the URL `\\https://\u003cyour-username-or-organization-name\u003e.github.io/addressbook-level3/`."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "You should see your `README` file displayed."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Repository-wide checks"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "In addition to running Gradle checks, we also configure Travis CI to run some repository-wide checks."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover _all_ files in the repository."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[source,shell]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "./config/travis/run-checks.sh"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Implementing new checks"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Checks are implemented as executable `check-*` scripts within the `config/travis/` directory."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "The `run-checks.sh` script will automatically pick up and run files named as such."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Check scripts should print out errors in the following format:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "SEVERITY:FILENAME:LINE: MESSAGE"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "where `SEVERITY` is either `ERROR` or `WARN`, `FILENAME` is the path to the file relative to the current directory, `LINE` is the line of the file where the error occurred and `MESSAGE` is the message explaining the error."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Check scripts must exit with a non-zero exit code if any errors occur."
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 25,
      "-": 129
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Participant \":UI\" as transactionMessages UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "user -[USER_COLOR]\u003e transactionMessages : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "activate transactionMessages UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "transactionMessages -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deletePerson(p)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveAddressBook(addressBook)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "logic --[LOGIC_COLOR]\u003e transactionMessages"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "transactionMessages--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "deactivate transactionMessages"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 7,
      "-": 30
    }
  },
  {
    "path": "docs/team/johndoe.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d John Doe - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 3 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "//include::../UserGuide.adoc[tag\u003ddelete]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "//include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 3,
      "-": 69
    }
  },
  {
    "path": "docs/tutorials/AddRemark.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Adding a new Command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/add-remark"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll walk you through the implementation of a new command -- `remark`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their address book and edit it if required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "The command should have the format of `remark INDEX r/REMARK`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "An example of the command is `remark 2 r/Likes baseball`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We\u0027ll assume that you have already set up the development environment as outlined in the Developer\u0027s Guide."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create a new `remark` command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "All the commands inherit from the abstract class `Command` which means that they must override `execute()`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let\u0027s keep `RemarkCommand` as simple as possible and print some output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.commands;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Changes the remark of an existing person in the address book."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/7d04e49e364dad661cd88f462f01923fba972d2c#diff-5338391f3f6fbb4022c44add6590b74f[diff]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Run the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Output displayed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkHello.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between RemarkCommand and Command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommandInterface.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` to parse input from the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make the command accept parameters"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "While we are at it, let\u0027s change the error message to echo the values."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/83dd9e6b03d6b83199ceb6f3b66166483155abed#diff-34ace715a8a8d2e5a66e71289f017b47[this] after you are done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Parse user input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.person.logic.parser` package."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between Parser and RemarkCommandParser"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "image::ParserInterface.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentTokenizer.java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s find out what we need to do in order to obtain the Index and String that we need."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentMultimap.java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "But what about the Index?"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Taking a quick peek at existing an `Command`..."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".DeleteCommandParser.java"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user\u0027s input, we can create a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommandParser.java"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: Don\u0027t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/efdcdf0e80cec9489f7b47e3f65824f4688ad8f7#diff-fc19ecee89c3732a62fbc8c840250508[here]."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add `Remark` to the model"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let\u0027s lay the groundwork for some _persistent_ changes."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "We achieve that by working with the `Person` model."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person\u0027s name)."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add a new `Remark` class"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "Create a new `Remark` in `seedu.address.person.model.person`."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b7a47c50c8e5f0430d343a23d2863446b6ce9298#diff-af2f075d24dfcd333876f0fbce321f25[this]."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "Note how `Remark` has no constrains and thus does not require input validation."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make use of `Remark`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "These should be relatively simple changes."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let\u0027s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-0c6b6abcfac8c205e075294f25e851fe[`seedu.address.person.ui.PersonCard`]."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "It might sound like Greek to you right now, don\u0027t worry -- we will get back to it later."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "into link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-12580431f55d7880578aa4c16f249e71[`main/resources/view/PersonListCard.fxml`]."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "That\u0027s it!"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".$remark shows up in each entry"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "image::$Remark.png[]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Modify `Person`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update other usages of `Person`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b241ef8526bd4e8a6ad94b8118b7fc3441ec8fa3#diff-3462fc1118b9872387a01b41157b0402[this commit] and check that you have got everything in order!"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Storage"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library -- Jackson."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "WARNING: You must delete AddressBook\u0027s storage file located at `/data/addressbook.json` before running it!"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "Not doing so will cause AddressBook to default to an empty address book!"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Check out link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/ce4f9b70f524d2395948861d80d57fda9ae6e82e#diff-07708562699e2436c717f3330bafae1e[this commit] to see what the changes entail."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Finalizing the UI"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "Just add link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/56d5cb662c31dd38b02f6a5301ba6ab3c667d6a3#diff-0c6b6abcfac8c205e075294f25e851fe[this one line of code!]"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ".The remark label is bound properly!"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkBound.png[]"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Putting everything together"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression -- we went from displaying something to nothing at all."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "However, this is expected behavior as we have never changed `RemarkCommand` at all!"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPhone(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "Make one last link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-34ace715a8a8d2e5a66e71289f017b47[check] to ensure that everything is working properly..."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ".Congratulations!"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkComplete.png[]"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Writing tests"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Tests are crucial to ensuring that bugs don\u0027t slip into the codebase unnoticed."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "This is especially true for large code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Automagically generating tests"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is _``methodName_testScenario_expectedResult``_."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "An example would be `execute_filteredList_success`."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a test for `RemarkCommand#execute()` to test that adding a remark works."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the context menu to jump to tests"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "image::ContextMenu.png[,1223px,267px]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ".Creating a test for `execute`."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "image::CreateTest.png[,664px,751px]"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let\u0027s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "Let\u0027s use the utility functions provided in `CommandTestUtil`."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "The functions ensure that commands produce the expected `CommandResult` and output the correct message."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-d749de38392f7ea504da7824641ba8d9[this]."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "//Link to more discussions"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 6,
      "CoderStellaJ": 14,
      "-": 411
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote,Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.person.model.person.Address` class."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955,height\u003d640px]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Safe delete the field `address` in `EditPersonDescriptor`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px,height\u003d583px]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "You can find them by searching for instances of the word `address` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px,height\u003d890px]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.fxml"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "[source,xml]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".invalidPersonAddressBook.json"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "[source,json]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 2,
      "CoderStellaJ": 6,
      "-": 109
    }
  },
  {
    "path": "docs/tutorials/TracingCode.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Tracing a Command Execution Path"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/tracing"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "part of the effort to write new code.  ...[Therefore,] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "path through the code base. One easy way to trace an execution path is to use a debugger to step through the code."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you will be using the IntelliJ IDEA\u0027s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture sequence diagram from the developer guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows _between_ the main components. That is, it does not show details of"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "the execution path _inside_ each component. By hiding those details, the diagram succeeds in informing the reader"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "about the overall execution path of a command without overwhelming the reader with too much details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Read the _Architecture_ section of the DG"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting a break point"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "user input i.e., somewhere in the UI component, and then trace through how the execution proceeds through the UI component."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "However, the execution path through a GUI is often somewhat obscure due to various _event-driven mechanisms_"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "`seedu.address.person.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the `Search for target by name` feature. `Navigate` \u003e `Symbol`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "image::Execute.png[]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we\u0027re looking for. However, it is just an"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "`Interface`. Let\u0027s delve further and find the implementation of the interface by using the `Find Usages` feature in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ IDEA."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".`Find Usages` tool window. `Edit` \u003e `Find` \u003e `Find Usages`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::FindUsages.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo! `MainWindow#executeCommand()` seems to be exactly what we\u0027re looking for!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "image:LeftGutter.png[]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tracing the execution path"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "[a/ADDRESS] [t/TAG]...` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".Taking notes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Over the course of the debugging session, you will encounter every major component in the application. Try to jot down"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". To start the debugging session, simply `Run` \u003e `Debug Main`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". The Debugger tool window should show up and look something like this:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:DebuggerStep1.png[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the `Show execution point` feature to jump to the line of code that we stopped at:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "image:ShowExecutionPoint.png[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". We are interested in the `logic.execute(commandText)` portion of that line so let\u0027s `Step in` into that method call:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepInto.png[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ". We end up in `LogicManager#execute()`. Let\u0027s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".LogicManager#execute()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     //Logging, safe to ignore"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     CommandResult commandResult;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     //Parse user input from String to a Command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     //Executes the Command and stores the result"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         // since it\u0027s being stored here."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     return commandResult;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ". `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let\u0027s take a closer"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "look at each one."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` the logging code since it is of no interest to us now."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepOver.png[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "`commandWord` and `arguments` :"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image:Variables.png[]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ". We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into the `switch`, we obviously stop at"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "obtain the arguments and index required."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".Stepping out"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them!"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ". The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "`editPersonDesciptor` through the `Variable` tool window."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image:EditCommand.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram below shows the details of the execution path through the Logic component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Does the execution path you traced in the code so far matches with the diagram?"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".Tracing an `edit` command through the Logic component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicSequenceDiagram.png[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ". Now let\u0027s see what happens when we call `command#execute()`!"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".EditCommand#execute()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ". As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ". We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ". Again, it appears that the heavy lifting is delegated. Let\u0027s take a look at ``JsonSerializableAddressBook``\u0027s"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "constructor."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".JsonSerializableAddressBook#JsonSerializableAddressBook()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": " * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    persons.addAll("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        source.getPersonList()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "              .stream()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "              .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "              .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ". It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ". We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into ``resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());``, we end up in:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".ResultDisplay#setFeedbackToUser()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ". Finally, we step through until we reach the end of `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "this tutorial, you learned more about the inner workings of AddressBook and how the various components mesh together"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "to form one cohesive product."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".What\u0027s next?"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "do further tracing for the given commands to find exactly what happens."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ". In this tutorial, we traced the \"happy path\" (i.e., no errors). What do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "instead? What exceptions do you think will be thrown(if any), where will the exceptions be thrown and where will they be"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "handled?"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".. `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ". What components will you have to modify to perform the following enhancements to the application?"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".. Make command words case-insensitive"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".. Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".. Save the address book in the CSV format instead"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new command"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new field to `Person`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new entity to the address book"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 257
    }
  },
  {
    "path": "src/main/java/seedu/address/AppParameters.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 2,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.model.exception.NoSuchIndexException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.storage.Storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static final String FILE_PATH_REIMBURSEMENT \u003d \"data/reimbursementInformation.txt\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private static final String FILE_PATH_TRANSACTION \u003d \"data/transactionHistory.txt\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    protected seedu.address.transaction.logic.LogicManager transactionLogic;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    protected seedu.address.transaction.model.ModelManager transactionModel;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    protected seedu.address.transaction.storage.StorageManager transactionStorage;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    protected seedu.address.reimbursement.logic.LogicManager reimbursementLogic;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    protected seedu.address.reimbursement.model.ModelManager reimbursementModel;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    protected seedu.address.reimbursement.storage.StorageManager reimbursementStorage;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    protected seedu.address.inventory.logic.LogicManager inventoryLogic;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    protected seedu.address.inventory.model.ModelManager inventoryModel;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    protected seedu.address.inventory.storage.StorageManager inventoryStorage;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    protected seedu.address.cashier.logic.LogicManager cashierLogic;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    protected seedu.address.cashier.model.ModelManager cashierModel;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    protected seedu.address.cashier.storage.StorageManager cashierStorage;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    protected seedu.address.overview.logic.LogicManager overviewLogic;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    protected seedu.address.overview.model.ModelManager overviewModel;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    protected seedu.address.overview.storage.StorageManager overviewStorage;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        //For Transaction Storage and Manager"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        transactionStorage \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                new seedu.address.transaction.storage.StorageManager(FILE_PATH_TRANSACTION, model);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        transactionModel \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                new seedu.address.transaction.model.ModelManager(transactionStorage.readTransactionList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        //For Reimbursement Storage and Manager"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        reimbursementStorage \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                new seedu.address.reimbursement.storage.StorageManager(FILE_PATH_REIMBURSEMENT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        reimbursementModel \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                new seedu.address.reimbursement.model.ModelManager("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                        reimbursementStorage.getReimbursementFromFile(transactionModel.getTransactionList()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        //For Inventory Storage and Manager"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        inventoryStorage \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.inventory.storage.StorageManager(\"data/inventoryInformation.txt\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        inventoryModel \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.inventory.model.ModelManager(inventoryStorage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        //For Cashier Storage and Manager"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        cashierStorage \u003d new seedu.address.cashier.storage.StorageManager(\"data\""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                + \"/inventoryInformation.txt\", \"data/transactionHistory.txt\", model);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        cashierModel \u003d new seedu.address.cashier.model.ModelManager(cashierStorage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        //For Overview Storage and Manager"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        overviewStorage \u003d new seedu.address.overview.storage.StorageManager(\"data/overviewInformation.txt\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        overviewModel \u003d new seedu.address.overview.model.ModelManager(overviewStorage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        //All logic"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        transactionLogic \u003d new"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                seedu.address.transaction.logic.LogicManager(transactionModel, transactionStorage, model, storage,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                reimbursementModel, reimbursementStorage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        reimbursementLogic \u003d new"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                seedu.address.reimbursement.logic.LogicManager(reimbursementModel, reimbursementStorage,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                transactionModel, transactionStorage, model);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        inventoryLogic \u003d new"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                seedu.address.inventory.logic.LogicManager(cashierModel, cashierStorage,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                inventoryModel, inventoryStorage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        cashierLogic \u003d new seedu.address.cashier.logic.LogicManager(cashierModel, cashierStorage, model, storage,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                reimbursementModel, reimbursementStorage, transactionModel, transactionStorage, inventoryModel,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                inventoryStorage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        overviewLogic \u003d new seedu.address.overview.logic.LogicManager(overviewModel, overviewStorage, transactionLogic,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                inventoryLogic);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        logic \u003d new LogicManager(model, storage, transactionLogic, reimbursementLogic, cashierLogic, inventoryLogic);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        //no config for ui yet"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        /*UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(new Config().getUserPrefsFilePath());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        seedu.address.person.storage.StorageManager personStorage \u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                new seedu.address.person.storage.StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Optional\u003cReadOnlyAddressBook\u003e addressBookOptional \u003d personStorage.readAddressBook();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        /*seedu.address.person.model.ModelManager personMM \u003d"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                new seedu.address.person.model.ModelManager(initialData, userPrefs);*/"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        ui \u003d new UiManager(transactionLogic, reimbursementLogic, inventoryLogic, logic, cashierLogic, overviewLogic);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            /*transactionModel.sortReset();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            transactionStorage.writeFile(transactionModel.getTransactionList());*/"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            reimbursementStorage.writeFile(reimbursementModel.getReimbursementList());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            inventoryStorage.writeFile(inventoryModel.getInventoryList());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        } catch (IOException | NoSuchIndexException e) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 28,
      "MichaelaTSH": 10,
      "EvonDong": 5,
      "kangyeelim": 62,
      "CoderStellaJ": 12,
      "-": 161
    }
  },
  {
    "path": "src/main/java/seedu/address/cashier/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "package seedu.address.cashier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.cashier.ui.CashierMessages.MESSAGE_ADDED_ITEM;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.model.ModelManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.model.exception.NoSuchItemException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.inventory.model.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " * Adds an item to the sales list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private final int quantity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Creates an AddCommand to add an item"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param description of the item in the inventory list to add"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param quantity of the item to be sold"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public AddCommand(String description, int quantity) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public CommandResult execute(ModelManager modelManager, seedu.address.person.model.Model personModel,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                                 seedu.address.transaction.model.Model transactionModel,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                                 seedu.address.inventory.model.Model inventoryModel)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            throws NoSuchItemException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        Item i \u003d modelManager.addItem(description, quantity);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADDED_ITEM, i.getDescription()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dawo5010": 2,
      "EvonDong": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/cashier/commands/CheckoutCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "package seedu.address.cashier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.cashier.ui.CashierMessages.MESSAGE_CHECKOUT_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.model.ModelManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.inventory.model.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.person.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " * Checkout a list of item to be sold."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "public class CheckoutCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"checkout\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private final double totalAmount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private final double change;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Creates a CheckoutCommand to update the inventory and the transaction."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param totalAmount of the sales list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param change to be returned to the customer"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public CheckoutCommand(double totalAmount, double change) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.totalAmount \u003d totalAmount;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.change \u003d change;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public CommandResult execute(ModelManager modelManager, seedu.address.person.model.Model personModel,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                                 seedu.address.transaction.model.Model transactionModel,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                                 seedu.address.inventory.model.Model inventoryModel)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        Person p \u003d modelManager.getCashier();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        modelManager.checkoutAsTransaction(totalAmount, p, transactionModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        logger.info(p.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        modelManager.updateInventoryList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        modelManager.writeInInventoryFile();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        inventoryModel.readInUpdatedList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        ClearCommand clearCommand \u003d new ClearCommand();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        clearCommand.execute(modelManager, personModel, transactionModel, inventoryModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_CHECKOUT_SUCCESS, Item.DECIMAL_FORMAT.format(totalAmount),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                change));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 5,
      "EvonDong": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/cashier/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "package seedu.address.cashier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.cashier.ui.CashierMessages.CLEARED_SUCCESSFULLY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.model.ModelManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " * Clears the sales list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Creates a ClearCommand to clear all the sales items."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public ClearCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public CommandResult execute(ModelManager model, Model personModel,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                                        seedu.address.transaction.model.Model transactionModel,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                                        seedu.address.inventory.model.Model inventoryModel) throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        model.clearSalesList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return new CommandResult(CLEARED_SUCCESSFULLY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 3,
      "EvonDong": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/cashier/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "package seedu.address.cashier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.model.ModelManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param model {@code Model} which the command should operate on"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param personModel which the command uses to add the cashier-in-charge"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param transactionModel which the command uses to update the transaction view"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param inventoryModel which the command uses to update the inventory view"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @throws Exception If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public abstract CommandResult execute(ModelManager model, seedu.address.person.model.Model personModel,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                                          seedu.address.transaction.model.Model transactionModel,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                          seedu.address.inventory.model.Model inventoryModel) throws Exception;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dawo5010": 1,
      "EvonDong": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/cashier/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "package seedu.address.cashier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.util.OverallCommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "public class CommandResult extends OverallCommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified field."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EvonDong": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/cashier/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "package seedu.address.cashier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.cashier.ui.CashierMessages.MESSAGE_DELETED_ITEM;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.model.ModelManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.model.exception.NoSuchIndexException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.inventory.model.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " * Deletes an item identified using its displayed index from the sales list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Creates a DeleteCommand to delete an item"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param index of the item in the sales list to be deleted"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public CommandResult execute(ModelManager modelManager, Model personModel,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                                 seedu.address.transaction.model.Model transactionModel,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                                 seedu.address.inventory.model.Model inventoryModel) throws NoSuchIndexException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        Item item \u003d modelManager.findItemByIndex(index);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        modelManager.deleteItem(index);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETED_ITEM, item));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 3,
      "EvonDong": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/cashier/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "package seedu.address.cashier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.cashier.ui.CashierMessages.MESSAGE_EDIT_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.model.ModelManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.inventory.model.Item;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " * Edits the details of an existing item in the sales list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private static int index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private static int quantity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Creates an EditCommand to add an item"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param index of the item in the sales list to edit"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param quantity of the edited item"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public EditCommand(int index, int quantity) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public CommandResult execute(ModelManager model, Model personModel,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                                 seedu.address.transaction.model.Model transactionModel,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                                 seedu.address.inventory.model.Model inventoryModel) throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        Item i \u003d model.editItem(index, quantity);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_SUCCESS, i.getDescription(), i.getQuantity()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 3,
      "EvonDong": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/cashier/commands/SetCashierCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "package seedu.address.cashier.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.cashier.ui.CashierMessages.MESSAGE_ADD_CASHIER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.model.ModelManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.model.exception.NoSuchIndexException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.person.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.transaction.model.exception.NoSuchPersonException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " * Sets a cashier who is in-charge of the sales made."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "public class SetCashierCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cashier\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private Person cashier;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Creates a SetCashierCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public SetCashierCommand(Person p) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        cashier \u003d p;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public CommandResult execute(ModelManager modelManager, Model personModel,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                                 seedu.address.transaction.model.Model transactionModel,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                                 seedu.address.inventory.model.Model inventoryModel)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            throws NoSuchIndexException, CommandException, NoSuchPersonException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        modelManager.setCashier(cashier);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_CASHIER, cashier.getName()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 2,
      "EvonDong": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/cashier/logic/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "package seedu.address.cashier.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.cashier.ui.CashierMessages.MESSAGE_INSUFFICIENT_STOCK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.cashier.ui.CashierMessages.MESSAGE_INVALID_ADDCOMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import static seedu.address.cashier.ui.CashierMessages.NO_SUCH_ITEM_FOR_SALE_CASHIER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.cashier.ui.CashierMessages.QUANTITY_NOT_A_NUMBER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import static seedu.address.cashier.ui.CashierMessages.itemsByCategory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import static seedu.address.cashier.ui.CashierMessages.noSuchItemRecommendation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.logic.exception.InsufficientAmountException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.logic.exception.NotANumberException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.logic.exception.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.model.exception.NoSuchItemException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.Prefix;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " * Parses input arguments and creates a new AddCommand object."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "public class AddCommandParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private static ArgumentMultimap argMultimap;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param args to be passed in"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param modelManager which the command operates on"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @throws Exception if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static AddCommand parse(String args, ModelManager modelManager) throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        if (!args.contains(\" c/\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            argMultimap \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                    ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_QUANTITY);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_QUANTITY)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_ADDCOMMAND_FORMAT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            argMultimap \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                    ArgumentTokenizer.tokenize(args, PREFIX_CATEGORY, PREFIX_DESCRIPTION, PREFIX_QUANTITY);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            String category \u003d argMultimap.getValue(PREFIX_CATEGORY).get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_QUANTITY)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                ArrayList\u003cString\u003e listItems \u003d modelManager.getDescriptionByCategory(category);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                throw new ParseException(itemsByCategory(listItems));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        String description \u003d argMultimap.getValue(PREFIX_DESCRIPTION).get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        String quantityString \u003d argMultimap.getValue(PREFIX_QUANTITY).get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        int quantity;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            quantity \u003d Integer.parseInt(quantityString);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new NotANumberException(QUANTITY_NOT_A_NUMBER);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        modelManager.readInUpdatedList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        // if the item with the specified description is not present"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        if (!modelManager.hasItemInInventory(description)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            ArrayList\u003cString\u003e recommendedItems \u003d modelManager.getRecommendedItems(description);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            throw new NoSuchItemException(noSuchItemRecommendation(recommendedItems));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        // if the item with the specified description is not available for sale"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        if (!modelManager.isSellable(description)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            throw new NoSuchItemException(NO_SUCH_ITEM_FOR_SALE_CASHIER);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        if (!modelManager.hasSufficientQuantity(description, quantity)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            int quantityLeft \u003d modelManager.getStockLeft(description);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new InsufficientAmountException(String.format(MESSAGE_INSUFFICIENT_STOCK, quantityLeft, description));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        if (modelManager.hasItemInInventory(description) \u0026\u0026 modelManager.hasSufficientQuantity(description, quantity)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            AddCommand addCommand \u003d new AddCommand(description, quantity);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            return addCommand;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    static boolean arePrefixesPresent(ArgumentMultimap argMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dawo5010": 6,
      "EvonDong": 90,
      "kangyeelim": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/cashier/logic/CashierTabParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "package seedu.address.cashier.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.commands.CheckoutCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.commands.ClearCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.commands.DeleteCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.commands.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.commands.SetCashierCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.logic.exception.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.ui.CashierMessages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.person.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " * Parses user input in the cashier tab."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "public class CashierTabParser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param modelManager which the commands operate on"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param personModel which the commands use to find a person"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @throws Exception if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public Command parseCommand(String userInput, ModelManager modelManager,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                                Model personModel) throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            throw new ParseException(CashierMessages.MESSAGE_INVALID_ADDCOMMAND_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            return new AddCommandParser().parse(arguments, modelManager);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            return new EditCommandParser().parse(arguments, modelManager);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        case SetCashierCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            return new SetCashierCommandParser().parse(arguments, modelManager, personModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        case CheckoutCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            return new CheckoutCommandParser().parse(arguments, modelManager);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            return new ClearCommandParser().parse();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            throw new ParseException(CashierMessages.NO_SUCH_COMMAND);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EvonDong": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/cashier/logic/CheckoutCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "package seedu.address.cashier.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.cashier.ui.CashierMessages.AMOUNT_NOT_A_NUMBER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.cashier.ui.CashierMessages.MESSAGE_INSUFFICIENT_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.commands.CheckoutCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.logic.exception.InsufficientAmountException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.logic.exception.NotANumberException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " * Parses input arguments and creates a new CheckoutCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "public class CheckoutCommandParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CheckoutCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * and returns an CheckoutCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @throws InsufficientAmountException if the input is less than the total amount"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @throws NotANumberException if the input is not a number"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static CheckoutCommand parse(String userInput, ModelManager modelManager) throws InsufficientAmountException,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            NotANumberException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        double totalAmount \u003d modelManager.getTotalAmount();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        double amount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        double change \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            amount \u003d Double.parseDouble(userInput.substring(1));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new NotANumberException(AMOUNT_NOT_A_NUMBER);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        if (amount \u003d\u003d totalAmount) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            change \u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        } else if (amount \u003e totalAmount) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            change \u003d amount - totalAmount;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new InsufficientAmountException(String.format(MESSAGE_INSUFFICIENT_AMOUNT, totalAmount, totalAmount));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        CheckoutCommand checkoutCommand \u003d new CheckoutCommand(totalAmount, change);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return checkoutCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 5,
      "EvonDong": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/cashier/logic/ClearCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "package seedu.address.cashier.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.commands.ClearCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " * Parses input arguments and creates a new ClearCommand object"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "public class ClearCommandParser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ClearCommand"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * and returns an ClearCommand object for execution."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static ClearCommand parse() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return new ClearCommand();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EvonDong": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/cashier/logic/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "package seedu.address.cashier.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.commands.DeleteCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.logic.exception.NotANumberException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.ui.CashierMessages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "public class DeleteCommandParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @throws NotANumberException if the user input is not a number"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static DeleteCommand parse(String userInput) throws NotANumberException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            index \u003d Integer.parseInt(userInput.substring(1));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            throw new NotANumberException(CashierMessages.INDEX_NOT_A_NUMBER);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return deleteCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EvonDong": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/cashier/logic/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "package seedu.address.cashier.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import static seedu.address.cashier.logic.AddCommandParser.arePrefixesPresent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.logic.exception.NotANumberException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.logic.exception.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.ui.CashierMessages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "public class EditCommandParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @throws NotANumberException if the user input is not a number"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static EditCommand parse(String args, ModelManager modelManager) throws NotANumberException, ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        int quantity;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INDEX, PREFIX_QUANTITY);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_INDEX, PREFIX_QUANTITY)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            throw new ParseException(CashierMessages.MESSAGE_INVALID_EDITCOMMAND_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        String indexString \u003d argMultimap.getValue(PREFIX_INDEX).get();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            index \u003d Integer.parseInt(indexString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            throw new NotANumberException(CashierMessages.INDEX_NOT_A_NUMBER);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        String quantityString \u003d argMultimap.getValue(PREFIX_QUANTITY).get();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            quantity \u003d Integer.parseInt(quantityString);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            throw new NotANumberException(CashierMessages.QUANTITY_NOT_A_NUMBER);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return new EditCommand(index, quantity);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EvonDong": 51,
      "kangyeelim": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/cashier/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "package seedu.address.cashier.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.util.InventoryList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.inventory.model.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @throws Exception If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    CommandResult execute(String commandText) throws Exception;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Returns the inventory list in the model manager."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @return Inventory List in the model manager."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    InventoryList getInventoryList() throws Exception;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Returns the sales list in the model manager."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @return Sales List in the model manager."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    ArrayList\u003cItem\u003e getSalesList() throws Exception;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EvonDong": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/cashier/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "package seedu.address.cashier.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.model.ModelManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.storage.StorageManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.util.InventoryList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.inventory.model.Item;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " * The main LogicManager of the cashier tab."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    //private final Model model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private final ModelManager cashierManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private final StorageManager storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private CashierTabParser parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private final seedu.address.person.storage.Storage personStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private final seedu.address.person.model.Model personModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private final seedu.address.reimbursement.model.Model reimbursementModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private final seedu.address.reimbursement.storage.Storage reimbursementStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private final seedu.address.transaction.model.Model transactionModel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private final seedu.address.transaction.storage.Storage transactionStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private final seedu.address.inventory.model.Model inventoryModel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private final seedu.address.inventory.storage.Storage inventoryStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    //Model inventoryModel,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public LogicManager(ModelManager cashierManager,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                        StorageManager cashierStorage,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                        seedu.address.person.model.Model personModel,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                        seedu.address.person.storage.Storage personStorage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                        seedu.address.reimbursement.model.Model reimbursementModel,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                        seedu.address.reimbursement.storage.Storage reimbursementStorage,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                        seedu.address.transaction.model.Model transactionModel,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                        seedu.address.transaction.storage.Storage transactionStorage,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                        seedu.address.inventory.model.Model inventoryModel,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                        seedu.address.inventory.storage.Storage inventoryStorage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        //this.model \u003d inventoryModel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.cashierManager \u003d cashierManager;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.storage \u003d cashierStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        parser \u003d new CashierTabParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.personModel \u003d personModel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.personStorage \u003d personStorage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.reimbursementModel \u003d reimbursementModel;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.reimbursementStorage \u003d reimbursementStorage;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.transactionModel \u003d transactionModel;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.transactionStorage \u003d transactionStorage;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.inventoryModel \u003d inventoryModel;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.inventoryStorage \u003d inventoryStorage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public CommandResult execute(String commandText) throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        Command command \u003d parser.parseCommand(commandText, cashierManager, personModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        CommandResult commandResult \u003d command.execute(cashierManager, personModel,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                transactionModel, inventoryModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public InventoryList getInventoryListFromFile() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return this.storage.getInventoryList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public void writeIntoInventoryFile() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        cashierManager.writeInInventoryFile();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public InventoryList getInventoryList() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return cashierManager.getInventoryList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public ArrayList\u003cItem\u003e getSalesList() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return cashierManager.getSalesList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "EvonDong": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/cashier/logic/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "package seedu.address.cashier.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.logic.exception.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " * Represents a GeneralParser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    T parse(String userInput);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EvonDong": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/cashier/logic/SetCashierCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "package seedu.address.cashier.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.commands.SetCashierCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.logic.exception.NoSuchPersonException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.logic.exception.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.model.ModelManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.ui.CashierMessages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.person.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " * Parses input arguments and creates a new SetCashierCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "public class SetCashierCommandParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SetCashierCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * and returns an SetCashierCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param name of the cashier to be passed in"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param modelManager which the command operates on"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param personModel which the command uses to find the cashier"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @throws NoSuchPersonException if the user input is an invalid person"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static SetCashierCommand parse(String name, ModelManager modelManager, Model personModel)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            throws NoSuchPersonException, ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            Person cashier \u003d personModel.getPersonByName(name.trim());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            return new SetCashierCommand(cashier);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        } catch (PersonNotFoundException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            throw new NoSuchPersonException(CashierMessages.NO_SUCH_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            throw new ParseException(CashierMessages.MESSAGE_INVALID_CASHIERCOMMAND_FORMAT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EvonDong": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/cashier/logic/exception/InsufficientAmountException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "package seedu.address.cashier.logic.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " * Represents an \"insufficient amount\" error encountered by a parser."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "public class InsufficientAmountException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private String msg;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public InsufficientAmountException(String msg) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.msg \u003d msg;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return this.msg;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "EvonDong": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/cashier/logic/exception/NoCashierFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "package seedu.address.cashier.logic.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " * Represents a \"no cashier found\" error encountered by a parser."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "public class NoCashierFoundException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private String msg;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public NoCashierFoundException(String msg) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.msg \u003d msg;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return this.msg;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EvonDong": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/cashier/logic/exception/NoSuchPersonException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "package seedu.address.cashier.logic.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " * Represents a \"no such person\" error encountered by a parser."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "public class NoSuchPersonException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private String msg;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public NoSuchPersonException(String msg) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.msg \u003d msg;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return this.msg;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "EvonDong": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/cashier/logic/exception/NotANumberException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "package seedu.address.cashier.logic.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " * Represents a \"not a number\" error encountered by a parser."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "public class NotANumberException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private String msg;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public NotANumberException(String msg) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.msg \u003d msg;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return this.msg;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "EvonDong": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/cashier/logic/exception/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "package seedu.address.cashier.logic.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "public class ParseException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private String msg;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public ParseException(String msg) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.msg \u003d msg;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return this.msg;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "EvonDong": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/cashier/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "package seedu.address.cashier.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.logic.exception.NoCashierFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.model.exception.NoSuchIndexException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.model.exception.NoSuchItemException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.ui.CashierMessages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.util.InventoryList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.inventory.model.Item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.inventory.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.transaction.model.Transaction;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.transaction.util.TransactionList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " * Represents the in-memory model of the sales list data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private static final String SALES_DESCRIPTION \u003d \"Items sold\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private static final String SALES_CATEGORY \u003d \"Sales\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private static ArrayList\u003cItem\u003e salesList \u003d new ArrayList\u003cItem\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private Person cashier \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private InventoryList inventoryList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private StorageManager storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private TransactionList transactionList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Initializes a ModelManager with the given inventory list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public ModelManager(InventoryList inventoryList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.inventoryList \u003d inventoryList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Initializes a ModelManager with the given storage manager."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public ModelManager(StorageManager storage) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            this.inventoryList \u003d storage.getInventoryList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            this.inventoryList \u003d new InventoryList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            this.transactionList \u003d storage.getTransactionList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            this.transactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Returns a view of the {@code InventoryList}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public InventoryList getInventoryList() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return this.inventoryList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Returns a view of the {@code TransactionList}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public TransactionList getTransactionList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return this.transactionList;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Updates the inventory list from the data file."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public void readInUpdatedList() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            this.inventoryList \u003d storage.getInventoryList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            this.inventoryList \u003d new InventoryList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Returns true if the quantity keyed in is less than or equals to the quantity available in inventory."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Else, return false."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param description of the item to check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param quantity of the item to check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @return true if sufficient quantity in inventory"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @throws NoSuchItemException if there is no such item in the inventory"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public boolean hasSufficientQuantity(String description, int quantity) throws NoSuchItemException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        Item originalItem \u003d inventoryList.getOriginalItem(description);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        for (Item i : salesList) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            if (originalItem.isSameItem(i)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                int initialSalesQty \u003d i.getQuantity();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                return (originalItem.getQuantity() \u003e\u003d (initialSalesQty + quantity));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        if (originalItem.getQuantity() \u003e\u003d quantity) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Returns the quantity of stock left for a specific item."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param description of the item"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @return an integer representing the quantity of stock left"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @throws NoSuchItemException if the item do not exist"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public int getStockLeft(String description) throws NoSuchItemException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return inventoryList.getOriginalItem(description).getQuantity();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Returns true if an item with the same attributes as {@code item} exists in the Inventory List."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public boolean hasItemInInventory(Item item) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            for (int i \u003d 0; i \u003c inventoryList.size(); i++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                if (inventoryList.getItemByIndex(i).isSameItem(item)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Returns true if an item with the same description as {@code item} exists in the Inventory List."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Else, return false."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param description of the item to check"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @return true if item exist in inventory"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public boolean hasItemInInventory(String description) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return inventoryList.hasItem(description);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public void addItem(Item item) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        salesList.add(item);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Adds the item into the Sales List."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param description of the item to be added"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param qty of the item to be added"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @return the item added"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @throws NoSuchItemException if the description is invalid"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public Item addItem(String description, int qty) throws NoSuchItemException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        for (Item item : salesList) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            if (item.getDescription().equalsIgnoreCase(description)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                int originalQty \u003d item.getQuantity();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                item.setQuantity(originalQty + qty);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                return item;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        Item i \u003d inventoryList.getOriginalItem(description);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        Item copy \u003d new Item(i.getDescription(), i.getCategory(), qty, i.getCost(), i.getPrice(),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                Integer.valueOf(i.getId()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        copy.setQuantity(qty);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        salesList.add(copy);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return i;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public Item findItemByIndex(int index) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        Item i \u003d salesList.get(index - 1);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return i;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public void deleteItem(int index) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        salesList.remove(index - 1);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public void setItem(int i, Item editedItem) throws Exception {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        inventoryList.set(i, editedItem);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public void writeInInventoryFile() throws Exception {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        storage.writeFileToInventory(inventoryList);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Updates the quantity in the inventory list according to the quantity sold in Sales List."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @throws Exception if an item is invalid"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public void updateInventoryList() throws Exception {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        for (int i \u003d 0; i \u003c salesList.size(); i++) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            Item item \u003d salesList.get(i);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            int originalQty \u003d inventoryList.getOriginalItem(item).getQuantity();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            inventoryList.getOriginalItem(item).setQuantity(originalQty - item.getQuantity());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Sets the specified {@code Person} as the cashier."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param p the person to be set as cashier"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public void setCashier(Person p) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.cashier \u003d p;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Returns the cashier-in-charge."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @return the cashier-in-charge"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @throws NoCashierFoundException if no cashier has been set"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public Person getCashier() throws NoCashierFoundException {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        if (cashier \u003d\u003d null) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            throw new NoCashierFoundException(CashierMessages.NO_CASHIER);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return this.cashier;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Returns the total amount of all the items in the Sales List."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @return the total amount of all the items in the Sales List"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static double getTotalAmount() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        double total \u003d 0;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        for (Item i : salesList) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            total +\u003d (i.getPrice() * i.getQuantity());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return total;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Returns the Sales List."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @return the Sales List"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public ArrayList\u003cItem\u003e getSalesList() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return this.salesList;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Clears all the items in the Sales List."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public void clearSalesList() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.salesList \u003d new ArrayList\u003cItem\u003e();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Edits the item to update the quantity to be sold."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param index of the item to be updated"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param qty of the item to be updated"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @return the item edited"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public Item editItem(int index, int qty) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        salesList.get(index - 1).setQuantity(qty);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return salesList.get(index - 1);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Returns the subtotal of the item according to the quantity and the price."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param i the item to be calculated"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @return the subtotal of the item"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public double getSubtotal(Item i) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return Double.parseDouble(Item.DECIMAL_FORMAT.format(i.getPrice() * i.getQuantity()));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Returns true if the item with the specified description is available for sale. Else, returns false."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param description of the item"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @return true if available for sale"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @throws NoSuchItemException if not for sale"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public boolean isSellable(String description) throws NoSuchItemException {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        Item i \u003d inventoryList.getOriginalItem(description);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return i.isSellable();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Returns a list of sales items according to their category."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param category of the items"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @return a list of sales items according to their category"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public ArrayList\u003cString\u003e getDescriptionByCategory(String category) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        readInUpdatedList();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return inventoryList.getAllSalesDescriptionByCategory(category);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Returns a list of recommended items based on the initial input description."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param description of the item"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @return a list of recommended items"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @throws NoSuchIndexException if inventory list is invalid"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public ArrayList\u003cString\u003e getRecommendedItems(String description) throws NoSuchIndexException {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        readInUpdatedList();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        ArrayList\u003cString\u003e recommendedItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        for (int i \u003d 0; i \u003c inventoryList.size(); i++) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            Item item \u003d inventoryList.getItemByIndex(i);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            if (item.getDescription().startsWith(description)) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                recommendedItems.add(item.getDescription());"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            if (description.length() \u003e\u003d 3"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                    \u0026\u0026 ((item.getDescription().contains(description)) || description.contains(item.getDescription()))) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                recommendedItems.add(item.getDescription());"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            if (item.getDescription().endsWith(description)) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                recommendedItems.add(item.getDescription());"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return recommendedItems;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Creates a new {@code Transaction} and append it to the data file."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Adds the transaction to the transaction model."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param amount to paid by customer"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param person cashier who is in-charge"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param transactionModel the transaction model being used"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @return the new transaction made from the sales"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @throws Exception if the user input is invalid"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public Transaction checkoutAsTransaction(double amount, Person person,"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                                             seedu.address.transaction.model.Model transactionModel) throws Exception {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        Transaction transaction \u003d new Transaction(LocalDate.now().format(Transaction.DATE_TIME_FORMATTER),"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                SALES_DESCRIPTION, SALES_CATEGORY, amount, person, transactionList.size(), false);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        storage.appendToTransaction(transaction);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        transactionModel.addTransaction(transaction);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return transaction;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "EvonDong": 343
    }
  },
  {
    "path": "src/main/java/seedu/address/cashier/model/exception/NoSuchIndexException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "package seedu.address.cashier.model.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " * Signals that the index that does not exist."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "public class NoSuchIndexException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private String msg;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public NoSuchIndexException(String msg) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.msg \u003d msg;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return this.msg;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EvonDong": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/cashier/model/exception/NoSuchItemException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "package seedu.address.cashier.model.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " * Signals that the person the user input is not in the data base."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "public class NoSuchItemException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private String msg;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public NoSuchItemException(String msg) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.msg \u003d msg;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return this.msg;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EvonDong": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/cashier/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "package seedu.address.cashier.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.util.InventoryList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "public interface Storage {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Reads in the inventory list from the specified text file in Storage."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @return Inventory List read."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public InventoryList getInventoryList() throws Exception;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EvonDong": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/cashier/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "package seedu.address.cashier.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.model.exception.NoSuchIndexException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.util.InventoryList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.inventory.model.Item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.transaction.model.Transaction;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.transaction.util.TransactionList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " * Manages storage of Inventory List and Transaction List data in local storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "public class StorageManager {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private String filepathToInventory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private String filepathToTransaction;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private final seedu.address.person.model.Model personModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public StorageManager(String filepathToInventory, String filepathToTransaction,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                          seedu.address.person.model.Model personModel) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.filepathToInventory \u003d filepathToInventory;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.filepathToTransaction \u003d filepathToTransaction;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.personModel \u003d personModel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public InventoryList getInventoryList() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        ArrayList\u003cItem\u003e itemArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        File f \u003d new File(filepathToInventory);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        f.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        f.createNewFile();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        BufferedReader bfr \u003d new BufferedReader(new FileReader(f));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        String line \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        while ((line \u003d bfr.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            Item i \u003d this.readInInventoryFileLine(line);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            itemArrayList.add(i);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return new InventoryList(itemArrayList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Reads in a single text file line and parses it to create the {@code Item} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param line each line of text in the data file"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @return the item created."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static Item readInInventoryFileLine(String line) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        String[] stringArr \u003d line.split(\" [|] \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        Item i \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        if (stringArr.length \u003d\u003d 5) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            i \u003d new Item(stringArr[1], stringArr[2], Integer.parseInt(stringArr[3]),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                    Double.parseDouble(stringArr[4]), Integer.parseInt(stringArr[0]));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        } else if (stringArr.length \u003d\u003d 6) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            i \u003d new Item(stringArr[1], stringArr[2], Integer.parseInt(stringArr[3]),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                    Double.parseDouble(stringArr[4]), Double.parseDouble(stringArr[5]),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                    Integer.parseInt(stringArr[0]));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return i;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Writes the inventory list to the data file."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param inventoryList the list to be written to file"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @throws IOException if the input is invalid"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @throws NoSuchIndexException if the index input is invalid"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public void writeFileToInventory(InventoryList inventoryList) throws IOException, NoSuchIndexException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        FileWriter fw \u003d new FileWriter(this.filepathToInventory);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        String textFileMsg \u003d \"\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        for (int i \u003d 0; i \u003c inventoryList.size(); i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                textFileMsg \u003d textFileMsg + (i + 1) + inventoryList.getItemByIndex(i).toWriteIntoFile();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                textFileMsg \u003d textFileMsg + System.lineSeparator() + (i + 1)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                        + inventoryList.getItemByIndex(i).toWriteIntoFile();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        fw.write(textFileMsg);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public TransactionList getTransactionList() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        ArrayList\u003cTransaction\u003e transactionArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        File f \u003d new File(filepathToTransaction);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        f.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        f.createNewFile();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        BufferedReader bfr \u003d new BufferedReader(new FileReader(f));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        String line \u003d null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        while ((line \u003d bfr.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            Transaction t \u003d this.readInTransactionFileLine(line, personModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            transactionArrayList.add(t);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return new TransactionList(transactionArrayList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Reads in a single text file line and parses it to create the {@code Transaction} object."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param line each line of text in the data file"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param personModel the model used to find person object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @return the transaction created."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static Transaction readInTransactionFileLine(String line, seedu.address.person.model.Model personModel) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        String[] stringArr \u003d line.split(\" [|] \", 0);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        String[] dateTimeArr \u003d stringArr[0].split(\" \");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        Person person \u003d personModel.getPersonByName(stringArr[4]);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        Transaction t \u003d new Transaction(dateTimeArr[1], stringArr[1],"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                stringArr[2], Double.parseDouble(stringArr[3]), person,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                Integer.parseInt(dateTimeArr[0].split(\"[.]\")[0]), isReimbursed(stringArr[5]));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return t;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private static boolean isReimbursed(String num) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return num.equals(\"1\") ? true : false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Appends the specified transaction to the data file."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param transaction the transaction to be written to file"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @throws Exception if the input is invalid"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public void appendToTransaction(Transaction transaction) throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        FileWriter fw \u003d new FileWriter(this.filepathToTransaction, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        TransactionList transactionList \u003d getTransactionList();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        String textFileMsg \u003d \"\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        if (transactionList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            textFileMsg \u003d (transactionList.size() + 1) + \". \" + transaction.toWriteIntoFile();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            textFileMsg \u003d System.lineSeparator() + (transactionList.size() + 1) + \". \""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                    + transaction.toWriteIntoFile();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        fw.write(textFileMsg);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EvonDong": 136,
      "MichaelaTSH": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/cashier/ui/CashierMessages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "package seedu.address.cashier.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.inventory.model.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " * Formats the Ui return responses for different commands to be shown to user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "public class CashierMessages {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static final String AMOUNT_NOT_A_NUMBER \u003d \"Please input a number for the amount being paid.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static final String CLEARED_SUCCESSFULLY \u003d \"Cleared successfully!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static final String NO_CASHIER \u003d \"Sorry! Please enter the cashier\u0027s name before proceeding:\\n \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            + \" cashier NAME\\n\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static final String NO_SUCH_COMMAND \u003d \"Sorry! There is no such command.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static final String NO_SUCH_INDEX_CASHIER \u003d \"There is no item at the inputted index.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static final String NO_SUCH_ITEM_FOR_SALE_CASHIER \u003d \"Sorry! This item is not available for sale!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static final String NO_SUCH_ITEM_CASHIER \u003d \"There is no such item available. Please input a valid item.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static final String NO_SUCH_PERSON \u003d \"Sorry! There is no such person. Please enter a valid name.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static final String MESSAGE_INVALID_ADDCOMMAND_FORMAT \u003d \"Sorry! Please type \\\"add \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            + \"d/DESCRIPTION\\n q/QUANTITY\\\"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String MESSAGE_INVALID_CASHIERCOMMAND_FORMAT \u003d \"Sorry! Please type \\\"cashier NAME\\\" \\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static final String MESSAGE_INVALID_EDITCOMMAND_FORMAT \u003d \"Sorry! Please type edit with parameters:\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            + \" i/INDEX\\n q/QUANTITY\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static final String INDEX_NOT_A_NUMBER \u003d \"Please input the row index of the item to be deleted \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            + \"according to the table.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static final String QUANTITY_NOT_A_NUMBER \u003d \"Please input an integer for the quantity of item to be sold.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String MESSAGE_ADD_CASHIER \u003d \"Added cashier successfully. Cashier-in-charge is: %s.\\n\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String MESSAGE_CHECKOUT_SUCCESS \u003d \"Total amount is %s.\\nThe change is %s.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            + \"Checkout successful.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String MESSAGE_EDIT_SUCCESS \u003d \"%s: %s\\nEdited successfully.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String MESSAGE_INSUFFICIENT_AMOUNT \u003d \"The total price is %s. The amount is insufficient.\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            + \"Please input an amount of at least %s.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String MESSAGE_INSUFFICIENT_STOCK \u003d \"There is insufficient stock. Only %s %s left.\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            + \"Please input a valid quantity.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String MESSAGE_ADDED_ITEM \u003d \"Added item:\\n%s\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String MESSAGE_DELETED_ITEM \u003d \"Deleted item:\\n%s\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static String deletedItem(Item item) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return \"Deleted Item:\\n\" + item;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Returns a message containing all the items description according to the category."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param list of the description of items"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @return a string containing all the items description according to the category"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static String itemsByCategory(ArrayList\u003cString\u003e list) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        String output \u003d \"The following items are up for sales: \\n\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            output +\u003d (i + 1) + \". \" + list.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        output +\u003d \"\\nTo add to the cart, please type \\\"add \""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                           + \"c/CATEGORY d/DESCRIPTION\\n q/QUANTITY\\\"\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Returns a message containing a list of recommendations when the input item is invalid."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param list of recommendations"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @return a list of recommendations"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static String noSuchItemRecommendation(ArrayList\u003cString\u003e list) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        String output \u003d NO_SUCH_ITEM_CASHIER + \"\\nDo you mean: \\n\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            output +\u003d (i + 1) + \". \" + list.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        output +\u003d \"\\nTo add to the cart, please type \\\"add \""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                + \"d/DESCRIPTION\\n q/QUANTITY\\\"\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 12,
      "EvonDong": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/cashier/util/InventoryList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "package seedu.address.cashier.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.model.exception.NoSuchIndexException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.model.exception.NoSuchItemException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.ui.CashierMessages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.inventory.model.Item;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " * Wraps all data of the inventory into a list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " * Duplicates are allowed but are considered the same item when commands are done."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "public class InventoryList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private static ArrayList\u003cItem\u003e iArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private static ObservableList\u003cItem\u003e iList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Initialises the inventory list when there are no prior items inputted."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public InventoryList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        iArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.iList \u003d FXCollections.observableList(iArrayList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Initialises the inventory list when there are prior inputted items."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param iArrayList Array list of the items saved."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public InventoryList(ArrayList\u003cItem\u003e iArrayList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.iArrayList \u003d iArrayList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.iList \u003d FXCollections.observableList(iArrayList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Returns the item of given description."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param description of the item"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @return Item specified"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @throws NoSuchItemException if the description is invalid."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public int getIndex(String description) throws NoSuchItemException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        for (int i \u003d 0; i \u003c iList.size(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            if (iList.get(i).getDescription().equalsIgnoreCase(description)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        throw new NoSuchItemException(CashierMessages.NO_SUCH_ITEM_CASHIER);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Retrieve the original item in the inventory list according to the specified description."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param description of the item to find"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @return original item in the inventory list"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @throws NoSuchItemException if the description is invalid"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static Item getOriginalItem(String description) throws NoSuchItemException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        for (int i \u003d 0; i \u003c iList.size(); i++) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            if (iList.get(i).getDescription().equalsIgnoreCase(description)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                return iList.get(i);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        throw new NoSuchItemException(CashierMessages.NO_SUCH_ITEM_CASHIER);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Retrieve the original item in the inventory list according to the specified item."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param item to find"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @return original item in the inventory list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @throws NoSuchItemException if the item is invalid"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static Item getOriginalItem(Item item) throws NoSuchItemException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        for (int i \u003d 0; i \u003c iList.size(); i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            if (iList.get(i).isSameItem(item)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                return iList.get(i);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        throw new NoSuchItemException(CashierMessages.NO_SUCH_ITEM_CASHIER);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Returns the item of given index."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param index of the item"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @return Item specified"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @throws NoSuchIndexException if the index is invalid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static Item getItemByIndex(int index) throws NoSuchIndexException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        if (index \u003e\u003d iList.size()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            throw new NoSuchIndexException(CashierMessages.NO_SUCH_INDEX_CASHIER);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            return iList.get(index);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Checks if the item exists in the inventory list according to the description."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param description of the item to check"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @return true if the list contains the item. Else, return false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static boolean hasItem(String description) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        for (int i \u003d 0; i \u003c iList.size(); i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            if (iList.get(i).getDescription().equalsIgnoreCase(description)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Returns the size of the inventory list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @return the size of the inventory list"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static int size() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return iList.size();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Sets a new item according to the index."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param i the index of the item to be replaced"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param item the new item to substitute the existing one"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public void set(int i, Item item) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        iList.set(i, item);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Returns a list of description of items according to category"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param category of the items"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @return a list of description of items according to category"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public ArrayList\u003cString\u003e getAllSalesDescriptionByCategory(String category) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        ArrayList\u003cString\u003e categoryItems \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        for (Item i : iList) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            if (i.getCategory().equalsIgnoreCase(category) \u0026\u0026 i.isSellable()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                categoryItems.add(i.getDescription());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return categoryItems;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EvonDong": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/inventory/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "package seedu.address.inventory.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.inventory.ui.InventoryMessages.MESSAGE_ADDED_ITEM;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.model.Item;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.ui.InventoryMessages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.person.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " * Adds a transaction to the transaction list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private Item item;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Item}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public AddCommand(Item item) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public CommandResult execute(ModelManager model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        InventoryMessages inventoryMessages \u003d new InventoryMessages();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        model.addItem(item);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        logger.info(item.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADDED_ITEM, item));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 3,
      "MichaelaTSH": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/inventory/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "package seedu.address.inventory.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.model.ModelManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.model.exception.NoSuchIndexException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * @throws NoSuchIndexException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public abstract CommandResult execute(ModelManager model) throws Exception;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 1,
      "MichaelaTSH": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/inventory/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "package seedu.address.inventory.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.util.OverallCommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "public class CommandResult extends OverallCommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MichaelaTSH": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/inventory/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "package seedu.address.inventory.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.inventory.ui.InventoryMessages.MESSAGE_DELETED_ITEM;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.model.Item;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.model.ModelManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.model.exception.NoSuchIndexException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " * Deletes a transaction to the transaction list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Creates an DeleteIndexCommand to delete the specified {@code Transaction}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public DeleteCommand(int index) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public CommandResult execute(ModelManager model)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            throws NoSuchIndexException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        Item item \u003d model.findItemByIndex(index);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        model.deleteItem(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETED_ITEM, item));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 3,
      "MichaelaTSH": 26,
      "kangyeelim": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/inventory/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "package seedu.address.inventory.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.inventory.ui.InventoryMessages.MESSAGE_DUPLICATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.inventory.ui.InventoryMessages.MESSAGE_EDITED_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.model.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.person.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.person.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " * Edits an item to the inventory list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private static int id;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private EditItemDescriptor editItemDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * Creates an EditCommand to add the specified {@code Transaction}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public EditCommand(int index, EditItemDescriptor editItemDescriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        this.id \u003d index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        this.editItemDescriptor \u003d new EditItemDescriptor(editItemDescriptor);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public CommandResult execute(ModelManager model)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        Item itemToEdit \u003d model.findItemByIndex(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        Item editedItem \u003d createdEditedItem(itemToEdit, editItemDescriptor);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        if (itemToEdit.equals(editedItem) \u0026\u0026 model.hasItemInInventory(editedItem)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        model.setItem(Integer.parseInt(itemToEdit.getId()), editedItem);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDITED_ITEM, itemToEdit, editedItem));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * Edits an item using EditItemDescriptor."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private static Item createdEditedItem(Item itemToEdit, EditItemDescriptor editItemDescriptor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        String updatedDescription \u003d editItemDescriptor.getDescription().orElse(itemToEdit.getDescription());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        String updatedCategory \u003d editItemDescriptor.getCategory().orElse(itemToEdit.getCategory());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        Integer updatedQuantity \u003d editItemDescriptor.getQuantity().orElse(itemToEdit.getQuantity());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        Double updatedCost \u003d editItemDescriptor.getCost().orElse(itemToEdit.getCost());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        Double updatedPrice \u003d editItemDescriptor.getPrice().orElse(itemToEdit.getPrice());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        return new Item(updatedDescription, updatedCategory, updatedQuantity, updatedCost,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                updatedPrice, id);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * Stores the details to edit the item with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * corresponding field value of the item."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public static class EditItemDescriptor {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        private String category;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        private Integer quantity;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        private Double cost;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        private Double price;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        public EditItemDescriptor() {}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "         */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        public EditItemDescriptor(EditItemDescriptor toCopy) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            setCategory(toCopy.category);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            setQuantity(toCopy.quantity);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            setCost(toCopy.cost);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            setPrice(toCopy.price);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "         */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            return CollectionUtil.isAnyNonNull(description, category, quantity, cost, price);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        public void setDescription(String description) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        public Optional\u003cString\u003e getDescription() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        public void setCategory(String category) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            this.category \u003d category;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        public Optional\u003cString\u003e getCategory() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            return Optional.ofNullable(category);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        public void setQuantity(Integer quantity) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        public Optional\u003cInteger\u003e getQuantity() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            return Optional.ofNullable(quantity);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        public void setCost(Double cost) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            this.cost \u003d cost;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        public Optional\u003cDouble\u003e getCost() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            return Optional.ofNullable(cost);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        public void setPrice(Double price) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            this.price \u003d price;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        public Optional\u003cDouble\u003e getPrice() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            return Optional.ofNullable(price);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            if (!(other instanceof EditItemDescriptor)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            EditItemDescriptor e \u003d (EditItemDescriptor) other;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            return getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                    \u0026\u0026 getCategory().equals(e.getCategory())"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                    \u0026\u0026 getQuantity().equals(e.getQuantity())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                    \u0026\u0026 getCost().equals(e.getCost())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                    \u0026\u0026 getPrice().equals(e.getPrice());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 4,
      "MichaelaTSH": 149
    }
  },
  {
    "path": "src/main/java/seedu/address/inventory/commands/SortCategoryCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "package seedu.address.inventory.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.model.ModelManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.ui.InventoryMessages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " * Command that sorts the Items by category."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "public class SortCategoryCommand extends SortCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public CommandResult execute(ModelManager model) throws Exception {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        model.sortByCategory();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        return new CommandResult(InventoryMessages.MESSAGE_SORTED_BY_CATEGORY);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MichaelaTSH": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/inventory/commands/SortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "package seedu.address.inventory.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " * Base class for all sort commands."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "public abstract class SortCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MichaelaTSH": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/inventory/commands/SortDescriptionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "package seedu.address.inventory.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.model.ModelManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.ui.InventoryMessages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " * Command that sorts the Items by description."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "public class SortDescriptionCommand extends SortCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public CommandResult execute(ModelManager model) throws Exception {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        model.sortByDescription();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        return new CommandResult(InventoryMessages.MESSAGE_SORTED_BY_DESCRIPTION);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MichaelaTSH": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/inventory/commands/SortQuantityCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "package seedu.address.inventory.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.model.ModelManager;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.ui.InventoryMessages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " * Command that sorts the Items by quantity."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "public class SortQuantityCommand extends SortCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public CommandResult execute(ModelManager model) throws Exception {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        model.sortByQuantity();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        return new CommandResult(InventoryMessages.MESSAGE_SORTED_BY_QUANTITY);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MichaelaTSH": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/inventory/logic/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "package seedu.address.inventory.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.logic.exception.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.model.Item;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.ui.InventoryMessages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " * Parser for Add Commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "public class AddCommandParser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * Parses the input and returns an AddCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public static AddCommand parse(String args, int inventoryListSize) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        if (args.contains(\" p/\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                    ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_CATEGORY, PREFIX_QUANTITY,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                            PREFIX_COST, PREFIX_PRICE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_CATEGORY, PREFIX_QUANTITY,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                    PREFIX_COST, PREFIX_PRICE) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                throw new ParseException(InventoryMessages.MESSAGE_INVALID_ADDCOMMAND_FORMAT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            String quantityString \u003d argMultimap.getValue(PREFIX_QUANTITY).get();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            String description \u003d argMultimap.getValue(PREFIX_DESCRIPTION).get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            String category \u003d argMultimap.getValue(PREFIX_CATEGORY).get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            String costString \u003d argMultimap.getValue(PREFIX_COST).get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            String priceString \u003d argMultimap.getValue(PREFIX_PRICE).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            int quantity \u003d Integer.parseInt(quantityString);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            double cost \u003d Double.parseDouble(costString);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            double price \u003d Double.parseDouble(priceString);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            Item item \u003d new Item(description, category, quantity, cost, price, inventoryListSize + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            AddCommand addCommand \u003d new AddCommand(item);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            return addCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                    ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_CATEGORY, PREFIX_QUANTITY,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                            PREFIX_COST);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_CATEGORY, PREFIX_QUANTITY,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                    PREFIX_COST) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                throw new ParseException(InventoryMessages.MESSAGE_INVALID_ADDCOMMAND_FORMAT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            String quantityString \u003d argMultimap.getValue(PREFIX_QUANTITY).get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            String description \u003d argMultimap.getValue(PREFIX_DESCRIPTION).get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            String category \u003d argMultimap.getValue(PREFIX_CATEGORY).get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            String costString \u003d argMultimap.getValue(PREFIX_COST).get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            int quantity \u003d Integer.parseInt(quantityString);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            double cost \u003d Double.parseDouble(costString);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            Item item \u003d new Item(description, category, quantity, cost, inventoryListSize + 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            AddCommand addCommand \u003d new AddCommand(item);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            return addCommand;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    /*private static boolean isPricePresent(ArgumentMultimap argumentMultimap, Prefix price) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        return argumentMultimap.getValue(price);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MichaelaTSH": 68,
      "kangyeelim": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/inventory/logic/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "package seedu.address.inventory.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.commands.DeleteCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.logic.exception.NotANumberException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.ui.InventoryMessages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "public class DeleteCommandParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * @throws NotANumberException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public static DeleteCommand parse(String userInput) throws NotANumberException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            index \u003d Integer.parseInt(userInput.substring(1));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            throw new NotANumberException(InventoryMessages.MESSAGE_NOT_A_NUMBER);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        return deleteCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MichaelaTSH": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/inventory/logic/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "package seedu.address.inventory.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_PRICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.commands.EditCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.logic.exception.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.ui.InventoryMessages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "public class EditCommandParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * and returns a EditCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_CATEGORY, PREFIX_QUANTITY, PREFIX_COST,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                        PREFIX_PRICE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            index \u003d Integer.parseInt(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            throw new ParseException(InventoryMessages.MESSAGE_INVALID_EDIT_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        EditCommand.EditItemDescriptor editItemDescriptor \u003d new EditCommand.EditItemDescriptor();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            editItemDescriptor.setDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CATEGORY).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            editItemDescriptor.setCategory(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        if (argMultimap.getValue(PREFIX_QUANTITY).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            editItemDescriptor.setQuantity(Integer.parseInt(argMultimap.getValue(PREFIX_QUANTITY).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COST).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            editItemDescriptor.setCost(Double.parseDouble(argMultimap.getValue(PREFIX_COST).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRICE).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            editItemDescriptor.setPrice(Double.parseDouble(argMultimap.getValue(PREFIX_PRICE).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        if (!editItemDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            throw new ParseException(InventoryMessages.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        return new EditCommand(index, editItemDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MichaelaTSH": 51,
      "kangyeelim": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/inventory/logic/InventoryTabParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "package seedu.address.inventory.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.commands.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.commands.EditCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.commands.SortCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.logic.exception.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.ui.InventoryMessages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.transaction.commands.DeleteIndexCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " * Parses user inputs to the Inventory Tab."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "public class InventoryTabParser {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * @throws Exception if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public Command parseCommand(String userInput, int inventoryListSize) throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            throw new ParseException(InventoryMessages.MESSAGE_INVALID_ADD_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            return new AddCommandParser().parse(arguments, inventoryListSize);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        case DeleteIndexCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            throw new ParseException(InventoryMessages.NO_SUCH_COMMAND);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MichaelaTSH": 55,
      "EvonDong": 1,
      "kangyeelim": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/inventory/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "package seedu.address.inventory.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.util.InventoryList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * @throws Exception If an error occurs during command execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    CommandResult execute(String commandText) throws Exception;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * Returns the inventory list in the model manager."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * @return Inventory List in the model manager."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    InventoryList getInventoryList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 1,
      "MichaelaTSH": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/inventory/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "package seedu.address.inventory.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.util.InventoryList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " * Manages the logic behind the inventory tab."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private final seedu.address.cashier.model.ModelManager cashierManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private final seedu.address.cashier.storage.StorageManager cashierStorage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private InventoryTabParser parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private final seedu.address.inventory.model.ModelManager inventoryModel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private final seedu.address.inventory.storage.Storage inventoryStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public LogicManager(seedu.address.cashier.model.ModelManager cashierManager,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                        seedu.address.cashier.storage.StorageManager cashierStorage,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                        seedu.address.inventory.model.ModelManager inventoryModel,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                        seedu.address.inventory.storage.StorageManager inventoryStorage) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        this.cashierManager \u003d cashierManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        this.cashierStorage \u003d cashierStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        parser \u003d new InventoryTabParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        this.inventoryModel \u003d inventoryModel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        this.inventoryStorage \u003d inventoryStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public CommandResult execute(String commandText) throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        Command command \u003d parser.parseCommand(commandText,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                inventoryModel.getInventoryList().size());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        CommandResult commandResult \u003d command.execute(inventoryModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        inventoryModel.updateIndexes();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        inventoryStorage.writeFile(inventoryModel.getInventoryList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public InventoryList getInventoryList() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        return inventoryModel.getInventoryList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public InventoryList getInventoryListFromFile() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        return this.inventoryStorage.getInventoryList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public void writeIntoInventoryFile() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        inventoryModel.writeInInventoryFile();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dawo5010": 1,
      "MichaelaTSH": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/inventory/logic/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "package seedu.address.inventory.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " * Punlic interface for parsing Commands."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " * @param \u003cT\u003e Type of Command."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    T parse(String userInput);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MichaelaTSH": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/inventory/logic/SortCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "package seedu.address.inventory.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.commands.SortCategoryCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.commands.SortCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.commands.SortDescriptionCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.commands.SortQuantityCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.logic.exception.NoSuchSortException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.ui.InventoryMessages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " * Parses input arguments and creates a new SortCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "public class SortCommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * and returns a SortCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * @throws NoSuchSortException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public SortCommand parse(String args) throws NoSuchSortException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        String[] argsArr \u003d args.split(\" \");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        if (argsArr[1].equals(\"quantity\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            return new SortQuantityCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        } else if (argsArr[1].equals(\"description\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            return new SortDescriptionCommand();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        } else if (argsArr[1].equals(\"category\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            return new SortCategoryCommand();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        /*} else if (argsArr[1].equals(\"reset\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            return new SortResetCommand(); */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            throw new NoSuchSortException(InventoryMessages.MESSAGE_NO_SUCH_SORT_COMMAND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MichaelaTSH": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/inventory/logic/exception/NoSuchSortException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "package seedu.address.inventory.logic.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " * Signals that the user input is incorrect for a sort command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "public class NoSuchSortException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private String msg;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public NoSuchSortException(String msg) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        this.msg \u003d msg;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        return this.msg;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MichaelaTSH": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/inventory/logic/exception/NotANumberException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "package seedu.address.inventory.logic.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " * Signals that the user input is not a number."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "public class NotANumberException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private String msg;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public NotANumberException(String msg) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        this.msg \u003d msg;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        return this.msg;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MichaelaTSH": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/inventory/logic/exception/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "package seedu.address.inventory.logic.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " * Signals that there was an error in parsing."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "public class ParseException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private String msg;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public ParseException(String msg) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        this.msg \u003d msg;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        return this.msg;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MichaelaTSH": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/inventory/model/Item.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "package seedu.address.inventory.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " * Represents a Item in the treasurerPro."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EvonDong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class Item {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static final DecimalFormat DECIMAL_FORMAT \u003d new DecimalFormat(\"#.##\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private final String category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private Integer quantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private final Double cost;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private Double totalCost;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private Double price;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private Double subtotal;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private String id;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public Item(String description, String category, Integer quantity, Double cost, Double price, int id) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.cost \u003d Double.parseDouble(DECIMAL_FORMAT.format(cost));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.totalCost \u003d Double.parseDouble(DECIMAL_FORMAT.format(quantity * cost));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.price \u003d Double.parseDouble(DECIMAL_FORMAT.format(price));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.subtotal \u003d Double.parseDouble(DECIMAL_FORMAT.format(quantity * price));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        this.id \u003d \"\" + id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * A separate constructor in the event that the Item is not for sale. Price can be set later."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public Item(String description, String category, int quantity, double cost, int i) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.cost \u003d Double.parseDouble(DECIMAL_FORMAT.format(cost));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.totalCost \u003d Double.parseDouble(DECIMAL_FORMAT.format(quantity * cost));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        this.price \u003d 0.0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        this.subtotal \u003d 0.0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        this.id \u003d \"\" + i;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public int getQuantity() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public double getCost() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return cost;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public double getTotalCost() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        return totalCost;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public double getPrice() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public double getSubtotal() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        return subtotal;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public void setPrice(double price) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public void setQuantity(int quantity) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        updateSubtotal();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Checks if the item is available for sales."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @return true if the item is available for sales. Else, return false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public boolean isSellable() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        if (price \u003d\u003d 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * Updates the subtotal."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public void updateSubtotal() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.subtotal \u003d Double.parseDouble(DECIMAL_FORMAT.format(this.price * this.quantity));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public void updateTotalCost() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.totalCost \u003d Double.parseDouble(DECIMAL_FORMAT.format(this.cost * this.quantity));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        return this.id;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public void setId(int i) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        this.id \u003d \"\" + i;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * Stores the attributes of the Item into a String, for storage in a File."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * @return a String containing the attributes of the Item."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public String toWriteIntoFile() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        String msg \u003d \" | \" + this.description + \" | \" + this.category"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                + \" | \" + this.quantity + \" | \" + this.cost + \" | \" + this.price;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Returns true if both items of the same description have at least one other identity field that is the same."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * This defines a weaker notion of equality between two items."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public boolean isSameItem(Item otherItem) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        if (otherItem \u003d\u003d this) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return otherItem !\u003d null"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                \u0026\u0026 otherItem.getDescription().equalsIgnoreCase(getDescription())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                \u0026\u0026 (otherItem.getCategory().equals(getCategory()) || otherItem.getCost() \u003d\u003d (getCost())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                    || otherItem.getPrice() \u003d\u003d getPrice());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        if (!(other instanceof Item)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        Item otherItem \u003d (Item) other;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return otherItem.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                \u0026\u0026 otherItem.getCategory().equals(getCategory())"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                \u0026\u0026 otherItem.getQuantity() \u003d\u003d getQuantity()"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                \u0026\u0026 otherItem.getCost() \u003d\u003d getCost()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                \u0026\u0026 otherItem.getPrice() \u003d\u003d getPrice();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        return Objects.hash(description, category, quantity, cost, price);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        builder.append(\"Description: \")"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                .append(getDescription() + \"\\n\")"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                .append(\" Category: \")"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                .append(getCategory() + \"\\n\")"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                .append(\" Quantity: \")"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                .append(getQuantity() + \"\\n\")"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                .append(\" Cost: \")"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                .append(getCost() + \"\\n\")"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                .append(\" Total Cost: \")"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                .append(getTotalCost() + \"\\n\")"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                .append(\" Price: \")"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                .append(getPrice() + \"\\n\")"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                .append(\" Subtotal: \")"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                .append(getSubtotal() + \"\\n\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "MichaelaTSH": 90,
      "EvonDong": 100,
      "CoderStellaJ": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/inventory/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "package seedu.address.inventory.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.model.exception.NoSuchIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    void addItem(Item item);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    Item findItemByIndex(int index) throws NoSuchIndexException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    void deleteItem(int index);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    void writeInInventoryFile() throws Exception;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    void setItem(int i, Item editedItem) throws Exception;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    boolean hasItemInInventory(Item item);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    void readInUpdatedList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MichaelaTSH": 20,
      "EvonDong": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/inventory/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "package seedu.address.inventory.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.model.exception.NoSuchIndexException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.inventory.model.exception.NoSuchItemException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.storage.StorageManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.util.InventoryList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private InventoryList inventoryList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private StorageManager storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public ModelManager(InventoryList inventoryList) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        this.inventoryList \u003d inventoryList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public ModelManager(StorageManager storage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            this.inventoryList \u003d storage.getInventoryList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            this.inventoryList \u003d new InventoryList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public InventoryList getInventoryList() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        return this.inventoryList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public void setItem(int i, Item editedItem) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        inventoryList.set(i - 1, editedItem);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Returns true if an item with the same attributes as {@code item} exists in the Inventory List."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public boolean hasItemInInventory(Item item) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        for (int i \u003d 0; i \u003c inventoryList.size(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                if (inventoryList.getItemByIndex(i).isSameItem(item)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public void addItem(Item item) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        inventoryList.add(item);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public Item findItemByIndex(int index) throws NoSuchIndexException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        Item item \u003d inventoryList.getItemByIndex(index - 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        return item;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public void deleteItem(int index) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        inventoryList.delete(index - 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public void writeInInventoryFile() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        storage.writeFile(inventoryList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Returns true if the quantity keyed in is less than or equals to the quantity available in inventory."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Else, return false."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param description of the item to check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param quantity of the item to check"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @return true if sufficient quantity in inventory"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @throws NoSuchItemException if there is no such item in the inventory"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public boolean hasSufficientQuantity(String description, int quantity) throws NoSuchItemException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        if (inventoryList.getOriginalItem(description).getQuantity() \u003e quantity) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Updates the index of the items."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @throws NoSuchIndexException if the index is invalid"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public void updateIndexes() throws NoSuchIndexException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        for (int i \u003d 0; i \u003c inventoryList.size(); i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            Item item \u003d inventoryList.get(i);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            item.setId(i + 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public void sortByDescription() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        inventoryList.sortByDescription();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public void sortByCategory() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        inventoryList.sortByCategory();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public void sortByQuantity() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        inventoryList.sortByQuantity();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Updates the recent inventory list from the data file."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public void readInUpdatedList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            this.inventoryList \u003d storage.getInventoryList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            this.inventoryList \u003d new InventoryList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MichaelaTSH": 89,
      "EvonDong": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/inventory/model/exception/NoSuchIndexException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "package seedu.address.inventory.model.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " * Signals that the user input is referring to an index beyond the maximum index,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " * thus referring to a non-existent {@code Item} object."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "public class NoSuchIndexException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private String msg;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public NoSuchIndexException(String msg) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        this.msg \u003d msg;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        return this.msg;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MichaelaTSH": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/inventory/model/exception/NoSuchItemException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "package seedu.address.inventory.model.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " * Signals that the user input is referring to a non-existent {@code Item} object."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "public class NoSuchItemException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private String msg;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public NoSuchItemException(String msg) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.msg \u003d msg;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return this.msg;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EvonDong": 15,
      "MichaelaTSH": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/inventory/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "package seedu.address.inventory.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.model.exception.NoSuchIndexException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.util.InventoryList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "public interface Storage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public InventoryList getInventoryList() throws Exception;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public void writeFile(InventoryList inventoryList) throws IOException, NoSuchIndexException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MichaelaTSH": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/inventory/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "package seedu.address.inventory.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.model.Item;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.util.InventoryList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " * Manages storage of inventory data in local storage."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private String filepath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public StorageManager(String filepath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public InventoryList getInventoryList() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        ArrayList\u003cItem\u003e inventoryArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        File f \u003d new File(filepath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        f.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        f.createNewFile();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        BufferedReader bfr \u003d new BufferedReader(new FileReader(f));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        String line \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        while ((line \u003d bfr.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            Item t \u003d this.readInFileLine(line);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            inventoryArrayList.add(t);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        return new InventoryList(inventoryArrayList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * Reads in a single text file line and parses it to create the {@code Item} object."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * @param line Line of text."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * @return Item created."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public static Item readInFileLine(String line) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        String[] stringArr \u003d line.split(\" [|] \", 0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        Item i \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        if (stringArr.length \u003d\u003d 5) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            i \u003d new Item(stringArr[1], stringArr[2], Integer.parseInt(stringArr[3]),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                    Double.parseDouble(stringArr[4]), Integer.parseInt(stringArr[0]));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        } else if (stringArr.length \u003d\u003d 6) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            i \u003d new Item(stringArr[1], stringArr[2], Integer.parseInt(stringArr[3]),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                    Double.parseDouble(stringArr[4]), Double.parseDouble(stringArr[5]),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                    Integer.parseInt(stringArr[0]));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        return i;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * Writes the list stored by the {@code InventoryList} object to File."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * @param inventoryList the InventoryList being used to store inventory data."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * @throws IOException if the File does not exist."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * @throws seedu.address.inventory.model.exception.NoSuchIndexException if the index is beyond the list size."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public void writeFile(InventoryList inventoryList) throws IOException,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            seedu.address.inventory.model.exception.NoSuchIndexException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        FileWriter fw \u003d new FileWriter(this.filepath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        String textFileMsg \u003d \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        for (int i \u003d 0; i \u003c inventoryList.size(); i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                textFileMsg \u003d textFileMsg + (i + 1) + inventoryList.getItemByIndex(i).toWriteIntoFile();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                textFileMsg \u003d textFileMsg + System.lineSeparator() + (i + 1)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                        + inventoryList.getItemByIndex(i).toWriteIntoFile();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        fw.write(textFileMsg);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MichaelaTSH": 70,
      "EvonDong": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/inventory/ui/InventoryMessages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "package seedu.address.inventory.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " * Formats the Ui return responses for different commands to be shown to user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "public class InventoryMessages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public static final String MESSAGE_NO_SUCH_SORT_COMMAND \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            \"The items can be sorted by category, quantity and description.\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                    + \"Please input sort by category/quantity/description\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public static final String RESET_TO_ORIGINAL_ORDER \u003d \"The items are now reset to original order of input \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            + \"when treasurerPro was just open.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public static final String MESSAGE_SORTED_BY_DESCRIPTION \u003d \"The items are now sorted by description!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public static final String MESSAGE_SORTED_BY_CATEGORY \u003d \"The items are now sorted by category!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public static final String MESSAGE_SORTED_BY_QUANTITY \u003d \"The items are now sorted by quantity!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Sorry! Please type find with your keywords\\n \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            + \"(Eg. find poster printing)\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public static final String MESSAGE_INVALID_ADDCOMMAND_FORMAT \u003d \"Sorry! Please type add with parameters:\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            + \"d/description c/category q/quantity co/cost [p/price]\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public static final String MESSAGE_NOT_A_NUMBER \u003d \"Sorry! Please input a number.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public static final String NO_SUCH_ITEM_INVENTORY \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            \"Sorry! There is no such item in our database. Do add the item in.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public static final String NO_SUCH_COMMAND \u003d \"Sorry! There is no such command.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public static final String MESSAGE_INVALID_ADD_COMMAND_FORMAT \u003d \"Sorry! Please type add with parameters:\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            + \" dt/DATE (eg.21-Sep-2019, 24-Aug-2019 etc)\\n d/DESCRIPTION\\n c/CATEGORY\\n a/AMOUNT\\n p/PERSON\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public static final String MESSAGE_INVALID_EDIT_COMMAND_FORMAT \u003d \"Sorry! Please type edit with the index \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            + \"and any parameters to be edited:\\n\" + \" dt/DATE\\n d/DESCRIPTION\\n c/CATEGORY\\n a/AMOUNT\\n p/PERSON\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"Sorry! Did not manage to edit item!\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public static final String NO_SUCH_INDEX_INVENTORY \u003d \"There is no item at the inputted index.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String MESSAGE_EDITED_ITEM \u003d \"Edited item from:\\n%s\\nto:%s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String MESSAGE_DUPLICATE \u003d \"The given input is the same as that of item specified.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String MESSAGE_ADDED_ITEM \u003d \"Added item:\\n%s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String MESSAGE_DELETED_ITEM \u003d \"Deleted item:\\n%s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 5,
      "MichaelaTSH": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/inventory/util/InventoryList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "package seedu.address.inventory.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.model.Item;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.model.exception.NoSuchIndexException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.inventory.model.exception.NoSuchItemException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.ui.InventoryMessages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " * Wraps all data of the inventory into a list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " * Duplicates are allowed but are considered the same item when commands are done."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "public class InventoryList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private static ArrayList\u003cItem\u003e iList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public InventoryList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.iList \u003d new ArrayList\u003cItem\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public InventoryList(ArrayList\u003cItem\u003e list) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.iList \u003d list;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static Item getItemByIndex(int index) throws NoSuchIndexException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        if (index \u003e\u003d iList.size()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            throw new NoSuchIndexException(InventoryMessages.NO_SUCH_INDEX_INVENTORY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            return iList.get(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public int getIndex(String description) throws NoSuchItemException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        for (int i \u003d 0; i \u003c iList.size(); i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            if (iList.get(i).getDescription().equalsIgnoreCase(description)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        throw new NoSuchItemException(InventoryMessages.NO_SUCH_ITEM_INVENTORY);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public static Item getOriginalItem(String description) throws"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            seedu.address.inventory.model.exception.NoSuchItemException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        for (int i \u003d 0; i \u003c iList.size(); i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            if (iList.get(i).getDescription().equalsIgnoreCase(description)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                return iList.get(i);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        throw new seedu.address.inventory.model.exception.NoSuchItemException(InventoryMessages.NO_SUCH_ITEM_INVENTORY);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static Item getOriginalItem(Item item) throws seedu.address.inventory.model.exception.NoSuchItemException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        for (int i \u003d 0; i \u003c iList.size(); i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            if (iList.get(i).isSameItem(item)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                return iList.get(i);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        throw new seedu.address.inventory.model.exception.NoSuchItemException(InventoryMessages.NO_SUCH_ITEM_INVENTORY);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public void add(Item item) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        iList.add(item);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public void delete(int index) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        iList.remove(index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static int size() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        return iList.size();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public void set(int i, Item item) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        iList.set(i, item);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public void sortByDescription() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        Collections.sort(iList, new SortByDescription());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public void sortByCategory() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        Collections.sort(iList, new SortByCategory());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public void sortByQuantity() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        Collections.sort(iList, new SortByQuantity());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public Stream\u003cItem\u003e stream() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        return this.iList.stream();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public Item get(int i) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        return iList.get(i);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * Comparator to compare by the name in transaction."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    class SortByDescription implements Comparator\u003cItem\u003e {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        // Used for sorting in ascending order"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        public int compare(Item a, Item b) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            return a.getDescription().compareTo(b.getDescription());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * Comparator to compare by amount in transaction."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    class SortByQuantity implements Comparator\u003cItem\u003e {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        // Used for sorting in descending order"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        public int compare(Item a, Item b) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            if (a.getQuantity() \u003c b.getQuantity()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            } else if (a.getQuantity() \u003d\u003d b.getQuantity()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * Comparator to compare by date in transaction."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    class SortByCategory implements Comparator\u003cItem\u003e {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        // Used for sorting in ascending order"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        public int compare(Item a, Item b) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            return a.getCategory().compareTo(b.getCategory());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MichaelaTSH": 101,
      "EvonDong": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/overview/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package seedu.address.overview.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.overview.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.person.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/overview/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package seedu.address.overview.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.util.OverallCommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class CommandResult extends OverallCommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/overview/commands/NotifyBudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package seedu.address.overview.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.overview.ui.OverviewMessages.MESSAGE_NOTIFY_BUDGET_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.overview.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Represents a command to set the percentage value by which to notify the user for budget target."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class NotifyBudgetCommand extends NotifyCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public NotifyBudgetCommand(int amount) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Executes the command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return {@code CommandResult} representing the result of executing this commmand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        model.setBudgetThreshold(amount);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_NOTIFY_BUDGET_SUCCESS, Integer.toString(amount)));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/overview/commands/NotifyCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package seedu.address.overview.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Deletes a transaction to the transaction list."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public abstract class NotifyCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"notify\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    protected int amount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/overview/commands/NotifyExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package seedu.address.overview.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.overview.ui.OverviewMessages.MESSAGE_NOTIFY_EXPENSE_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.overview.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Represents a command to set the percentage value by which to notify the user for expense target."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class NotifyExpenseCommand extends NotifyCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public NotifyExpenseCommand (int amount) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Executes the command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return {@code CommandResult} representing the result of executing this commmand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        model.setExpenseThreshold(amount);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_NOTIFY_EXPENSE_SUCCESS, Integer.toString(amount)));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/overview/commands/NotifySalesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package seedu.address.overview.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.overview.ui.OverviewMessages.MESSAGE_NOTIFY_SALES_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.overview.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Represents a command to set the percentage value by which to notify the user for expense target."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class NotifySalesCommand extends NotifyCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public NotifySalesCommand(int amount) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Executes the command"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return {@code CommandResult} representing the result of executing this commmand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        model.setSalesThreshold(amount);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_NOTIFY_SALES_SUCCESS, Integer.toString(amount)));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/overview/commands/SetBudgetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package seedu.address.overview.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.overview.ui.OverviewMessages.MESSAGE_SET_BUDGET_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.overview.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Command representing setting of budget target."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class SetBudgetCommand extends SetCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public SetBudgetCommand(double amount) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return {@code CommandResult} representing the outcome."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        model.setBudgetTarget(amount);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SET_BUDGET_SUCCESS, Double.toString(amount)));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/overview/commands/SetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package seedu.address.overview.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Adds a transaction to the transaction list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public abstract class SetCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"set\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    protected double amount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/overview/commands/SetExpenseCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package seedu.address.overview.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.overview.ui.OverviewMessages.MESSAGE_SET_EXPENSE_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.overview.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Command representing setting of expense target."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class SetExpenseCommand extends SetCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public SetExpenseCommand(double amount) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return {@code CommandResult} representing the outcome."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        model.setExpenseTarget(amount);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SET_EXPENSE_SUCCESS, Double.toString(amount)));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/overview/commands/SetSalesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package seedu.address.overview.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.overview.ui.OverviewMessages.MESSAGE_SET_SALES_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.overview.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Command representing setting of sales target."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class SetSalesCommand extends SetCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public SetSalesCommand(double amount) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Executes the command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return {@code CommandResult} representing the outcome."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        model.setSalesTarget(amount);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SET_SALES_SUCCESS, Double.toString(amount)));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/overview/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package seedu.address.overview.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.overview.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @throws Exception If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    CommandResult execute(String commandText) throws Exception;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    double getTotalExpenses();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    double getTotalInventory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    double getTotalSales();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    double getRemainingBudget();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    double getExpenseTarget();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    double getSalesTarget();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    double getBudgetTarget();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    List\u003cString\u003e getTransactionCategories();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    List\u003cString\u003e getInventoryCategories();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    double getTransactionTotalByCategory(String category);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    double getInventoryTotalByCategory(String category);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/overview/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package seedu.address.overview.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.stream.DoubleStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.inventory.model.Item;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.inventory.util.InventoryList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.overview.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.overview.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.overview.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.overview.storage.StorageManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.transaction.model.Transaction;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.transaction.util.TransactionList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Manages the logic behind the transaction tab."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private final StorageManager storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private OverviewTabParser parser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private final seedu.address.transaction.logic.Logic transactionLogic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private final seedu.address.inventory.logic.Logic inventoryLogic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public LogicManager(Model overviewModel, StorageManager overviewStorage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        seedu.address.transaction.logic.Logic transactionLogic,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        seedu.address.inventory.logic.Logic inventoryLogic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.model \u003d overviewModel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.storage \u003d overviewStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.parser \u003d new OverviewTabParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.transactionLogic \u003d transactionLogic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.inventoryLogic \u003d inventoryLogic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public CommandResult execute(String commandText) throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        Command command \u003d parser.parseCommand(commandText);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        CommandResult commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        storage.writeToFile(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public double getTotalExpenses() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        Stream\u003cTransaction\u003e transactionStream \u003d transactionLogic.getTransactionList().stream();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return transactionStream"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                .filter(transaction -\u003e !transaction.getCategory().equals(\"Sales\"))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                .flatMapToDouble(transaction -\u003e DoubleStream.of(transaction.getAmount()))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                .sum();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public double getTotalInventory() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        Stream\u003cItem\u003e itemStream \u003d inventoryLogic.getInventoryList().stream();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return itemStream"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                .flatMapToDouble(item -\u003e DoubleStream.of(item.getPrice() * item.getQuantity()))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                .sum();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public double getTotalSales() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        Stream\u003cTransaction\u003e transactionStream \u003d transactionLogic.getTransactionList().stream();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return transactionStream"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                .filter(transaction -\u003e transaction.getCategory().equals(\"Sales\"))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                .flatMapToDouble(transaction -\u003e DoubleStream.of(transaction.getAmount()))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                .sum();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public double getRemainingBudget() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return model.getBudgetTarget() - getTotalExpenses();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public double getExpenseTarget() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return model.getExpenseTarget();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public double getSalesTarget() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return model.getSalesTarget();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public double getBudgetTarget() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return model.getBudgetTarget();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public List\u003cString\u003e getTransactionCategories() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        List\u003cString\u003e categoryList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        TransactionList transactionList \u003d transactionLogic.getTransactionList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        for (int i \u003d 0; i \u003c transactionList.size(); i++) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            categoryList.add(transactionList.get(i).getCategory());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return categoryList.stream().distinct().collect(Collectors.toList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public List\u003cString\u003e getInventoryCategories() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        List\u003cString\u003e categoryList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        InventoryList inventoryList \u003d inventoryLogic.getInventoryList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        for (int i \u003d 0; i \u003c inventoryList.size(); i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            categoryList.add(inventoryList.get(i).getCategory());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return categoryList.stream().distinct().collect(Collectors.toList());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public double getTransactionTotalByCategory(String category) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        Stream\u003cTransaction\u003e transactionStream \u003d transactionLogic.getTransactionList().stream();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return transactionStream"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                .filter(transaction -\u003e transaction.getCategory().equals(category))"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                .flatMapToDouble(transaction -\u003e DoubleStream.of(transaction.getAmount()))"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                .sum();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public double getInventoryTotalByCategory(String category) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        Stream\u003cItem\u003e itemStream \u003d inventoryLogic.getInventoryList().stream();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return itemStream"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                .filter(item -\u003e item.getCategory().equals(category))"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                .flatMapToDouble(item -\u003e DoubleStream.of(item.getTotalCost()))"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                .sum();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 121,
      "kangyeelim": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/overview/logic/NotifyCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package seedu.address.overview.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_BUDGET;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_EXPENSE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_SALES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.overview.commands.NotifyBudgetCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.overview.commands.NotifyCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.overview.commands.NotifyExpenseCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.overview.commands.NotifySalesCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.overview.logic.exception.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.overview.ui.OverviewMessages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.util.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Parses input arguments and creates a new NotifyCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class NotifyCommandParser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the NotifyCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * and returns an NotifyCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static NotifyCommand parse(String args)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_BUDGET, PREFIX_EXPENSE, PREFIX_SALES);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_BUDGET, PREFIX_EXPENSE, PREFIX_SALES)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new ParseException(OverviewMessages.MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BUDGET).isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            return new NotifyBudgetCommand(Integer.parseInt(argMultimap.getValue(PREFIX_BUDGET).get()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_EXPENSE).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            return new NotifyExpenseCommand(Integer.parseInt(argMultimap.getValue(PREFIX_EXPENSE).get()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_SALES).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            return new NotifySalesCommand(Integer.parseInt(argMultimap.getValue(PREFIX_SALES).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new ParseException(OverviewMessages.MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Returns false if all of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/overview/logic/OverviewTabParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package seedu.address.overview.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.overview.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.overview.commands.NotifyCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.overview.commands.SetCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.overview.logic.exception.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.overview.ui.OverviewMessages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class OverviewTabParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new ParseException(OverviewMessages.MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        case SetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            return new SetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        case NotifyCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            return new NotifyCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new ParseException(OverviewMessages.MESSAGE_NO_SUCH_COMMAND);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/overview/logic/SetCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package seedu.address.overview.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_BUDGET;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_EXPENSE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_SALES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.overview.commands.SetBudgetCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.overview.commands.SetCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.overview.commands.SetExpenseCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.overview.commands.SetSalesCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.overview.logic.exception.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.overview.ui.OverviewMessages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.util.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Parses input arguments and creates a new SetCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class SetCommandParser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SetCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * and returns an SetCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static SetCommand parse(String args)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_BUDGET, PREFIX_EXPENSE, PREFIX_SALES);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_BUDGET, PREFIX_EXPENSE, PREFIX_SALES)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new ParseException(OverviewMessages.MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BUDGET).isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            return new SetBudgetCommand(Double.parseDouble(argMultimap.getValue(PREFIX_BUDGET).get()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_EXPENSE).isPresent()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            return new SetExpenseCommand(Double.parseDouble(argMultimap.getValue(PREFIX_EXPENSE).get()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_SALES).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            return new SetSalesCommand(Double.parseDouble(argMultimap.getValue(PREFIX_SALES).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new ParseException(OverviewMessages.MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/overview/logic/exception/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package seedu.address.overview.logic.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Signals that the user input is incorrectly given in general."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class ParseException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private String msg;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public ParseException(String msg) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.msg \u003d msg;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return this.msg;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/overview/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package seedu.address.overview.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    double getBudgetTarget ();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    void setBudgetTarget(double budgetTarget);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    double getExpenseTarget();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    void setExpenseTarget(double expenseTarget);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    double getSalesTarget();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    void setSalesTarget(double salesTarget);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    double getBudgetThreshold();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    void setBudgetThreshold(double budgetThreshold);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    double getExpenseThreshold();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    void setExpenseThreshold(double expenseThreshold);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    double getSalesThreshold();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    void setSalesThreshold(double salesThreshold);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/overview/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package seedu.address.overview.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.overview.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.person.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Manages the data model stored in the Overview tab."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private Optional\u003cDouble\u003e budgetTarget;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private Optional\u003cDouble\u003e expenseTarget;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private Optional\u003cDouble\u003e salesTarget;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private Optional\u003cDouble\u003e budgetThreshold;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private Optional\u003cDouble\u003e salesThreshold;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private Optional\u003cDouble\u003e expenseThreshold;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public ModelManager(Storage storage) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        double[] values \u003d storage.readFromFile();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        budgetTarget \u003d Optional.ofNullable(values[0]);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        expenseTarget \u003d Optional.ofNullable(values[1]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        salesTarget \u003d Optional.ofNullable(values[2]);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        budgetThreshold \u003d Optional.ofNullable(values[3]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        expenseThreshold \u003d Optional.ofNullable(values[4]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        salesThreshold \u003d Optional.ofNullable(values[5]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public double getBudgetTarget () {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return this.budgetTarget.get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public void setBudgetTarget(double budgetTarget) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.budgetTarget \u003d Optional.of(budgetTarget);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public double getExpenseTarget() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return this.expenseTarget.get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public void setExpenseTarget(double expenseTarget) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.expenseTarget \u003d Optional.of(expenseTarget);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public double getSalesTarget() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return this.salesTarget.get();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public void setSalesTarget(double salesTarget) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.salesTarget \u003d Optional.of(salesTarget);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public double getBudgetThreshold() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return budgetThreshold.get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public void setBudgetThreshold(double budgetThreshold) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.budgetThreshold \u003d Optional.of(budgetThreshold);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public double getExpenseThreshold() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return expenseThreshold.get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public void setExpenseThreshold(double expenseThreshold) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.expenseThreshold \u003d Optional.of(expenseThreshold);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public double getSalesThreshold() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return salesThreshold.get();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public void setSalesThreshold(double salesThreshold) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.salesThreshold \u003d Optional.of(salesThreshold);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/overview/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package seedu.address.overview.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.overview.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public interface Storage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    double[] readFromFile();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    void writeToFile(Model model) throws IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/overview/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package seedu.address.overview.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.overview.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Manages storage of transaction data in local storage."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private final String filepath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private double[] values;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public StorageManager(String filepath) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        values \u003d new double[6];"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public double[] readFromFile() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            File f \u003d new File(filepath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            BufferedReader bfr \u003d new BufferedReader(new FileReader(f));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            String line \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            while ((line \u003d bfr.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                readInFileLine(line);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            //do nothing since default values are initialised as optionals"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return values;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public void writeToFile(Model model) throws IOException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        File f \u003d new File(filepath);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        if (!f.exists()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            f.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        FileWriter fw \u003d new FileWriter(this.filepath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        StringBuilder s \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        s.append(\"budgetTarget|\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        s.append(model.getBudgetTarget());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        s.append(System.getProperty(\"line.separator\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        s.append(\"expenseTarget|\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        s.append(model.getExpenseTarget());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        s.append(System.getProperty(\"line.separator\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        s.append(\"salesTarget|\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        s.append(model.getSalesTarget());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        s.append(System.getProperty(\"line.separator\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        s.append(\"budgetThreshold|\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        s.append(model.getBudgetThreshold());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        s.append(System.getProperty(\"line.separator\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        s.append(\"salesThreshold|\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        s.append(model.getSalesThreshold());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        s.append(System.getProperty(\"line.separator\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        s.append(\"expenseThreshold|\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        s.append(model.getExpenseThreshold());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        s.append(System.getProperty(\"line.separator\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        fw.write(s.toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Reads in the current file line and stores the value from that line."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param line The current file line."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    void readInFileLine(String line) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        String[] params \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        System.out.println(params[0]);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        System.out.println(params[1]);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        if (params[0].equals(\"budgetTarget\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            values[0] \u003d Double.parseDouble(params[1]);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } else if (params[0].equals(\"expenseTarget\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            values[1] \u003d Double.parseDouble(params[1]);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } else if (params[0].equals(\"salesTarget\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            values[2] \u003d Double.parseDouble(params[1]);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } else if (params[0].equals(\"budgetThreshold\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            values[3] \u003d Double.parseDouble(params[1]);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } else if (params[0].equals(\"salesThreshold\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            values[4] \u003d Double.parseDouble(params[1]);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } else if (params[0].equals(\"expenseThreshold\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            values[5] \u003d Double.parseDouble(params[1]);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/overview/ui/OverviewMessages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package seedu.address.overview.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Formats the Ui return responses for different commands to be shown to user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class OverviewMessages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String MESSAGE_SET_BUDGET_SUCCESS \u003d \"Successfully set budget to %s.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String MESSAGE_SET_EXPENSE_SUCCESS \u003d \"Successfully set expense goal to %s.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String MESSAGE_SET_SALES_SUCCESS \u003d \"Successfully set sales target to %s.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String MESSAGE_NOTIFY_BUDGET_SUCCESS \u003d \"I\u0027ll notify you when you reach \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            + \"%s%% of your total budget.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String MESSAGE_NOTIFY_EXPENSE_SUCCESS \u003d \"I\u0027ll notify you when you reach \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            + \"%s%% of your expense goal.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String MESSAGE_NOTIFY_SALES_SUCCESS \u003d \"I\u0027ll notify you when you reach \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            + \"%s%% of your sales target.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String MESSAGE_INVALID_SET_AMOUNT \u003d \"Sorry! That\u0027s an invalid amount.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String MESSAGE_INVALID_NOTIFY_AMOUNT \u003d \"Sorry! That\u0027s an invalid percentage.\\n Please enter a \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            + \"number between 0 and 100.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Sorry! You need to specify an argument with your \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            + \"command.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String MESSAGE_NO_SUCH_COMMAND \u003d \"Sorry! There\u0027s no such command here. You can try the \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            + \"following: \u0027set\u0027 or \u0027notify\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String EXPENSE_SUMMARY_TEXT \u003d \"Total spent: $%s/%s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String INVENTORY_SUMMARY_TEXT \u003d \"Inventory value: $%s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String SALES_SUMMARY_TEXT \u003d \"Total sales: $%s/%s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String BUDGET_SUMMARY_TEXT \u003d \"Amount remaining: $%s/%s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String EXPENSE_PIE_CHART_TITLE \u003d \"Expenses by category\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String INVENTORY_PIE_CHART_TITLE \u003d \"Inventory by category\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/person/commons/core/Config.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/person/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/person/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOG_FILE \u003d \"addressbook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/person/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/person/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/person/commons/core/index/Index.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/person/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/person/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/person/commons/util/AppUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/person/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/person/commons/util/ConfigUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/person/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/person/commons/util/JsonUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/seedu/address/person/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/person/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException, IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @see seedu.address.person.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 10,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/person/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.storage.Storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private final seedu.address.transaction.logic.Logic transactionLogic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private final seedu.address.reimbursement.logic.Logic reimbursementLogic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private final seedu.address.cashier.logic.Logic cashierLogic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private final seedu.address.inventory.logic.Logic inventoryLogic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public LogicManager(Model model, Storage storage, seedu.address.transaction.logic.Logic transactionLogic,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                        seedu.address.reimbursement.logic.Logic reimbursementLogic,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                        seedu.address.cashier.logic.Logic cashierLogic,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                        seedu.address.inventory.logic.Logic inventoryLogic) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.transactionLogic \u003d transactionLogic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.reimbursementLogic \u003d reimbursementLogic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.cashierLogic \u003d cashierLogic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        this.inventoryLogic \u003d inventoryLogic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException, IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        commandResult \u003d command.execute(model, transactionLogic, reimbursementLogic, cashierLogic);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EvonDong": 4,
      "MichaelaTSH": 4,
      "kangyeelim": 15,
      "CoderStellaJ": 3,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/person/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.person.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public CommandResult execute(Model model, seedu.address.transaction.logic.Logic transactionLogic,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                                 seedu.address.reimbursement.logic.Logic reimbursementLogic,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                                 seedu.address.cashier.logic.Logic cashierLogic) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 3,
      "MichaelaTSH": 2,
      "kangyeelim": 6,
      "CoderStellaJ": 1,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/person/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public CommandResult execute(Model model, seedu.address.transaction.logic.Logic transactionLogic,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                                 seedu.address.reimbursement.logic.Logic reimbursementLogic,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                                 seedu.address.cashier.logic.Logic cashierLogic) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MichaelaTSH": 2,
      "kangyeelim": 3,
      "CoderStellaJ": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/person/logic/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws java.io.IOException If an error occurs when writing into transaction text file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    //public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public abstract CommandResult execute(Model model, seedu.address.transaction.logic.Logic transactionLogic,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                                          seedu.address.reimbursement.logic.Logic reimbursementLogic,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                                          seedu.address.cashier.logic.Logic cashierLogic)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throws CommandException, IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EvonDong": 3,
      "kangyeelim": 7,
      "CoderStellaJ": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/person/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.util.OverallCommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class CommandResult extends OverallCommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        super(requireNonNull(feedbackToUser), exit);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /*public boolean isShowHelp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 3,
      "kangyeelim": 7,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/person/logic/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.ui.TransactionMessages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public CommandResult execute(Model model, seedu.address.transaction.logic.Logic transactionLogic,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                                 seedu.address.reimbursement.logic.Logic reimbursementLogic,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                                 seedu.address.cashier.logic.Logic cashierLogic) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        checkIfPersonHasTransactionRecords(transactionLogic, personToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Checks if the person to be deleted has a transaction record in the transaction list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Does not allow for deletion if the person still has a record."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param transactionLogic Logic of transaction tab"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param personToDelete Person to be deleted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws CommandException If the person has a transaction record associated to it."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private static void checkIfPersonHasTransactionRecords(seedu.address.transaction.logic.Logic transactionLogic,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                                                           Person personToDelete)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                                                            throws CommandException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        for (int i \u003d 0; i \u003c transactionLogic.getTransactionList().size(); i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            if (transactionLogic.getTransactionList().get(i).getPerson().equals(personToDelete)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                throw new CommandException(TransactionMessages.MESSAGE_PERSON_CANNOT_BE_DELETED);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 1,
      "MichaelaTSH": 2,
      "kangyeelim": 27,
      "CoderStellaJ": 1,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/person/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.Transaction;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index                of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Edits the transaction in transaction list if the edited person had a transaction record there."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param editedPerson     Person with attributes edited."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param personToEdit     Person that is being edited."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param transactionLogic Logic of transaction tab."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws IOException If an error occurs when writing into transaction history text file."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private static void editPersonInTransactionList(Person editedPerson, Person personToEdit,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                                                    seedu.address.transaction.logic.Logic transactionLogic)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        int max \u003d transactionLogic.getTransactionList().size();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        for (int i \u003d 0; i \u003c max; i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Transaction transaction \u003d transactionLogic.getTransactionList().get(i);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            if (transaction.getPerson().equals(personToEdit)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                Transaction transaction1 \u003d new Transaction(transaction.getDate(),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                        transaction.getDescription(), transaction.getCategory(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                        transaction.getAmount(), editedPerson, i + 1, transaction.getIsReimbursed());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                transactionLogic.setTransaction(transaction, transaction1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                transactionLogic.writeIntoTransactionFile();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public CommandResult execute(Model model, seedu.address.transaction.logic.Logic transactionLogic,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                                 seedu.address.reimbursement.logic.Logic reimbursementLogic,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                                 seedu.address.cashier.logic.Logic cashierLogic)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            throws CommandException, IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        if (editPersonDescriptor.getName().isPresent()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            editPersonInTransactionList(editedPerson, personToEdit, transactionLogic);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            reimbursementLogic.updateReimbursementFromPerson(editedPerson, personToEdit);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        public EditPersonDescriptor() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "         */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 44,
      "CoderStellaJ": 29,
      "-": 188
    }
  },
  {
    "path": "src/main/java/seedu/address/person/logic/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public CommandResult execute(Model model, seedu.address.transaction.logic.Logic transactionLogic,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                                 seedu.address.reimbursement.logic.Logic reimbursementLogic,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                                 seedu.address.cashier.logic.Logic cashierLogic) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MichaelaTSH": 2,
      "kangyeelim": 2,
      "CoderStellaJ": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/person/logic/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public CommandResult execute(Model model, seedu.address.transaction.logic.Logic transactionLogic,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                                 seedu.address.reimbursement.logic.Logic reimbursementLogic,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                                 seedu.address.cashier.logic.Logic cashierLogic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MichaelaTSH": 2,
      "kangyeelim": 4,
      "CoderStellaJ": 1,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/person/logic/commands/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public CommandResult execute(Model model, seedu.address.transaction.logic.Logic transactionLogic,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                                 seedu.address.reimbursement.logic.Logic reimbursementLogic,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                                 seedu.address.cashier.logic.Logic cashierLogic) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MichaelaTSH": 2,
      "kangyeelim": 2,
      "CoderStellaJ": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/person/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public CommandResult execute(Model model, seedu.address.transaction.logic.Logic transactionLogic,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                                 seedu.address.reimbursement.logic.Logic reimbursementLogic,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                                 seedu.address.cashier.logic.Logic cashierLogic) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 1,
      "MichaelaTSH": 2,
      "kangyeelim": 2,
      "CoderStellaJ": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/person/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Represents an error which occurs during execution of a {@link seedu.address.person.logic.commands.Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/person/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.person.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.Prefix;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, tagList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 1,
      "kangyeelim": 17,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/person/logic/parser/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.person.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.person.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 2,
      "kangyeelim": 11,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/person/logic/parser/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Parses input arguments and creates a new DeleteIndexCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteIndexCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * and returns a DeleteIndexCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 8,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/person/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.person.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 1,
      "kangyeelim": 13,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/person/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 5,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/person/logic/parser/Parser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": " * Represents a GeneralParser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 3,
      "CoderStellaJ": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/person/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": " * Contains utility methods used for parsing strings in the various *GeneralParser classes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 9,
      "CoderStellaJ": 1,
      "-": 114
    }
  },
  {
    "path": "src/main/java/seedu/address/person/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/person/model/AddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public Person getPersonByName(String name) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        for (Person person : persons) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            if (person.getName().toString().equals(name)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                return person;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 16,
      "-": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/person/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    Person getPersonByName(String name);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 5,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/person/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.person.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public Person getPersonByName(String name) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return addressBook.getPersonByName(name);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 1,
      "kangyeelim": 8,
      "-": 146
    }
  },
  {
    "path": "src/main/java/seedu/address/person/model/ReadOnlyAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/person/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 2,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/person/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 2,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/person/model/person/Address.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 2,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/person/model/person/Email.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 2,
      "-": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/person/model/person/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public int compareTo(Name anotherName) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return this.toString().compareTo(anotherName.toString());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 2,
      "CoderStellaJ": 4,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/person/model/person/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 2,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/person/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.person.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.person.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public Person() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.name \u003d new Name(\"dummy name\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.phone \u003d new Phone(\"12345678\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.email \u003d new Email(\"dummy@example.com\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.address \u003d new Address(\"blk 00 dummy st\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.tags.add(new Tag(\"dummyTag\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String getTagsAsStrings() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        for (Tag tag: tags) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            builder.append(tag + \"\\n\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns true if both persons of the same name."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 2,
      "kangyeelim": 23,
      "-": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/person/model/person/Phone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 2,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/person/model/person/UniquePersonList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.person.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 1,
      "kangyeelim": 3,
      "-": 133
    }
  },
  {
    "path": "src/main/java/seedu/address/person/model/person/exceptions/DuplicatePersonException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicatePersonException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicatePersonException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/person/model/person/exceptions/PersonNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/person/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 2,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/person/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 9,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/person/storage/AddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Represents a storage for {@link seedu.address.person.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 4,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/person/storage/JsonAdaptedPerson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 8,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/person/storage/JsonAdaptedTag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/person/storage/JsonAddressBookStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 7,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/person/storage/JsonSerializableAddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 5,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/person/storage/JsonUserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/person/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/person/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 6,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/person/storage/UserPrefsStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Represents a storage for {@link seedu.address.person.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Saves the given {@link seedu.address.person.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/commands/BackCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package seedu.address.reimbursement.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.person.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.ui.ReimbursementMessages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Represents a command to list all reimbursements."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class BackCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"back\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public CommandResult execute(Model model, seedu.address.person.model.Model personModel) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        ReimbursementMessages reimbursementMessages \u003d new ReimbursementMessages();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        model.listReimbursement();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return new CommandResult(reimbursementMessages.BACK_COMMAND);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 3,
      "CoderStellaJ": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package seedu.address.reimbursement.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Interface representing the methods for each command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public abstract CommandResult execute(Model model, seedu.address.person.model.Model personModel) throws Exception;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 3,
      "CoderStellaJ": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package seedu.address.reimbursement.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.util.OverallCommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Represents a reimbursement command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class CommandResult extends OverallCommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean exit) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        super(feedbackToUser, exit);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 3,
      "CoderStellaJ": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/commands/DeadlineCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package seedu.address.reimbursement.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import static seedu.address.reimbursement.model.Reimbursement.DATE_TIME_FORMATTER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.reimbursement.ui.ReimbursementMessages.MESSAGE_ADD_DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.person.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.model.Reimbursement;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.model.exception.InvalidDeadlineException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Represents a command to add a deadline."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deadline\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private Person person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public DeadlineCommand(Person person, String deadline) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.date \u003d deadline;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public CommandResult execute(Model model, seedu.address.person.model.Model personModel) throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            LocalDate deadline \u003d LocalDate.parse(date, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            Reimbursement rmb \u003d model.addDeadline(person, deadline);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            logger.info(rmb.toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_ADD_DEADLINE, rmb.getDeadline().format(DATE_TIME_FORMATTER),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    rmb.toStringNoDeadline()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            throw new InvalidDeadlineException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 7,
      "CoderStellaJ": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/commands/DoneCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package seedu.address.reimbursement.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.reimbursement.ui.ReimbursementMessages.MESSAGE_DONE_REIMBURSEMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.person.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.model.Reimbursement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.model.exception.NoSuchPersonReimbursementException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Represents a command to mark as done"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private Person person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public DoneCommand(Person person) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public CommandResult execute(Model model, seedu.address.person.model.Model personModel)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throws NoSuchPersonReimbursementException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        Reimbursement rmb \u003d model.doneReimbursement(person);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        logger.info(rmb.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DONE_REIMBURSEMENT, rmb.toString()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dawo5010": 8,
      "CoderStellaJ": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package seedu.address.reimbursement.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.ui.ReimbursementMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public CommandResult execute(seedu.address.reimbursement.model.Model model,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                                 seedu.address.person.model.Model personModel) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return new CommandResult(ReimbursementMessages.MESSAGE_EXIT_ACKNOWLEDGEMENT, true);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package seedu.address.reimbursement.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.reimbursement.ui.ReimbursementMessages.MESSAGE_FIND_REIMBURSEMENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.person.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.model.Reimbursement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.model.exception.NoSuchPersonReimbursementException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.ui.ReimbursementMessages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Represents a command to find a reimbursement."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private Person person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public FindCommand(Person person) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public CommandResult execute(Model model, seedu.address.person.model.Model personModel)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throws NoSuchPersonReimbursementException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        ReimbursementMessages reimbursementMessages \u003d new ReimbursementMessages();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        Reimbursement rmb \u003d model.findReimbursement(person);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        logger.info(rmb.toString());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_FIND_REIMBURSEMENT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                rmb.getPerson().getName().toString(), rmb.toString()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 9,
      "CoderStellaJ": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/commands/SortAmountCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package seedu.address.reimbursement.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.person.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.ui.ReimbursementMessages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Represents a command to sort by amount."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class SortAmountCommand extends SortCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public CommandResult execute(Model model, seedu.address.person.model.Model personModel) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        ReimbursementMessages reimbursementMessages \u003d new ReimbursementMessages();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        model.sortListByAmount();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        logger.info(\"sort by amount\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return new CommandResult(reimbursementMessages.SORT_BY_AMOUNT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 3,
      "kangyeelim": 1,
      "CoderStellaJ": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/commands/SortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.reimbursement.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Represents a sort command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * It is also a {@code Command} and inherits from it."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public abstract class SortCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/commands/SortDeadlineCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package seedu.address.reimbursement.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.person.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.ui.ReimbursementMessages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Represents a command to sort by deadline."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class SortDeadlineCommand extends SortCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public CommandResult execute(Model model, seedu.address.person.model.Model personModel) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        ReimbursementMessages reimbursementMessages \u003d new ReimbursementMessages();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        model.sortListByDeadline();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        logger.info(\"sort by deadline\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return new CommandResult(reimbursementMessages.SORT_BY_DEADLINE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 3,
      "kangyeelim": 1,
      "CoderStellaJ": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/commands/SortNameCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package seedu.address.reimbursement.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.person.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.ui.ReimbursementMessages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Represents the command to sort by name"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class SortNameCommand extends SortCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public CommandResult execute(Model model, seedu.address.person.model.Model personModel) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        ReimbursementMessages reimbursementMessages \u003d new ReimbursementMessages();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        model.sortListByName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        logger.info(\"sort by name\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return new CommandResult(reimbursementMessages.SORT_BY_NAME);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 3,
      "kangyeelim": 1,
      "CoderStellaJ": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package seedu.address.reimbursement.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.model.ReimbursementList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Logic interface. Defines the methods for a logic manager."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    //command execution"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    CommandResult execute(String commandText) throws Exception;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    //get list"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    ReimbursementList getFilteredList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    void updateReimbursementFromTransaction() throws IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    void updateReimbursementFromPerson(Person editedPerson, Person personToEdit) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 3,
      "CoderStellaJ": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package seedu.address.reimbursement.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.model.ReimbursementList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.transaction.util.TransactionList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Implements the logic for Reimbursements."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private final seedu.address.reimbursement.model.Model reimbursementModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private final seedu.address.reimbursement.storage.StorageManager reimbursementStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private final seedu.address.person.model.Model personModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private final seedu.address.transaction.model.Model transactionModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private final seedu.address.transaction.storage.StorageManager transactionStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private final ReimbursementTabParser parser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public LogicManager(Model reimbursementModel,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        seedu.address.reimbursement.storage.StorageManager reimbursementStorage,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                        seedu.address.transaction.model.Model transactionModel,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                        seedu.address.transaction.storage.StorageManager transactionStorage,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                        seedu.address.person.model.Model personModel) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.reimbursementModel \u003d reimbursementModel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.reimbursementStorage \u003d reimbursementStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.parser \u003d new ReimbursementTabParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.personModel \u003d personModel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.transactionModel \u003d transactionModel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.transactionStorage \u003d transactionStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public CommandResult execute(String commandText) throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        Command command \u003d parser.parseCommand(commandText, personModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        CommandResult commandResult \u003d command.execute(reimbursementModel, personModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        transactionStorage.writeFile(transactionModel.getTransactionList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        reimbursementStorage.writeFile(reimbursementModel.getReimbursementList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public ReimbursementList getFilteredList() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return reimbursementModel.getFilteredReimbursementList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void updateReimbursementFromTransaction() throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        TransactionList transList \u003d transactionModel.getTransactionList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        ReimbursementList rmbList \u003d reimbursementStorage.getReimbursementFromFile(transList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        reimbursementModel.updateReimbursementList(rmbList);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        reimbursementStorage.writeFile(reimbursementModel.getReimbursementList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void updateReimbursementFromPerson(Person editedPerson, Person personToEdit) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        reimbursementModel.updateReimbursementList(editedPerson, personToEdit);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        reimbursementStorage.writeFile(reimbursementModel.getReimbursementList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 5,
      "kangyeelim": 1,
      "CoderStellaJ": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/logic/ReimbursementTabParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package seedu.address.reimbursement.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.commands.DoneCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.reimbursement.commands.SortCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.logic.exception.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.logic.parser.BackCommandParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.logic.parser.DeadlineCommandParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.logic.parser.DoneCommandParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.logic.parser.ExitCommandParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.logic.parser.FindCommandParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.reimbursement.logic.parser.SortCommandParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.ui.ReimbursementMessages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.transaction.commands.BackCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Parser for the Reimbursement tab."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class ReimbursementTabParser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Routes the command to the appropriate parser."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param userInput the command input by the user."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param personModel the person involved in the command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return a command representing the user\u0027s desired action."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @throws Exception if the command syntax is incorrect."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public Command parseCommand(String userInput, Model personModel) throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            throw new ParseException(ReimbursementMessages.MESSAGE_INVALID_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        case DeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            return new DeadlineCommandParser().parse(arguments, personModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            return new FindCommandParser().parse(arguments, personModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            return new DoneCommandParser().parse(arguments, personModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        case BackCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            return new BackCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            return new ExitCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            throw new ParseException(ReimbursementMessages.NO_SUCH_COMMAND);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 10,
      "kangyeelim": 5,
      "CoderStellaJ": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/logic/exception/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package seedu.address.reimbursement.logic.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Represents an exception occurred when parsing."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class ParseException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private String msg;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public ParseException(String msg) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.msg \u003d msg;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return this.msg;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 3,
      "CoderStellaJ": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/logic/parser/BackCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package seedu.address.reimbursement.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.commands.BackCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.logic.exception.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.ui.ReimbursementMessages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.Prefix;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Parses List commands."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class BackCommandParser implements SortParser\u003cBackCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Parses the command to sort by deadline."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param args the given command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @return a command representing the user\u0027s desired action"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @throws Exception if the command syntax is incorrect."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public BackCommand parse(String args)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        if (!arePrefixesPresent(argMultimap)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            throw new ParseException(ReimbursementMessages.MESSAGE_INVALID_BACKCOMMAND_FORMAT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        BackCommand backCommand \u003d new BackCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return backCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dawo5010": 3,
      "kangyeelim": 4,
      "CoderStellaJ": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/logic/parser/DeadlineCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package seedu.address.reimbursement.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_PERSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.logic.exception.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.model.exception.NoSuchPersonReimbursementException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.ui.ReimbursementMessages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Parser for deadline command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class DeadlineCommandParser implements GeneralParser\u003cDeadlineCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Adds a deadline to a reimbursement."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param args        the arguments from the user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param personModel the person to search by."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return a command representing the user\u0027s desired action."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @throws Exception if the command syntax is invalid."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public DeadlineCommand parse(String args, Model personModel)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATETIME, PREFIX_PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATETIME, PREFIX_PERSON)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            throw new ParseException(ReimbursementMessages.MESSAGE_INVALID_DEADLINECOMMAND_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        String datetime \u003d argMultimap.getValue(PREFIX_DATETIME).get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            Person person \u003d personModel.getPersonByName(argMultimap.getValue(PREFIX_PERSON).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            DeadlineCommand deadlineCommand \u003d new DeadlineCommand(person, datetime);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            return deadlineCommand;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            throw new NoSuchPersonReimbursementException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 10,
      "kangyeelim": 6,
      "CoderStellaJ": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/logic/parser/DoneCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package seedu.address.reimbursement.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_PERSON;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.commands.DoneCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.logic.exception.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.model.exception.NoSuchPersonReimbursementException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.ui.ReimbursementMessages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Parser for done command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class DoneCommandParser implements GeneralParser\u003cDoneCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Marks a reimbursement done."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param args        the arguments from the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param personModel the person to search by."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return a command representing the user\u0027s desired action."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @throws Exception if the command syntax is invalid."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public DoneCommand parse(String args, Model personModel)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PERSON)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            throw new ParseException(ReimbursementMessages.MESSAGE_INVALID_DONECOMMAND_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            Person person \u003d personModel.getPersonByName(argMultimap.getValue(PREFIX_PERSON).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            DoneCommand doneCommand \u003d new DoneCommand(person);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            return doneCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            throw new NoSuchPersonReimbursementException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 10,
      "kangyeelim": 5,
      "CoderStellaJ": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/logic/parser/ExitCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package seedu.address.reimbursement.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.commands.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.logic.exception.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.ui.ReimbursementMessages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.Prefix;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": " * Parses Exit commands."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class ExitCommandParser implements SortParser\u003cExitCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Parses the command to exit the application."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param args the given command."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @return a command representing the user\u0027s desired action"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @throws Exception if the command syntax is incorrect."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public ExitCommand parse(String args)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                ArgumentTokenizer.tokenize(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        if (!arePrefixesPresent(argMultimap)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            throw new ParseException(ReimbursementMessages.MESSAGE_INVALID_DONECOMMAND_FORMAT);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        ExitCommand exitCommand \u003d new ExitCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return exitCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 4,
      "CoderStellaJ": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/logic/parser/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package seedu.address.reimbursement.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_PERSON;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.logic.exception.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.model.exception.NoSuchPersonReimbursementException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.ui.ReimbursementMessages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Parser for find command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class FindCommandParser implements GeneralParser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Finds a command by person."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param args        the arguments from the user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param personModel the person to search by."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return a command representing the user\u0027s desired action."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @throws Exception if the command syntax is invalid."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public FindCommand parse(String args, Model personModel)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PERSON)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            throw new ParseException(ReimbursementMessages.MESSAGE_INVALID_FINDCOMMAND_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            Person person \u003d personModel.getPersonByName(argMultimap.getValue(PREFIX_PERSON).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            FindCommand deadlineCommand \u003d new FindCommand(person);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            return deadlineCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            throw new NoSuchPersonReimbursementException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 10,
      "kangyeelim": 5,
      "CoderStellaJ": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/logic/parser/GeneralParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package seedu.address.reimbursement.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Parser for all other commands."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public interface GeneralParser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    T parse(String userInput, Model personModel) throws Exception;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 3,
      "CoderStellaJ": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/logic/parser/SortCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.reimbursement.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.reimbursement.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.reimbursement.commands.SortAmountCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.reimbursement.commands.SortDeadlineCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.reimbursement.commands.SortNameCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.reimbursement.logic.exception.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.reimbursement.ui.ReimbursementMessages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " *Parser for sort command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class SortCommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * and returns a SortCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws ParseException If the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public Command parse(String arguments) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String[] argsArr \u003d arguments.split(\" \");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (argsArr[1].equals(\"date\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return new SortDeadlineCommand();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (argsArr[1].equals(\"name\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return new SortNameCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (argsArr[1].equals(\"amount\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return new SortAmountCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new ParseException(ReimbursementMessages.MESSAGE_INVALID_SORT_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/logic/parser/SortParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package seedu.address.reimbursement.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Interface for all the Sort-related Parsers."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public interface SortParser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    T parse(String userInput) throws Exception;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 3,
      "CoderStellaJ": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package seedu.address.reimbursement.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.model.exception.NoSuchPersonReimbursementException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Model interfaces. Defines the methods to be supported by the Model manager."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    //list operation"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    ReimbursementList getReimbursementList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    ReimbursementList getFilteredReimbursementList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    void listReimbursement();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    void updateReimbursementList(ReimbursementList reimbursementList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    void updateReimbursementList(Person editedPerson, Person personToEdit);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    //single reimbursement operation"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    Reimbursement findReimbursement(Person person) throws NoSuchPersonReimbursementException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    Reimbursement doneReimbursement(Person person) throws NoSuchPersonReimbursementException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    Reimbursement addDeadline(Person person, LocalDate deadline) throws Exception;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    //sort operation"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    void sortListByName();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    void sortListByAmount();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    void sortListByDeadline();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 3,
      "CoderStellaJ": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package seedu.address.reimbursement.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.person.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.model.exception.NoSuchPersonReimbursementException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * ModelManager. Manages the models for Reimbursements."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private ReimbursementList reimbursementList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    //for partial reimbursement list display"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private ReimbursementList filteredList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public ModelManager(ReimbursementList newReimbursementList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.reimbursementList \u003d newReimbursementList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.filteredList \u003d reimbursementList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public ReimbursementList getReimbursementList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return reimbursementList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public ReimbursementList getFilteredReimbursementList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return filteredList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void listReimbursement() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        filteredList \u003d reimbursementList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void updateReimbursementList(ReimbursementList reimbursementList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.reimbursementList \u003d reimbursementList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        filteredList \u003d this.reimbursementList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void updateReimbursementList(Person editedPerson, Person personToEdit) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        reimbursementList.updatePerson(editedPerson, personToEdit);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public Reimbursement findReimbursement(Person person) throws NoSuchPersonReimbursementException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        Reimbursement reim \u003d reimbursementList.findReimbursement(person);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        ArrayList\u003cReimbursement\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        newList.add(reim);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        filteredList \u003d new ReimbursementList(newList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return reim;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void sortListByName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        filteredList \u003d reimbursementList;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        filteredList.sortByName();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void sortListByAmount() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        filteredList \u003d reimbursementList;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        filteredList.sortByAmount();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void sortListByDeadline() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        filteredList \u003d reimbursementList;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        filteredList.sortByDeadline();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public Reimbursement addDeadline(Person person, LocalDate deadline) throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        reimbursementList.addDeadline(person, deadline);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        filteredList \u003d reimbursementList;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return findReimbursement(person);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public Reimbursement doneReimbursement(Person person) throws NoSuchPersonReimbursementException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        Reimbursement rmb \u003d reimbursementList.doneReimbursement(person);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        filteredList \u003d reimbursementList;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return rmb;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 3,
      "CoderStellaJ": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/model/Reimbursement.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package seedu.address.reimbursement.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.model.util.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.transaction.model.Transaction;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Reimbursement class. Stores data of the reimbursement to be made."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class Reimbursement {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MMM-yyyy\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private static final String VB \u003d \" | \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private ArrayList\u003cTransaction\u003e list;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private Person person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private double amount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private LocalDate deadline;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    //Store attributes to be displayed in UI"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private String idCol;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private String personCol;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private String descriptionCol;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private String deadlineCol;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Constructs a reimbursement based on 1 piece of transaction."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param trans Transaction that I want to create reimbursement for."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public Reimbursement(Transaction trans) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        requireNonNull(trans);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        list.add(trans);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        amount \u003d trans.getAmount();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        person \u003d trans.getPerson();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        description \u003d new Description(list);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        deadline \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    //Get attributes from reimbursement"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public Person getPerson() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return person;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public ArrayList\u003cTransaction\u003e getList() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public double getAmount() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public LocalDate getDeadline() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void setPerson(Person person) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Calculates the total amount to reimburse based off the transaction list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private void calculateAmount() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        double total \u003d 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        for (Transaction trans : list) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            total +\u003d trans.getAmount();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        amount \u003d total;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Merges two reimbursements if they are from the same person."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param reimbursement the reimbursement to be merged."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void merge(Reimbursement reimbursement) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        assert reimbursement.getPerson().isSamePerson(this.getPerson()) : \"Merging reimbursements is invalid.\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        for (Transaction trans : reimbursement.getList()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            list.add(trans);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.calculateAmount();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        description \u003d new Description(list);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * adds deadline date to reimbursement."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param date"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void addDeadline(LocalDate date) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.deadline \u003d date;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Compares to see if the person for another reimbursement is the same as the current person."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param reimbursement the reimbursement to be compared to."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return true if the person is the same, false otherwise."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public boolean comparePerson(Reimbursement reimbursement) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        if (this.person.isSamePerson(reimbursement.getPerson())) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Marks a reimbursement as done."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void done() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        for (Transaction trans : list) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            trans.updateStatus();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    //For UI display"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String getIdCol() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return idCol;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void setIdCol(int id) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.idCol \u003d Integer.toString(id);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String getPersonCol() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return personCol;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String getDescriptionCol() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return descriptionCol;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String getDeadlineCol() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return deadlineCol;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void setPersonCol() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.personCol \u003d person.getName().toString();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void setDescriptionCol() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.descriptionCol \u003d description.toString();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void setDeadlineCol() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        if (deadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            this.deadlineCol \u003d \"\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            this.deadlineCol \u003d deadline.format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    //Convert reimbursement to string for saving and display"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Converts a reimbursement to string."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @return string"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        String msg \u003d \"\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        if (deadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            msg \u003d person.getName().toString() + \" $\" + amount + System.lineSeparator()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                    + description.toString();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            msg \u003d person.getName().toString() + \" $\" + amount"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                    + deadline.format(DATE_TIME_FORMATTER) + System.lineSeparator()"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                    + description.toString();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Converts a reimbursement to string but without deadline date"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @return string the reimbursement is converted to."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String toStringNoDeadline() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return person.getName().toString() + \" $\" + amount + System.lineSeparator() + description.toString();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return a string for use when saving to file."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String writeIntoFile() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        String msg \u003d \"\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        if (deadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            msg \u003d this.person.getName().toString() + VB + this.amount + VB + \"\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            msg \u003d this.person.getName().toString() + VB + this.amount + VB + this.deadline.format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 17,
      "kangyeelim": 4,
      "CoderStellaJ": 185
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/model/ReimbursementList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package seedu.address.reimbursement.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.reimbursement.model.comparators.SortByAmount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.reimbursement.model.comparators.SortByDeadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.reimbursement.model.comparators.SortByName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.model.exception.NoSuchPersonReimbursementException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.transaction.model.Transaction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.transaction.util.TransactionList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Reimbursement List class: Stores a list of reimbursements, allows accessing of their details and provides"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * functionality to sort them."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class ReimbursementList {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private ArrayList\u003cReimbursement\u003e list;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public ReimbursementList() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        list \u003d new ArrayList\u003cReimbursement\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public ReimbursementList(TransactionList transList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        ArrayList\u003cTransaction\u003e pendingList \u003d checkStatus(transList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        for (Transaction trans : pendingList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            Reimbursement newRecord \u003d new Reimbursement(trans);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            merge(newRecord);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public ReimbursementList(ArrayList\u003cReimbursement\u003e reimbursementList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        list \u003d reimbursementList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public ArrayList\u003cReimbursement\u003e getList() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public Reimbursement get(int index) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return list.get(index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return list.size();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Retrieves all the transactions whose status is pending reimbursement."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param transList the list of all transactions"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return the list of transactions whose status is pending reimbursements"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private ArrayList\u003cTransaction\u003e checkStatus(TransactionList transList) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        ArrayList\u003cTransaction\u003e pendingList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        for (int i \u003d 0; i \u003c transList.size(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            Transaction trans \u003d transList.get(i);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            if (trans.getStatus() \u003d\u003d false) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                pendingList.add(trans);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return pendingList;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Merges a new reimbursement record with an existing one if the person is already in the reimbursement list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param newRecord The merged reimbursement record."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private void merge(Reimbursement newRecord) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        boolean canMerge \u003d false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        for (Reimbursement record : list) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            if (newRecord.comparePerson(record)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                record.merge(newRecord);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                canMerge \u003d true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        if (canMerge \u003d\u003d false) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            list.add(newRecord);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Updates all reimbursements of a person to another person."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param editedPerson The person we need to change to."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param personToEdit The person that should be changed."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void updatePerson(Person editedPerson, Person personToEdit) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        for (Reimbursement rmb : list) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            if (rmb.getPerson().isSamePerson(personToEdit)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                rmb.setPerson(editedPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * finds a reimbursement in the list for the person"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param person"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @throws NoSuchPersonReimbursementException"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public Reimbursement findReimbursement(Person person) throws NoSuchPersonReimbursementException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        for (Reimbursement reim : list) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            if (person.isSamePerson(reim.getPerson())) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                return reim;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        throw new NoSuchPersonReimbursementException();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Marks a reimbursement as done."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param person the person this reimbursement is owed to."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return the new reimbursement object."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @throws NoSuchPersonReimbursementException if no such reimbursement is owed to this person."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public Reimbursement doneReimbursement(Person person) throws NoSuchPersonReimbursementException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        Reimbursement rmb \u003d findReimbursement(person);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        rmb.done();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        list.remove(rmb);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return rmb;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Adds deadline to the reimbursement with person\u0027s name in the reimbursement list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param person   person object for reimbursement."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param deadline deadline date to be added to reimbursement."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @throws NoSuchPersonReimbursementException reimbursement for the person cannot be found in the list."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void addDeadline(Person person, LocalDate deadline) throws NoSuchPersonReimbursementException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        Reimbursement rmb \u003d findReimbursement(person);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        rmb.addDeadline(deadline);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void sortByName() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        Collections.sort(list, new SortByName());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void sortByAmount() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        Collections.sort(list, new SortByAmount());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void sortByDeadline() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        Collections.sort(list, new SortByDeadline());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return a string representing the reimbursement."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            Reimbursement reimbursement \u003d list.get(i);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            output \u003d output + reimbursement.toString();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "dawo5010": 28,
      "CoderStellaJ": 150
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/model/comparators/SortByAmount.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package seedu.address.reimbursement.model.comparators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.reimbursement.model.Reimbursement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Used to sort the Reimbursement list in ascending order of amount."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class SortByAmount implements Comparator\u003cReimbursement\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Compares two Reimbursements to see which has a bigger amount"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param a the first Reimbursement to be compared"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param b the second Reimbursement to be compared"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return 1 if the first is bigger than the second, 0 if they are the same, -1 otherwise."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public int compare(Reimbursement a, Reimbursement b) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        if (a.getAmount() \u003c b.getAmount()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } else if (a.getAmount() \u003d\u003d b.getAmount()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 25,
      "CoderStellaJ": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/model/comparators/SortByDeadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package seedu.address.reimbursement.model.comparators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.reimbursement.model.Reimbursement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Used to sort the Reimbursement list in ascending order of deadline."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class SortByDeadline implements Comparator\u003cReimbursement\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Compares two reimbursements based on deadline."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param a reimbursement"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param b another reimbursement a is comapred to"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @return 1 if a is null or a\u0027s deadline date is greater than b\u0027s deadline. Otherwise, return -1."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public int compare(Reimbursement a, Reimbursement b) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        if (a.getDeadline() \u003d\u003d null) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        if (b.getDeadline() \u003d\u003d null) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return a.getDeadline().compareTo(b.getDeadline());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 14,
      "CoderStellaJ": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/model/comparators/SortByName.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package seedu.address.reimbursement.model.comparators;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.reimbursement.model.Reimbursement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Used to sort the Reimbursement list in ascending order of name."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class SortByName implements Comparator\u003cReimbursement\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public int compare(Reimbursement a, Reimbursement b) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return a.getPerson().getName().compareTo(b.getPerson().getName());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/model/exception/InvalidDeadlineException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package seedu.address.reimbursement.model.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Returns an exception when an invalid deadline is provided."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class InvalidDeadlineException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static String msg \u003d \"Format of deadline date is wrong.\\nThe format should be dd-mmm-yyyy (eg.21-Sep-2019)\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public InvalidDeadlineException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return this.msg;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 3,
      "CoderStellaJ": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/model/exception/NoSuchPersonReimbursementException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package seedu.address.reimbursement.model.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Returns an exception if there are no reimbursement records for a particular person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class NoSuchPersonReimbursementException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static String msg \u003d \"The person is not in the reimbursement list.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public NoSuchPersonReimbursementException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return this.msg;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 3,
      "CoderStellaJ": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/model/util/Deadline.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package seedu.address.reimbursement.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Stores the deadline of a Reimbursement."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class Deadline {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private static String dash \u003d \"-\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private int year;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private int month;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private int day;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public Deadline(int year, int month, int day) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public Deadline() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this(-1, -1, -1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public int getYear() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public int getMonth() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return month;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public int getDay() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return a string representing the deadline."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        if (year !\u003d -1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            return Integer.toString(year) + dash + Integer.toString(month) + dash + Integer.toString(day);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Compares two deadlines."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param anotherDeadline the deadline to compare to."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return -1 if the current deadline is smaller, 0 if they are the same, 1 if otherwise."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public int compareTo(Deadline anotherDeadline) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        if (this.year \u003d\u003d -1) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            if (this.year \u003e anotherDeadline.year) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            } else if (this.year \u003c anotherDeadline.year) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                if (this.month \u003e anotherDeadline.month) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                    return 1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                } else if (this.month \u003c anotherDeadline.month) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                    return -1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                    if (this.day \u003e anotherDeadline.day) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                        return 1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                    } else if (this.day \u003c anotherDeadline.day) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                        return -1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                        return 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 12,
      "CoderStellaJ": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/model/util/Description.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package seedu.address.reimbursement.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.transaction.model.Transaction;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Stores the description of a Reimbursement."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Constructs Description with an empty string."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public Description() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        description \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Constructs description object with formatted aggregated descriptions of all transactions."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param transList Arraylist of the transactions."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public Description(ArrayList\u003cTransaction\u003e transList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        requireNonNull(transList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        description \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        for (int i \u003d 0; i \u003c transList.size(); i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            Transaction trans \u003d transList.get(i);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            String transDes \u003d trans.getDescription();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            if (i !\u003d transList.size() - 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                description \u003d description + Integer.toString(i + 1) + \". \" + transDes + System.lineSeparator();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                description \u003d description + Integer.toString(i + 1) + \". \" + transDes;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 3,
      "CoderStellaJ": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package seedu.address.reimbursement.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.model.ReimbursementList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.transaction.util.TransactionList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Storage interfaces. Defines the methods that a StorageManager has to implement."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public interface Storage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    ReimbursementList getReimbursementFromFile(TransactionList transList) throws Exception;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    void writeFile(ReimbursementList reimbursementList) throws Exception;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 3,
      "kangyeelim": 1,
      "CoderStellaJ": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package seedu.address.reimbursement.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import static seedu.address.reimbursement.model.Reimbursement.DATE_TIME_FORMATTER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.model.Reimbursement;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.model.ReimbursementList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.transaction.util.TransactionList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Storage manager. Allows reimbursements to be stored and loaded from file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static final String VBSPLIT \u003d \" [|] \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private static final String DOTSPLIT \u003d \"[.] \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private final String filepathReimbursement;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public StorageManager(String filepathReimbursement) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.filepathReimbursement \u003d filepathReimbursement;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Reads in a line of the file and adds it to the map."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param map  the map to add the new record to."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param line the current line being read."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private void readInFileLine(HashMap\u003cString, LocalDate\u003e map, String line) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        String[] stringArr \u003d line.split(VBSPLIT, 0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String[] nameArr \u003d stringArr[0].split(DOTSPLIT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String personName \u003d nameArr[1];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        LocalDate parsedDate \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        if (stringArr.length \u003d\u003d 3) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            String date \u003d stringArr[2];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            parsedDate \u003d LocalDate.parse(date, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        if (!map.containsKey(personName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            map.put(personName, parsedDate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Generates a hashmap which maps the person\u0027s name to the deadline date."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @return the hashmap."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private HashMap\u003cString, LocalDate\u003e readReimbursementFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            HashMap\u003cString, LocalDate\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            File f \u003d new File(filepathReimbursement);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            f.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            BufferedReader bfr \u003d new BufferedReader(new FileReader(f));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            String line \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            while ((line \u003d bfr.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                this.readInFileLine(map, line);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            return map;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            return new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Matches the previously-stored deadline to the corresponding reimbursement."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param newList the reimbursement list upon which matching will be performed."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param map     a mapping of people and deadlines."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @throws Exception if an error occurs during matching."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private void matchDeadline(ReimbursementList newList, HashMap\u003cString, LocalDate\u003e map) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        for (int i \u003d 0; i \u003c newList.size(); i++) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            LocalDate date \u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            Reimbursement rmb \u003d newList.get(i);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            String rbPersonName \u003d rmb.getPerson().getName().toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            if (map.containsKey(rbPersonName)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                date \u003d map.get(rbPersonName);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            rmb.addDeadline(date);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public ReimbursementList getReimbursementFromFile(TransactionList transList) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        HashMap\u003cString, LocalDate\u003e map \u003d readReimbursementFile();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        ReimbursementList newList \u003d new ReimbursementList(transList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        matchDeadline(newList, map);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return newList;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void writeFile(ReimbursementList reimbursementList) throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        FileWriter fw \u003d new FileWriter(this.filepathReimbursement);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        String textFileMsg \u003d \"\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        for (int i \u003d 0; i \u003c reimbursementList.size(); i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                textFileMsg \u003d textFileMsg + (i + 1) + \". \" + reimbursementList.get(i).writeIntoFile();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                textFileMsg \u003d textFileMsg + System.lineSeparator() + (i + 1) + \". \""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                        + reimbursementList.get(i).writeIntoFile();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        fw.write(textFileMsg);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 7,
      "kangyeelim": 4,
      "CoderStellaJ": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/reimbursement/ui/ReimbursementMessages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package seedu.address.reimbursement.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Stores the messages to be printed as a response to the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class ReimbursementMessages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public static final String BACK_COMMAND \u003d \"List all reimbursements.\\n\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public static final String SORT_BY_NAME \u003d \"The reimbursement list has been sorted by person\u0027s name.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public static final String SORT_BY_AMOUNT \u003d \"The reimbursement list has been sorted by amount of money.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String SORT_BY_DEADLINE \u003d \"The reimbursement list has been sorted by deadline of the \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            + \"reimbursement.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String NO_SUCH_COMMAND \u003d \"Sorry! Please type with these commands:\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            + \"deadline\\ndone\\nfind\\nback\\nsort name\\nsort amount\\nsort date\\nexit\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Sorry! Please type with these parameters:\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            + \"p/PERSON\\n dt/DATE (eg.02-Sep-2019)\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String MESSAGE_INVALID_DEADLINECOMMAND_FORMAT \u003d \"Sorry! Please type with parameters:\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            + \"deadline p/PERSON\\n dt/DATE (eg.02-Sep-2019)\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String MESSAGE_INVALID_DONECOMMAND_FORMAT \u003d \"Sorry! Please type with parameters:\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            + \"done p/PERSON\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public static final String MESSAGE_INVALID_BACKCOMMAND_FORMAT \u003d \"Sorry! Please type with parameters:\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            + \"back\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String MESSAGE_INVALID_FINDCOMMAND_FORMAT \u003d \"Sorry! Please type with parameters:\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            + \"find p/PERSON\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final String MESSAGE_INVALID_SORT_COMMAND_FORMAT \u003d \"Sorry! Please input sort by date, amount \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            + \"or name.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String MESSAGE_FIND_REIMBURSEMENT \u003d \"Find person %s\\n%s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String MESSAGE_ADD_DEADLINE \u003d \"Added deadline %s to\\n%s\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String MESSAGE_DONE_REIMBURSEMENT \u003d \"Done:\\n%s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 25,
      "kangyeelim": 4,
      "CoderStellaJ": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.transaction.ui.TransactionMessages.MESSAGE_ADD_TRANSACTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.Transaction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Adds a transaction to the transaction list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private Transaction transaction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Transaction}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public AddCommand(Transaction transaction) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.transaction \u003d transaction;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public CommandResult execute(Model model, seedu.address.person.model.Model personModel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        model.addTransaction(transaction);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_TRANSACTION, transaction));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 3,
      "kangyeelim": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/commands/BackCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.logic.exception.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.exception.NoSuchIndexException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.exception.NoSuchPersonException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Backs out from a find command interface to the complete transaction list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class BackCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"back\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public CommandResult execute(Model model, seedu.address.person.model.Model personModel)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throws NoSuchIndexException, CommandException, NoSuchPersonException, ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/commands/Command.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.logic.exception.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.exception.NoSuchIndexException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.exception.NoSuchPersonException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws NoSuchIndexException If an error occurs when that Transaction is not in the list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws NoSuchPersonException If an error occurs when a Person is not in the data base."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public abstract CommandResult execute(Model model, seedu.address.person.model.Model personModel)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throws NoSuchIndexException, CommandException, NoSuchPersonException, ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.OverallCommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class CommandResult extends OverallCommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean exit) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        super(feedbackToUser, exit);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/commands/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.logic.exception.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.exception.NoSuchIndexException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.exception.NoSuchPersonException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Deletes a transaction to the transaction list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public abstract class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public abstract CommandResult execute(Model model, seedu.address.person.model.Model personModel)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throws NoSuchIndexException, CommandException, NoSuchPersonException, ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/commands/DeleteIndexCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.transaction.ui.TransactionMessages.MESSAGE_DELETE_TRANSACTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.logic.exception.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.Transaction;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.ui.TransactionMessages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Deletes a transaction to the transaction list according to the index shown on UI."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class DeleteIndexCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Creates an DeleteIndexCommand to delete the specified {@code Transaction} according to index."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public DeleteIndexCommand(int index) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public CommandResult execute(Model model, seedu.address.person.model.Model personModel) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Transaction transaction;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            transaction \u003d model.findTransactionInFilteredListByIndex(index);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            model.deleteTransaction(index);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new ParseException(TransactionMessages.MESSAGE_NO_SUCH_TRANSACTION);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TRANSACTION, transaction));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 3,
      "kangyeelim": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/commands/DeleteNameCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.transaction.ui.TransactionMessages.MESSAGE_DELETE_BY_PERSON;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Deletes a transaction to the transaction list according to the person."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class DeleteNameCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private Person person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Creates an DeleteIndexCommand to delete the specified {@code Transaction} according to person."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public DeleteNameCommand(Person person) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public CommandResult execute(Model model, seedu.address.person.model.Model personModel) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        model.deleteAllTransactionOfPerson(person);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_BY_PERSON, person));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 3,
      "kangyeelim": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.transaction.ui.TransactionMessages.MESSAGE_DUPLICATE_TRANSACTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.transaction.ui.TransactionMessages.MESSAGE_NO_SUCH_PERSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.transaction.ui.TransactionMessages.MESSAGE_TRANSACTION_EDITED;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.logic.exception.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.Transaction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.exception.NoSuchIndexException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.exception.NoSuchPersonException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Edits a transaction in the transaction list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private static int id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private EditTransactionDescriptor editTransactionDescriptor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Creates an EditCommand to edit the specified {@code Transaction}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public EditCommand(int index, EditTransactionDescriptor editTransactionDescriptor) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.id \u003d index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.editTransactionDescriptor \u003d new EditTransactionDescriptor(editTransactionDescriptor);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public CommandResult execute(Model model, seedu.address.person.model.Model personModel)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throws NoSuchIndexException, CommandException, NoSuchPersonException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Transaction transactionToEdit \u003d model.findTransactionInFilteredListByIndex(index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        logger.info(\"trans to edit: \" + transactionToEdit.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Transaction editedTransaction \u003d createdEditedTransaction(transactionToEdit,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                editTransactionDescriptor, personModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (!transactionToEdit.equals(editedTransaction) \u0026\u0026 model.hasTransaction(editedTransaction)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TRANSACTION);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (!personModel.hasPerson(editedTransaction.getPerson())) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new NoSuchPersonException(MESSAGE_NO_SUCH_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            LocalDate.parse(editedTransaction.getDate(), Transaction.DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new ParseException(\"Please input the correct date format. DD-MMM-YYYY (eg. 02-Sep-2019).\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        model.setTransaction(transactionToEdit, editedTransaction);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_TRANSACTION_EDITED, editedTransaction));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Creates the edited transaction according to new inputted attributes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param transactionToEdit Transaction to be edited."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param editTransactionDescriptor New Transaction descripter with edited attributes."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param personModel model of address book."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Edited transaction."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private static Transaction createdEditedTransaction(Transaction transactionToEdit,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                                                        EditTransactionDescriptor editTransactionDescriptor,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                                                        seedu.address.person.model.Model personModel) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String updatedDate \u003d editTransactionDescriptor.getDate().orElse(transactionToEdit.getDate());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String updatedDescription \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                editTransactionDescriptor.getDescription().orElse(transactionToEdit.getDescription());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String updatedCategory \u003d editTransactionDescriptor.getCategory().orElse(transactionToEdit.getCategory());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        double updatedAmount \u003d editTransactionDescriptor.getAmount().orElse(transactionToEdit.getAmount());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Person updatedPerson \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                personModel.getPersonByName(editTransactionDescriptor.getName().orElse(transactionToEdit.getName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        boolean updatedIsReimbursed \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                editTransactionDescriptor.getIsReimbursed().orElse(transactionToEdit.getIsReimbursed());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return new Transaction(updatedDate, updatedDescription, updatedCategory, updatedAmount,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                updatedPerson, id, updatedIsReimbursed);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Stores the details to edit the transaction with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * corresponding field value of the transaction."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static class EditTransactionDescriptor {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        private String date;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        private String description;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        private String category;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        private Double amount;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        private String name;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        private boolean isReimbursed;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        public EditTransactionDescriptor() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "         */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        public EditTransactionDescriptor(EditTransactionDescriptor toCopy) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            setCategory(toCopy.category);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            setIsReimbursed(toCopy.isReimbursed);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "         */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return CollectionUtil.isAnyNonNull(date, description, category, amount, name);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        public void setDate(String date) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        public Optional\u003cString\u003e getDate() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        public void setDescription(String description) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        public Optional\u003cString\u003e getDescription() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        public void setCategory(String category) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            this.category \u003d category;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        public Optional\u003cString\u003e getCategory() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return Optional.ofNullable(category);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        public void setAmount(Double amount) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        public Optional\u003cDouble\u003e getAmount() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        public void setName(String name) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        public Optional\u003cString\u003e getName() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        public void setIsReimbursed(boolean isReimbursed) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            this.isReimbursed \u003d isReimbursed;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        public Optional\u003cBoolean\u003e getIsReimbursed() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return Optional.ofNullable(isReimbursed);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            if (!(other instanceof EditTransactionDescriptor)) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            EditTransactionDescriptor e \u003d (EditTransactionDescriptor) other;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    \u0026\u0026 getCategory().equals(e.getCategory())"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    \u0026\u0026 getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    \u0026\u0026 getName().equals(e.getName())"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    \u0026\u0026 getIsReimbursed().equals(e.getIsReimbursed());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 7,
      "kangyeelim": 187
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/commands/ExitCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.ui.TransactionMessages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public CommandResult execute(seedu.address.transaction.model.Model model,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                                 seedu.address.person.model.Model personModel) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return new CommandResult(TransactionMessages.MESSAGE_EXIT_ACKNOWLEDGEMENT, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/commands/FindCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.transaction.ui.TransactionMessages.MESSAGE_FIND_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.TransactionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Finds a transaction in the transaction list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private final TransactionContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Creates a FincCommand to find the specified {@code Transaction}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public FindCommand(TransactionContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public CommandResult execute(Model model, seedu.address.person.model.Model personModel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        model.updatePredicate(predicate);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_FIND_COMMAND, model.getFilteredList().size()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 3,
      "kangyeelim": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/commands/SortAmountCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.ui.TransactionMessages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Sorts transactions in the transaction list by their amount."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * From the largest amount to smallest amount, in descending amount."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class SortAmountCommand extends SortCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public CommandResult execute(Model model, seedu.address.person.model.Model personModel) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        model.sortByAmount();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return new CommandResult(TransactionMessages.MESSAGE_SORTED_BY_AMOUNT);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/commands/SortCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Represents a sort command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * It is also a {@code Command} and inherits from it."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public abstract class SortCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/commands/SortDateCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.ui.TransactionMessages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Sorts transactions in the transaction list by their date."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * From the oldest date to latest date."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class SortDateCommand extends SortCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public CommandResult execute(Model model, seedu.address.person.model.Model personModel) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        model.sortByDate();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return new CommandResult(TransactionMessages.MESSAGE_SORTED_BY_DATE);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/commands/SortNameCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.ui.TransactionMessages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Sorts transactions in the transaction list by their name."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Sorts it in alphabetical order of name."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class SortNameCommand extends SortCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public CommandResult execute(Model model, seedu.address.person.model.Model personModel) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        model.sortByName();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return new CommandResult(TransactionMessages.MESSAGE_SORTED_BY_NAME);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/commands/SortResetCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.ui.TransactionMessages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Resets transactions in the transaction list to their original ordering when read from the file."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class SortResetCommand extends SortCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public CommandResult execute(Model model, seedu.address.person.model.Model personModel) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        model.sortReset();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return new CommandResult(TransactionMessages.MESSAGE_RESET_TO_ORIGINAL_ORDER);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/logic/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.logic.exception.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.Transaction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.exception.NoSuchPersonException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.ui.TransactionMessages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.Prefix;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class AddCommandParser {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws NoSuchPersonException if user inputs a transaction done by someone not in date base"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public AddCommand parse(String args, int transactionListSize, Model personModel)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throws ParseException, NoSuchPersonException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATETIME, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                        PREFIX_CATEGORY, PREFIX_AMOUNT, PREFIX_PERSON);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATETIME, PREFIX_DESCRIPTION, PREFIX_CATEGORY,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                PREFIX_AMOUNT, PREFIX_PERSON) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new ParseException(TransactionMessages.MESSAGE_INVALID_ADD_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String datetime \u003d argMultimap.getValue(PREFIX_DATETIME).get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String description \u003d argMultimap.getValue(PREFIX_DESCRIPTION).get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String category \u003d argMultimap.getValue(PREFIX_CATEGORY).get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String amountString \u003d argMultimap.getValue(PREFIX_AMOUNT).get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        double amount \u003d Double.parseDouble(amountString);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Person person \u003d personModel.getPersonByName(argMultimap.getValue(PREFIX_PERSON).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Transaction transaction \u003d new Transaction(datetime, description, category, amount, person,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    transactionListSize + 1, false);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            AddCommand addCommand \u003d new AddCommand(transaction);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return addCommand;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (PersonNotFoundException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new NoSuchPersonException(TransactionMessages.MESSAGE_NO_SUCH_PERSON);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new ParseException(TransactionMessages.MESSAGE_WRONG_DATE_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new ParseException(TransactionMessages.MESSAGE_INVALID_ADD_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/logic/DeleteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_PERSON;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.commands.DeleteIndexCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.commands.DeleteNameCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.logic.exception.NotANumberException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.exception.NoSuchPersonException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.ui.TransactionMessages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Parses input arguments and creates a new DeleteIndexCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class DeleteCommandParser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteIndexCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * and returns a DeleteIndexCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws NotANumberException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static DeleteCommand parse(String userInput, Model personModel) throws NotANumberException,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            NoSuchPersonException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (userInput.length() \u003e 1 \u0026\u0026 userInput.substring(1).matches(\"-?(0|[1-9]\\\\d*)\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            int index \u003d Integer.parseInt(userInput.substring(1));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            DeleteIndexCommand deleteIndexCommand \u003d new DeleteIndexCommand(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return deleteIndexCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(userInput, PREFIX_PERSON);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_PERSON) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new NotANumberException(TransactionMessages.MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Person person \u003d personModel.getPersonByName(argMultimap.getValue(PREFIX_PERSON).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            DeleteNameCommand deleteNameCommand \u003d new DeleteNameCommand(person);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return deleteNameCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (PersonNotFoundException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new NoSuchPersonException(TransactionMessages.MESSAGE_NO_SUCH_PERSON);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/logic/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.transaction.ui.TransactionMessages.MESSAGE_INVALID_EDIT_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "//import static seedu.address.transaction.ui.TransactionMessages.MESSAGE_NOT_EDITED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_DATETIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.logic.exception.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.util.Prefix;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class EditCommandParser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private final DateTimeFormatter myFormatter \u003d DateTimeFormatter.ofPattern(\"dd-MMM-yyyy\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * and returns a EditCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DATETIME, PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                        PREFIX_CATEGORY, PREFIX_AMOUNT, PREFIX_PERSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            index \u003d Integer.parseInt(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_EDIT_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DATETIME, PREFIX_DESCRIPTION, PREFIX_CATEGORY, PREFIX_AMOUNT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                PREFIX_PERSON)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_EDIT_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        EditCommand.EditTransactionDescriptor editPersonDescriptor \u003d new EditCommand.EditTransactionDescriptor();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATETIME).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            editPersonDescriptor.setDate(argMultimap.getValue(PREFIX_DATETIME).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            editPersonDescriptor.setDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CATEGORY).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            editPersonDescriptor.setCategory(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            editPersonDescriptor.setAmount(Double.parseDouble(argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PERSON).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            editPersonDescriptor.setName(argMultimap.getValue(PREFIX_PERSON).get());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        /*if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new ParseException(MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }*/"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Returns false if all of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 20,
      "kangyeelim": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/logic/FindCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.commands.FindCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.logic.exception.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.TransactionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.ui.TransactionMessages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class FindCommandParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                    TransactionMessages.MESSAGE_INVALID_FIND_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return new FindCommand(new TransactionContainsKeywordsPredicate((Arrays.asList(nameKeywords))));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.Transaction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.util.TransactionList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws Exception If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    CommandResult execute(String commandText) throws Exception;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Writes the transaction list into the transactionHistory text file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws Exception If an error occurs when writing into the text file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    void writeIntoTransactionFile() throws IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *Sets the transaction in the transaction list to a new transaction to replace it."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param transaction Transaction in the transaction list to be replaced."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param newTransaction Transaction to replace {@code transaction}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    void setTransaction(Transaction transaction, Transaction newTransaction);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns the transaction list in the model manager."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Transaction List in the model manager."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    TransactionList getTransactionList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns the filtered list of the transaction list by applying the predicate in model manager."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Filtered list according to predicate in model manager."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    TransactionList getFilteredList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Adds a transaction into the transaction list in model manager."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param transaction Transaction to be added."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    void addTransaction(Transaction transaction);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.Transaction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.storage.StorageManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.util.TransactionList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Manages the logic behind the transaction tab."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private final StorageManager storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private final TransactionTabParser parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private final seedu.address.person.storage.Storage personStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private final seedu.address.person.model.Model personModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private final seedu.address.reimbursement.model.Model reimbursementModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private final seedu.address.reimbursement.storage.Storage reimbursementStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public LogicManager(Model transactionModel, StorageManager transactionStorage,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                        seedu.address.person.model.Model personModel,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                        seedu.address.person.storage.Storage personStorage,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                        seedu.address.reimbursement.model.Model reimbursementModel,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                        seedu.address.reimbursement.storage.Storage reimbursementStorage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.model \u003d transactionModel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.storage \u003d transactionStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.parser \u003d new TransactionTabParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.personStorage \u003d personStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.personModel \u003d personModel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.reimbursementModel \u003d reimbursementModel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.reimbursementStorage \u003d reimbursementStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public CommandResult execute(String commandText)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        model.resetPredicate();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Command command \u003d parser.parseCommand(commandText,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                model.getTransactionList().size(), personModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        CommandResult commandResult \u003d command.execute(model, personModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        model.updateIndexes();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        personStorage.saveAddressBook(personModel.getAddressBook());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        storage.writeFile(model.getTransactionList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        reimbursementModel.updateReimbursementList("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                reimbursementStorage.getReimbursementFromFile(model.getTransactionList()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        reimbursementStorage.writeFile(reimbursementModel.getReimbursementList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void writeIntoTransactionFile() throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        storage.writeFile(model.getTransactionList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void setTransaction(Transaction transaction, Transaction newTransaction) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        model.setTransaction(transaction, newTransaction);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public TransactionList getTransactionList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return model.getTransactionList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public TransactionList getFilteredList() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return model.getFilteredList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void addTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        model.addTransaction(transaction);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 77,
      "CoderStellaJ": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/logic/SortCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.commands.SortAmountCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.commands.SortCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.commands.SortDateCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.commands.SortNameCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.commands.SortResetCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.logic.exception.NoSuchSortException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.ui.TransactionMessages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Parses input arguments and creates a new SortCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class SortCommandParser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * and returns a SortCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws NoSuchSortException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public SortCommand parse(String args) throws NoSuchSortException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String[] argsArr \u003d args.split(\" \");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (argsArr.length \u003e 1 \u0026\u0026 argsArr[1].equals(\"date\")) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return new SortDateCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (argsArr.length \u003e 1 \u0026\u0026 argsArr[1].equals(\"name\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return new SortNameCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (argsArr.length \u003e 1 \u0026\u0026 argsArr[1].equals(\"amount\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return new SortAmountCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (argsArr.length \u003e 1 \u0026\u0026 argsArr[1].equals(\"reset\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return new SortResetCommand();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new NoSuchSortException(TransactionMessages.MESSAGE_NO_SUCH_SORT_COMMAND);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/logic/TransactionTabParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.commands.BackCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.commands.DeleteIndexCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.commands.EditCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.commands.ExitCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.commands.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.commands.SortCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.logic.exception.NoSuchSortException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.logic.exception.NotANumberException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.logic.exception.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.exception.NoSuchPersonException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.ui.TransactionMessages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class TransactionTabParser {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws NoSuchPersonException if the user inputs a person not found in data base."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws NotANumberException if the user input does not conform the expected format for delete."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws NoSuchSortException if the user input does not conform the expected format for sort."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public Command parseCommand(String userInput, int transactionListSize, Model personModel)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throws ParseException, NoSuchPersonException, NotANumberException, NoSuchSortException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new ParseException(TransactionMessages.MESSAGE_INVALID_ADD_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return new AddCommandParser().parse(arguments, transactionListSize, personModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        case DeleteIndexCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return new DeleteCommandParser().parse(arguments, personModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        case BackCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return new BackCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new ParseException(TransactionMessages.MESSAGE_NO_SUCH_COMMAND);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/logic/exception/NoSuchSortException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.logic.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Signals that the user input is incorrect for a sort command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class NoSuchSortException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private String msg;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public NoSuchSortException(String msg) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.msg \u003d msg;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return this.msg;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/logic/exception/NotANumberException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.logic.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Signals that the a number user input was expected but not given."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class NotANumberException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private String msg;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public NotANumberException(String msg) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.msg \u003d msg;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return this.msg;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/logic/exception/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.logic.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Signals that the user input is incorrectly given in general."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class ParseException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private String msg;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public ParseException(String msg) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.msg \u003d msg;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return this.msg;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.util.TransactionList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Adds the transaction to the transaction list in model"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param transaction Transaction to be added."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    void addTransaction(Transaction transaction);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Finds the transaction in the filtered list in model and returns it."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param index Index of the transaction in the filtered list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Transaction desired."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    Transaction findTransactionInFilteredListByIndex(int index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Deletes the transaction according to the index in the filtered list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Deletes the transaction in the transaction list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param index Index of the filtered list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    void deleteTransaction(int index);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns the transaction list by applying the default predicate"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Transaction list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    TransactionList getTransactionList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Sets a transaction in transaction list to a new transaction."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param transactionToEdit Transaction to be replaced."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param editedTransaction Transaction to replace {@code transactionToEdit}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    void setTransaction(Transaction transactionToEdit, Transaction editedTransaction);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Checks if the transaction exists in the transaction list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param editedTransaction Transaction to find"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Boolean if transaction exists in transaction list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    boolean hasTransaction(Transaction editedTransaction);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Updates all the indexes of the transactions in the transaction list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    void updateIndexes();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Sorts all the transactions in the transaction list by date."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    void sortByDate();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Sorts all the transactions in the transaction list by name."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    void sortByName();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Sorts all the transactions in the transaction list by amount."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    void sortByAmount();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Resets the order of the transactions in the transaction list to the original order of input when file was read."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    void sortReset();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns the filtered list after applying the predicate on the transaction list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Filtered list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    TransactionList getFilteredList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Updates the predicate in the model to be applied on the transaction list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param predicate Predicate that was created with the user input keywords."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    void updatePredicate(TransactionContainsKeywordsPredicate predicate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Resets the predicate to the default one where all is true."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    void resetPredicate();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Deletes all transactions in transaction list that contains the same person as specified."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param person Person to check for in transaction."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    void deleteAllTransactionOfPerson(Person person);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.util.TransactionList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private final TransactionList transactionList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private TransactionList filteredList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private Predicate\u003cTransaction\u003e predicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Initializes a ModelManager with the given transaction list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public ModelManager(TransactionList transactionList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.transactionList \u003d transactionList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        ArrayList\u003cTransaction\u003e actualList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        for (int i \u003d 0; i \u003c transactionList.size(); i++) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            actualList.add(transactionList.get(i));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.filteredList \u003d new TransactionList(actualList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.predicate \u003d transaction -\u003e true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public TransactionList getTransactionList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return this.transactionList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void setTransaction(Transaction transactionToEdit, Transaction editedTransaction) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        for (int i \u003d 0; i \u003c transactionList.size(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            Transaction curr \u003d transactionList.get(i);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            if (curr.equals(transactionToEdit)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                transactionList.set(i, editedTransaction);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public boolean hasTransaction(Transaction editedTransaction) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        for (int i \u003d 0; i \u003c transactionList.size(); i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            if (transactionList.get(i).equals(editedTransaction)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void addTransaction(Transaction trans) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        transactionList.add(trans);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public Transaction findTransactionInFilteredListByIndex(int index) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        logger.info(\"size of filtered list: \" + filteredList.size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Transaction transaction \u003d filteredList.get(index - 1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        //Transaction transaction \u003d transactionList.get(index - 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        logger.info(\"transaction found: \" + transaction.toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        logger.info(\"actual: \" + transactionList.get(index - 1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return transaction;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void deleteTransaction(int index) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Transaction transaction \u003d filteredList.get(index - 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        for (int i \u003d 0; i \u003c transactionList.size(); i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            if (transactionList.get(i).equals(transaction)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                transactionList.delete(i);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void updateIndexes() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        for (int i \u003d 0; i \u003c transactionList.size(); i++) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            transactionList.get(i).setId(i + 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void sortByDate() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        transactionList.sortByDate();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void sortByName() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        transactionList.sortByName();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void sortByAmount() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        transactionList.sortByAmount();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void sortReset() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        transactionList.unSort();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void resetPredicate() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.predicate \u003d transaction -\u003e true;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void deleteAllTransactionOfPerson(Person person) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        for (int i \u003d 0; i \u003c transactionList.size(); i++) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            if (transactionList.get(i).getPerson().equals(person)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                logger.info(person.toString());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                transactionList.delete(i);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                i--;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public TransactionList getFilteredList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        List\u003cTransaction\u003e list \u003d this.transactionList.stream().filter(predicate).collect(Collectors.toList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        ArrayList\u003cTransaction\u003e arrayList \u003d new ArrayList\u003cTransaction\u003e(list);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.filteredList \u003d new TransactionList(arrayList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return filteredList;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void updatePredicate(TransactionContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 141
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/model/Transaction.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Represents a transaction with its specified attributes."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class Transaction {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd-MMM-yyyy\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public static final DecimalFormat DECIMAL_FORMAT \u003d new DecimalFormat(\"#.##\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private double amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private Person person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private String id;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private boolean isReimbursed;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Initializes a Transaction with the given information."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param date date of the transaction done."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param description short description of the transaction."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param category category of the transaction."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param amount amount of money spent or gained for that transaction."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param person person from the data base that is accountable for that transaction."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param id id of the person to be used in populating the UI table."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param isReimbursed boolean of whether the transaction amount paid by the person has been reimbursed."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public Transaction(String date, String description, String category,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                       double amount, Person person, int id, boolean isReimbursed) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.date \u003d LocalDate.parse(date, DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.amount \u003d Double.parseDouble(DECIMAL_FORMAT.format(amount));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.name \u003d person.getName().toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.id \u003d \"\" + id;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.isReimbursed \u003d isReimbursed;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public Person getPerson() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return this.person;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void setPerson(Person person) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return date.format(DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public LocalDate getDateObject() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public double getAmount() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return this.id;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void setId(int i) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.id \u003d \"\" + i;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return this.isReimbursed;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return this.person.getName().toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public boolean getIsReimbursed() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return this.isReimbursed;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void updateStatus() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.isReimbursed \u003d true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private String isOne(boolean isReimbursed) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return isReimbursed ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *Formats the Transaction object to be written into a text file."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Formatted String."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String toWriteIntoFile() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String msg \u003d this.date.format(DATE_TIME_FORMATTER) + \" | \" + this.description + \" | \" + this.category"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \" | \" + this.amount + \" | \" + this.person.getName() + \" | \" + isOne(this.isReimbursed);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Formats the Transaction object to be shown as a response."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Formatted String."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String msg \u003d \"Date: \" + this.date.format(DATE_TIME_FORMATTER) + \"\\nDescription: \" + this.description"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + \"\\nCategory: \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                + this.category + \"\\nAmount: $\" + this.amount + \"\\nPaid by: \" + this.person.getName();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (!(other instanceof Transaction)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Transaction editedTransaction \u003d (Transaction) other;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return this.person.equals(editedTransaction.getPerson())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                \u0026\u0026 this.description.equals(editedTransaction.getDescription())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                \u0026\u0026 this.category.equals(editedTransaction.getCategory())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                \u0026\u0026 this.amount \u003d\u003d editedTransaction.getAmount()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                \u0026\u0026 this.getDate().equals(editedTransaction.getDate());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EvonDong": 4,
      "kangyeelim": 126,
      "CoderStellaJ": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/model/TransactionContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Tests that a {@code Transactions}\u0027s attributes matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class TransactionContainsKeywordsPredicate implements Predicate\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public TransactionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public boolean test(Transaction transaction) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(transaction.getName(), keyword))"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                || keywords.stream()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                        .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(transaction.getDate(), keyword))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                || keywords.stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                        .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(transaction.getCategory(), keyword))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                || keywords.stream()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                        .anyMatch(keyword -\u003e StringUtil"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                                .containsWordIgnoreCase(transaction.getDescription(), keyword))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                || keywords.stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                        .anyMatch(keyword -\u003e StringUtil"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                                .containsWordIgnoreCase(String.valueOf(transaction.getAmount()), keyword));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                || (other instanceof TransactionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                \u0026\u0026 keywords.equals(((TransactionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/model/exception/NoSuchIndexException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.model.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Signals that the user input is incorrect for an index that does not exist."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class NoSuchIndexException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private String msg;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public NoSuchIndexException(String msg) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.msg \u003d msg;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return this.msg;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/model/exception/NoSuchPersonException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.model.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Signals that the user inputs a person not in the data base."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class NoSuchPersonException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private String msg;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public NoSuchPersonException(String msg) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.msg \u003d msg;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return this.msg;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.util.TransactionList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public interface Storage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Reads in the transaction list from the specified text file in Storage."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Transaction List read."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    TransactionList readTransactionList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Write the given transaction list into the specified text file in Storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param transactionList Transaction List to write into the file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws IOException If an error occurs when writing the file."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    void writeFile(TransactionList transactionList) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.Transaction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.util.TransactionList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Manages storage of transaction data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private final String filepath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private final seedu.address.person.model.Model personModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public StorageManager(String filepath, seedu.address.person.model.Model personModel) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.filepath \u003d filepath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.personModel \u003d personModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public TransactionList readTransactionList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            ArrayList\u003cTransaction\u003e transactionArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            File f \u003d new File(filepath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            f.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            BufferedReader bfr \u003d new BufferedReader(new FileReader(f));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            String line \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            while ((line \u003d bfr.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                Transaction t \u003d this.readInFileLine(line, personModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                transactionArrayList.add(t);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return new TransactionList(transactionArrayList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return new TransactionList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void writeFile(TransactionList transactionList) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        FileWriter fw \u003d new FileWriter(this.filepath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String textFileMsg \u003d \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        for (int i \u003d 0; i \u003c transactionList.size(); i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                textFileMsg \u003d textFileMsg + (i + 1) + \". \" + transactionList.get(i).toWriteIntoFile();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                textFileMsg \u003d textFileMsg + System.lineSeparator() + (i + 1) + \". \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                        + transactionList.get(i).toWriteIntoFile();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        fw.write(textFileMsg);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Reads in a single text file line and parses it to create the {@code Transaction} object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param line Line of text."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param personModel Address Book model."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Transaction created."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private static Transaction readInFileLine(String line, seedu.address.person.model.Model personModel) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String[] stringArr \u003d line.split(\" [|] \", 0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        String[] dateTimeArr \u003d stringArr[0].split(\" \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Person person \u003d personModel.getPersonByName(stringArr[4]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Transaction t \u003d new Transaction(dateTimeArr[1], stringArr[1],"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                stringArr[2], Double.parseDouble(stringArr[3]), person,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                Integer.parseInt(dateTimeArr[0].split(\"[.]\")[0]), isReimbursed(stringArr[5]));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return t;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private static boolean isReimbursed(String num) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return num.equals(\"1\") ? true : false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/ui/TransactionMessages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Formats the Ui return responses for different commands to be shown to user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class TransactionMessages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TRANSACTION \u003d \"This transaction is already recorded.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final String MESSAGE_NO_SUCH_SORT_COMMAND \u003d \"The transactions can be sorted by date, \""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            + \"amount and name.\\nPlease input sort by date/amount/name\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final String MESSAGE_RESET_TO_ORIGINAL_ORDER \u003d \"The transactions are now reset to original \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            + \"order of input when treasurerPro was just open.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final String MESSAGE_INVALID_FIND_COMMAND_FORMAT \u003d \"Sorry! Please type find with your keywords:\\n \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            + \"find KEYWORDS (eg. find poster printing)\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final String MESSAGE_SORTED_BY_NAME \u003d \"The transactions are now sorted by name.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final String MESSAGE_SORTED_BY_DATE \u003d \"The transactions are now sorted by date.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final String MESSAGE_SORTED_BY_AMOUNT \u003d \"The transactions are now sorted by the amount \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            + \"of money involved.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final String MESSAGE_NO_SUCH_PERSON \u003d \"Sorry! There is no such member in our database. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            + \"Do add the member in.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final String MESSAGE_NO_SUCH_COMMAND \u003d \"Sorry! There is no such command.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final String MESSAGE_INVALID_ADD_COMMAND_FORMAT \u003d \"Sorry! Please type add with parameters:\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            + \"add \\ndt/DATE (eg.02-Sep-2019)\\n d/DESCRIPTION\\n c/CATEGORY\\n a/AMOUNT\\n p/PERSON\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final String MESSAGE_INVALID_EDIT_COMMAND_FORMAT \u003d \"Sorry! Please type edit with the index \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            + \"and any parameters to be edited:\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            + \"add \\ndt/DATE (eg.02-Sep-2019)\\n d/DESCRIPTION\\n c/CATEGORY\\n a/AMOUNT\\n p/PERSON\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"Sorry! Did not manage to edit transaction!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d \"Sorry! Please input delete with the index of \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            + \"the transaction or name of person to delete transactions:\\n delete ID (eg. delete 2)\\nOR \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            + \"\\ndelete p/NAME\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final String MESSAGE_PERSON_CANNOT_BE_DELETED \u003d \"Sorry! This person that you are intending to \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            + \"delete still has transaction records.\\nPlease make sure the person is reimbursed and delete \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            + \"those transaction records first.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final String MESSAGE_WRONG_DATE_FORMAT \u003d \"Sorry! The date should be in the format DD-MMM-YYYY \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            + \"and is case-sensitive:\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            + \"02-Sep-2019 or 24-Aug-2019 etc\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final String MESSAGE_NO_SUCH_TRANSACTION \u003d \"Sorry! There is no such transaction of the inputted \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            + \"index.\\nPlease make sure the index is in the table.\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String MESSAGE_TRANSACTION_EDITED \u003d \"Edited Transaction:\\n%s\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String MESSAGE_FIND_COMMAND \u003d \"I\u0027ve found %s matching transactions!\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String MESSAGE_ADD_TRANSACTION \u003d \"Added Transaction:\\n%s\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String MESSAGE_DELETE_TRANSACTION \u003d \"Deleted Transaction:\\n%s\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final String MESSAGE_DELETE_BY_PERSON \u003d \"I\u0027ve deleted all transactions by this member:\\n%s\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 6,
      "kangyeelim": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/transaction/util/TransactionList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.Transaction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Wraps all data of the transactions into a list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Duplicates are allowed but are considered the same transaction when commands are done."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class TransactionList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private final ArrayList\u003cTransaction\u003e original;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private ArrayList\u003cTransaction\u003e tArrList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private ObservableList\u003cTransaction\u003e tList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Initialises the transaction list when there are no prior transactions inputted."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public TransactionList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.tArrList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.original \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.tList \u003d FXCollections.observableList(tArrList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Initialises the transaction list when there are prior inputted transactions."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param tArrList Array list of the transactions saved."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public TransactionList(ArrayList\u003cTransaction\u003e tArrList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.tArrList \u003d tArrList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.original \u003d new ArrayList\u003c\u003e(tArrList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.tList \u003d FXCollections.observableList(this.tArrList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns the transaction of given index."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param index Index"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Transaction specified"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @throws IndexOutOfBoundsException If an error occurs when index is out of bounds."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public Transaction get(int index) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (index \u003e\u003d tList.size()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return tList.get(index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Adds transaction to the transaction list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param transaction Transaction to be added."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void add(Transaction transaction) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        tList.add(transaction);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        original.add(transaction);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Deletes transaction at the given index."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param index Index of transaction to be deleted."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void delete(int index) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Transaction transaction \u003d tList.get(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        tList.remove(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        original.remove(transaction);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns integer size of the transaction list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Integer size of the number of transactions in the transaction list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return tList.size();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Sets the transaction at the specified index to a new transaction."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param index Index to replace."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param transaction Transaction to replace current transaction at specified index."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void set(int index, Transaction transaction) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Transaction trans \u003d tList.get(index);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        tList.set(index, transaction);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        int id \u003d original.indexOf(trans);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        original.set(id, transaction);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Resets the order of the transactions in the transaction list to the original order of input when file was read."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void unSort() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        tArrList \u003d new ArrayList\u003c\u003e(original);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        tList \u003d FXCollections.observableList(tArrList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Sorts all the transactions in the transaction list by date."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void sortByDate() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Collections.sort(tList, new SortByDate());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Sorts all the transactions in the transaction list by name."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void sortByName() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Collections.sort(tList, new SortByName());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Sorts all the transactions in the transaction list by amount."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void sortByAmount() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        Collections.sort(tList, new SortByAmount());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns a stream of the transactions in the transaction list."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return Stream of transactions."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public Stream\u003cTransaction\u003e stream() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return this.tList.stream();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Comparator to compare by the name in transaction."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "class SortByName implements Comparator\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    // Used for sorting in ascending order"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public int compare(Transaction a, Transaction b) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return a.getName().compareTo(b.getName());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Comparator to compare by amount in transaction."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "class SortByAmount implements Comparator\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    // Used for sorting in descending order"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public int compare(Transaction a, Transaction b) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (a.getAmount() \u003c b.getAmount()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else if (a.getAmount() \u003d\u003d b.getAmount()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Comparator to compare by date in transaction."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "class SortByDate implements Comparator\u003cTransaction\u003e {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    // Used for sorting in ascending order"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public int compare(Transaction a, Transaction b) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return a.getDateObject().compareTo(b.getDateObject());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 170
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Cashier.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.cashier.logic.Logic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "import seedu.address.inventory.model.Item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Defines the display for the Cashier tab in the user interface."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class Cashier extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private static final String FXML \u003d \"Cashier.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private TableView\u003cItem\u003e tableView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private TableColumn\u003cItem, String\u003e idCol;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private TableColumn\u003cItem, String\u003e descriptionCol;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private TableColumn\u003cItem, Double\u003e priceCol;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private TableColumn\u003cItem, String\u003e quantityCol;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private TableColumn\u003cItem, Double\u003e subtotalCol;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    public Cashier (Logic logic) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        tableView.getItems().setAll(parseTransactionList(logic));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        idCol.setCellValueFactory(new PropertyValueFactory\u003cItem, String\u003e(\"id\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        descriptionCol.setCellValueFactory(new PropertyValueFactory\u003cItem, String\u003e(\"description\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        priceCol.setCellValueFactory(new PropertyValueFactory\u003cItem, Double\u003e(\"price\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        quantityCol.setCellValueFactory(new PropertyValueFactory\u003cItem, String\u003e(\"quantity\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        subtotalCol.setCellValueFactory(new PropertyValueFactory\u003cItem, Double\u003e(\"subtotal\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Parse and construct user datamodel list by looping through a list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * Returns the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @param logic the logic to be used"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @return the list of sales with ID updated"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     * @throws Exception if an item is invalid"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private List\u003cItem\u003e parseTransactionList(Logic logic) throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        // parse and construct User datamodel list by looping your ResultSet rs"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        // and return the list"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        List\u003cItem\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        for (int i \u003d 0; i \u003c logic.getSalesList().size(); i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            logic.getSalesList().get(i).setId(i + 1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            list.add(logic.getSalesList().get(i));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 24,
      "EvonDong": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.OverallCommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        OverallCommandResult execute(String commandText) throws Exception;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 3,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://se-education.org/addressbook-level3/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Home.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.Transaction;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * The Home Tab Pane. Provides the basic application layout containing"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * a table which can be populated with other JavaFX elements."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class Home extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private static final String FXML \u003d \"Home.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private TableView\u003cTransaction\u003e tableView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private TableColumn\u003cTransaction, String\u003e idCol;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private TableColumn\u003cTransaction, String\u003e dateCol;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private TableColumn\u003cTransaction, String\u003e descriptionCol;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private TableColumn\u003cTransaction, String\u003e categoryCol;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private TableColumn\u003cTransaction, Double\u003e amountCol;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private TableColumn\u003cTransaction, String\u003e personCol;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Populates the table to show the transactions in transaction list in the transaction model."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public Home (Logic logic) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        tableView.getItems().setAll(parseTransactionList(logic));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        idCol.setCellValueFactory(new PropertyValueFactory\u003cTransaction, String\u003e(\"id\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        dateCol.setCellValueFactory(new PropertyValueFactory\u003cTransaction, String\u003e(\"date\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        descriptionCol.setCellValueFactory(new PropertyValueFactory\u003cTransaction, String\u003e(\"description\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        categoryCol.setCellValueFactory(new PropertyValueFactory\u003cTransaction, String\u003e(\"category\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        amountCol.setCellValueFactory(new PropertyValueFactory\u003cTransaction, Double\u003e(\"amount\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        personCol.setCellValueFactory(new PropertyValueFactory\u003cTransaction, String\u003e(\"name\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Parses the filtered list in model to update the indexes and put it into a list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param logic Transaction Logic"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return List of transactions"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private List\u003cTransaction\u003e parseTransactionList(Logic logic) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        // parse and construct User data model list by looping your transaction list"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        // and return the list"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        List\u003cTransaction\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        for (int i \u003d 0; i \u003c logic.getFilteredList().size(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            logic.getFilteredList().get(i).setId(i + 1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            list.add(logic.getFilteredList().get(i));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 7,
      "kangyeelim": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Inventory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.logic.Logic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.model.Item;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Defines the display for the Inventory tab in the user interface."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class Inventory extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private static final String FXML \u003d \"Inventory.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private TableView\u003cItem\u003e tableView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private TableColumn\u003cItem, String\u003e idCol;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private TableColumn\u003cItem, String\u003e descriptionCol;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private TableColumn\u003cItem, String\u003e categoryCol;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private TableColumn\u003cItem, Integer\u003e quantityCol;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private TableColumn\u003cItem, Double\u003e costCol;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private TableColumn\u003cItem, Double\u003e totalCostCol;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private TableColumn\u003cItem, Double\u003e priceCol;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private TableColumn\u003cItem, Double\u003e expectedRevenueCol;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    public Inventory (Logic logic) throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        tableView.getItems().setAll(parseInventoryList(logic));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        idCol.setCellValueFactory(new PropertyValueFactory\u003cItem, String\u003e(\"id\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        descriptionCol.setCellValueFactory(new PropertyValueFactory\u003cItem, String\u003e(\"description\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        categoryCol.setCellValueFactory(new PropertyValueFactory\u003cItem, String\u003e(\"category\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        quantityCol.setCellValueFactory(new PropertyValueFactory\u003cItem, Integer\u003e(\"quantity\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        costCol.setCellValueFactory(new PropertyValueFactory\u003cItem, Double\u003e(\"cost\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        totalCostCol.setCellValueFactory(new PropertyValueFactory\u003cItem, Double\u003e(\"totalCost\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        priceCol.setCellValueFactory(new PropertyValueFactory\u003cItem, Double\u003e(\"price\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        expectedRevenueCol.setCellValueFactory(new PropertyValueFactory\u003cItem, Double\u003e(\"subtotal\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * Parses the filtered list in model to update the indexes and put it into a list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * @param logic Inventory Logic"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     * @return List of Items."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private List\u003cItem\u003e parseInventoryList(Logic logic) throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        // parse and construct User datamodel list by looping your ResultSet rs"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        // and return the list"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        List\u003cItem\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        for (int i \u003d 0; i \u003c logic.getInventoryList().size(); i++) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            logic.getInventoryList().getItemByIndex(i).setId(i + 1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            list.add(logic.getInventoryList().getItemByIndex(i));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 11,
      "MichaelaTSH": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Lion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Defines the display for the Lion in the user interface."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class Lion extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private static final String FXML \u003d \"Lion.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private Label response;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public Lion () {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public void setResponse(String response) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.response.setText(response);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 15,
      "kangyeelim": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.ui.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.ui.logic.LogicManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.util.OverallCommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private seedu.address.transaction.logic.Logic transactionLogic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private seedu.address.reimbursement.logic.Logic reimbursementLogic;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private seedu.address.inventory.logic.Logic inventoryLogic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private seedu.address.person.logic.Logic personLogic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private seedu.address.cashier.logic.Logic cashierLogic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private seedu.address.overview.logic.Logic overviewLogic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private Home home;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private Inventory inventory;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private Reimbursements reimbursements;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private Cashier cashier;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private Overview overview;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private Lion lion;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private Logic uiLogic;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private AnchorPane homePlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private AnchorPane inventoryPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private AnchorPane reimbursementsPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private AnchorPane cashierPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private AnchorPane overviewPlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private AnchorPane membersPlaceholder;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private VBox lionPlaceholder;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private TabPane tabPane;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private Tab homeTab;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private Tab membersTab;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private Tab reimbursementsTab;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private Tab inventoryTab;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private Tab cashierTab;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private Tab overviewTab;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public MainWindow(Stage primaryStage, seedu.address.transaction.logic.Logic transactionLogic,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                      seedu.address.reimbursement.logic.Logic reimbursementLogic,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                      seedu.address.inventory.logic.Logic inventoryLogic,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                      seedu.address.person.logic.Logic personLogic,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                      seedu.address.cashier.logic.Logic cashierLogic,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                      seedu.address.overview.logic.Logic overviewLogic) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        //add all our logicManager"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.transactionLogic \u003d transactionLogic;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.reimbursementLogic \u003d reimbursementLogic;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        this.inventoryLogic \u003d inventoryLogic;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.personLogic \u003d personLogic;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.cashierLogic \u003d cashierLogic;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.overviewLogic \u003d overviewLogic;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.uiLogic \u003d new LogicManager(tabPane, helpWindow);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        //setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        //setAccelerators();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /*private void setAccelerators() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    void fillInnerParts() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        home \u003d new Home(transactionLogic);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        homePlaceholder.getChildren().add(home.getRoot());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        PersonListPanel personListPanel \u003d new PersonListPanel(personLogic.getFilteredPersonList());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        membersPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        reimbursements \u003d new Reimbursements(reimbursementLogic);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        reimbursementsPlaceholder.getChildren().add(reimbursements.getRoot());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        inventory \u003d new Inventory(inventoryLogic);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        inventoryPlaceholder.getChildren().add(inventory.getRoot());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        cashier \u003d new Cashier(cashierLogic);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        cashierPlaceholder.getChildren().add(cashier.getRoot());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        overview \u003d new Overview(overviewLogic);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        overviewPlaceholder.getChildren().add(overview.getRoot());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        lion \u003d new Lion();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        lionPlaceholder.getChildren().add(lion.getRoot());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     *"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /*private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        personLogic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private OverallCommandResult executeCommand(String commandText) throws Exception {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            OverallCommandResult commandResult;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            if (isUiCommand(commandText)) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                commandResult \u003d uiLogic.execute(commandText);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            } else if (tabPane.getSelectionModel().getSelectedItem().getText().equals(\"Home\")) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                commandResult \u003d transactionLogic.execute(commandText);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            } else if (tabPane.getSelectionModel().getSelectedItem().getText().equals(\"Members\")) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                commandResult \u003d personLogic.execute(commandText);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            } else if (tabPane.getSelectionModel().getSelectedItem().getText().equals(\"Reimbursements\")) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                commandResult \u003d reimbursementLogic.execute(commandText);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            } else if (tabPane.getSelectionModel().getSelectedItem().getText().equals(\"Inventory\")) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                commandResult \u003d inventoryLogic.execute(commandText);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            } else if (tabPane.getSelectionModel().getSelectedItem().getText().equals(\"Cashier\")) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                commandResult \u003d cashierLogic.execute(commandText);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                commandResult \u003d overviewLogic.execute(commandText);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            lion.setResponse(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            homePlaceholder.getChildren().removeAll();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            homePlaceholder.getChildren().add(new Home(transactionLogic).getRoot());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            reimbursementsPlaceholder.getChildren().removeAll();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            reimbursementsPlaceholder.getChildren().add(new Reimbursements(reimbursementLogic).getRoot());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            inventoryPlaceholder.getChildren().removeAll();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            inventoryPlaceholder.getChildren().add(new Inventory(inventoryLogic).getRoot());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            cashierPlaceholder.getChildren().removeAll();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            cashierPlaceholder.getChildren().add(new Cashier(cashierLogic).getRoot());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            overviewPlaceholder.getChildren().removeAll();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            overviewPlaceholder.getChildren().add(new Overview(overviewLogic).getRoot());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            //later when we implement help and exit"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            /*if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            }*/"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            lion.setResponse(e.toString());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Checks if command is a UI-related command"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @param userInput User input from command box."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return true if it is a UI-related command."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private boolean isUiCommand(String userInput) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return userInput.split(\" \")[0].equals(\"go\")"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                || userInput.split(\" \")[0].equals(\"help\")"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                || userInput.split(\" \")[0].equals(\"exit\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 48,
      "MichaelaTSH": 5,
      "EvonDong": 6,
      "kangyeelim": 77,
      "CoderStellaJ": 6,
      "-": 154
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Overview.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.overview.ui.OverviewMessages.BUDGET_SUMMARY_TEXT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.overview.ui.OverviewMessages.EXPENSE_PIE_CHART_TITLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.overview.ui.OverviewMessages.EXPENSE_SUMMARY_TEXT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.overview.ui.OverviewMessages.INVENTORY_PIE_CHART_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.overview.ui.OverviewMessages.INVENTORY_SUMMARY_TEXT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import static seedu.address.overview.ui.OverviewMessages.SALES_SUMMARY_TEXT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.chart.LineChart;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.overview.logic.Logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Defines the display for the overview tab in the user interface."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class Overview extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private static final String FXML \u003d \"Overview.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private Label totalExpenseValue;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private Label totalInventoryValue;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private Label totalSalesValue;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private Label totalAmountRemaining;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private PieChart expensePieChart;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private PieChart inventoryPieChart;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private BarChart salesBarChart;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private CategoryAxis salesXAxis;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private NumberAxis salesYAxis;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private LineChart budgetBarChart;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public Overview(Logic overviewLogic) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        initialiseLabels(overviewLogic);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        initialiseExpensePieChart(overviewLogic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        initialiseInventoryPieChart(overviewLogic);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        initialiseSalesBarChart(overviewLogic);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        initialiseBudgetBarChart(overviewLogic);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Initialises the Labels in the Overview tab."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param overviewLogic the logic for the overview tab."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    void initialiseLabels(Logic overviewLogic) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        totalExpenseValue.setText(String.format(EXPENSE_SUMMARY_TEXT, overviewLogic.getTotalExpenses(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                overviewLogic.getExpenseTarget()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        totalInventoryValue.setText(String.format(INVENTORY_SUMMARY_TEXT, overviewLogic.getTotalInventory()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        totalSalesValue.setText(String.format(SALES_SUMMARY_TEXT, overviewLogic.getTotalSales(),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                overviewLogic.getSalesTarget()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        totalAmountRemaining.setText(String.format(BUDGET_SUMMARY_TEXT, overviewLogic.getRemainingBudget(),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                overviewLogic.getBudgetTarget()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Initialises the Pie Chart for expenses in the Overview tab."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param overviewLogic the logic for the overview tab."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    void initialiseExpensePieChart(Logic overviewLogic) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        List\u003cPieChart.Data\u003e pieChartData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        List\u003cString\u003e categoryList \u003d overviewLogic.getTransactionCategories();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        for (int i \u003d 0; i \u003c categoryList.size(); i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            pieChartData.add(new PieChart.Data(categoryList.get(i),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    overviewLogic.getTransactionTotalByCategory(categoryList.get(i))));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e dataToDisplay \u003d FXCollections.observableList(pieChartData);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        expensePieChart.setData(dataToDisplay);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        expensePieChart.setTitle(EXPENSE_PIE_CHART_TITLE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        expensePieChart.setClockwise(true);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        expensePieChart.setLabelLineLength(20);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        expensePieChart.setLabelsVisible(true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        expensePieChart.setStartAngle(180);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Initialises the Pie Chart for inventory in the Overview tab."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param overviewLogic the logic for the overview tab."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    void initialiseInventoryPieChart(Logic overviewLogic) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        List\u003cPieChart.Data\u003e pieChartData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        List\u003cString\u003e categoryList \u003d overviewLogic.getInventoryCategories();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        for (int i \u003d 0; i \u003c categoryList.size(); i++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            pieChartData.add(new PieChart.Data(categoryList.get(i),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    overviewLogic.getInventoryTotalByCategory(categoryList.get(i))));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e dataToDisplay \u003d FXCollections.observableList(pieChartData);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        inventoryPieChart.setData(dataToDisplay);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        inventoryPieChart.setTitle(INVENTORY_PIE_CHART_TITLE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        inventoryPieChart.setClockwise(true);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        inventoryPieChart.setLabelLineLength(20);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        inventoryPieChart.setLabelsVisible(true);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        inventoryPieChart.setStartAngle(180);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Initialises the Bar CHart for Sales in the Overview tab."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param overviewLogic the logic for the overview tab."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    void initialiseSalesBarChart(Logic overviewLogic) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        LocalDate currentDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        List\u003cString\u003e months \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        for (int i \u003d 0; i \u003c 3; i++) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            months.add(currentDate.getMonth().toString());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            currentDate \u003d currentDate.minusMonths(1);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        Collections.reverse(months);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        salesXAxis.setCategories(FXCollections.observableList(months));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        salesYAxis.setLabel(\"Amount\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        //XYChart.Series\u003cString, Number\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    void initialiseBudgetBarChart(Logic overviewLogic) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 163
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 2,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Reimbursements.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import javafx.scene.control.TableColumn;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import javafx.scene.control.TableView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import javafx.scene.control.cell.PropertyValueFactory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.person.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import seedu.address.reimbursement.model.Reimbursement;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Defines the display for the Reimbursements tab in the user interface."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class Reimbursements extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private static final String FXML \u003d \"Reimbursements.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private TableView\u003cReimbursement\u003e tableView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private TableColumn\u003cReimbursement, String\u003e idCol;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private TableColumn\u003cReimbursement, String\u003e personCol;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private TableColumn\u003cReimbursement, String\u003e descriptionCol;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private TableColumn\u003cReimbursement, Double\u003e amountCol;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private TableColumn\u003cReimbursement, String\u003e deadlineCol;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Populates the table to show the transactions in transaction list in the transaction model."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public Reimbursements(Logic logic) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        tableView.getItems().setAll(parseReimbursementList(logic));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        idCol.setCellValueFactory(new PropertyValueFactory\u003cReimbursement, String\u003e(\"idCol\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        personCol.setCellValueFactory(new PropertyValueFactory\u003cReimbursement, String\u003e(\"personCol\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        amountCol.setCellValueFactory(new PropertyValueFactory\u003cReimbursement, Double\u003e(\"amount\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        descriptionCol.setCellValueFactory(new PropertyValueFactory\u003cReimbursement, String\u003e(\"descriptionCol\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        deadlineCol.setCellValueFactory(new PropertyValueFactory\u003cReimbursement, String\u003e(\"deadlineCol\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * Parses the filtered list in model to update the indexes and put it into a list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @param logic Transaction Logic"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     * @return List of transactions"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private ArrayList\u003cReimbursement\u003e parseReimbursementList(Logic logic) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        ArrayList\u003cReimbursement\u003e list \u003d logic.getFilteredList().getList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        for (int i \u003d 0; i \u003c list.size(); i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            Reimbursement rmb \u003d list.get(i);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            rmb.setIdCol(i + 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            rmb.setPersonCol();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            rmb.setDescriptionCol();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            rmb.setDeadlineCol();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        return list;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 13,
      "CoderStellaJ": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private seedu.address.transaction.logic.Logic transactionLogic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    private seedu.address.reimbursement.logic.Logic reimbursementLogic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private seedu.address.inventory.logic.Logic inventoryLogic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private seedu.address.person.logic.Logic personLogic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "    private seedu.address.cashier.logic.Logic cashierLogic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private seedu.address.overview.logic.Logic overviewLogic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public UiManager(seedu.address.transaction.logic.Logic transactionLogic,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                     seedu.address.reimbursement.logic.Logic reimbursementLogic,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                     seedu.address.inventory.logic.Logic inventoryLogic,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "                     seedu.address.person.logic.Logic personLogic,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                     seedu.address.cashier.logic.Logic cashierLogic,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                     seedu.address.overview.logic.Logic overviewLogic) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.transactionLogic \u003d transactionLogic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        this.reimbursementLogic \u003d reimbursementLogic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        this.inventoryLogic \u003d inventoryLogic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.personLogic \u003d personLogic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "        this.cashierLogic \u003d cashierLogic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.overviewLogic \u003d overviewLogic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, transactionLogic, reimbursementLogic, inventoryLogic,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    personLogic, cashierLogic, overviewLogic);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 6,
      "MichaelaTSH": 3,
      "EvonDong": 3,
      "kangyeelim": 4,
      "CoderStellaJ": 6,
      "-": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package seedu.address.ui.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.util.OverallCommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class CommandResult extends OverallCommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        super(feedbackToUser);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean exit) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        super(feedbackToUser, exit);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/logic/Logic.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package seedu.address.ui.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.ui.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @throws Exception If an error occurs during command execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    CommandResult execute(String commandText) throws Exception;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package seedu.address.ui.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.control.SingleSelectionModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.ui.HelpWindow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.ui.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "import seedu.address.ui.logic.exception.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Manages the logic behind the transaction tab."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private TabPane tabPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public LogicManager(TabPane tabPane, HelpWindow helpWindow) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.tabPane \u003d tabPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.helpWindow \u003d helpWindow;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public CommandResult execute(String commandText) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        String command \u003d commandText.split(\" \")[0];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        String param;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        if (command.equals(\"go\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                param \u003d commandText.split(\" \")[1];"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                throw new ParseException(\"Please specify a tab to switch to.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            return goToTab(param);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } else if (command.equals(\"exit\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            return new CommandResult(\"Exiting...\", true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } else if (command.equals(\"help\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            handleHelp();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            return new CommandResult(\"Showing help menu.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new ParseException(\"This really shouldn\u0027t happen. How did you get here?\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Navigates to another tab and returns empty overall command result."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @param param the tab to go to."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @return an empty CommandResult."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * @throws ParseException If an error occurs due to wrong format for tab navigation command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private CommandResult goToTab(String param) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        SingleSelectionModel\u003cTab\u003e selectionModel \u003d tabPane.getSelectionModel();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        if (param.equalsIgnoreCase(\"home\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            selectionModel.select(0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } else if (param.equalsIgnoreCase(\"members\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            selectionModel.select(1);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } else if (param.equalsIgnoreCase(\"reimbursements\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            selectionModel.select(2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } else if (param.equalsIgnoreCase(\"inventory\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            selectionModel.select(3);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } else if (param.equals(\"cashier\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            selectionModel.select(4);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } else if (param.equalsIgnoreCase(\"overview\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            selectionModel.select(5);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            throw new ParseException(\"A tab with that name was not found.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return new CommandResult(\"Switched to \" + param + \" tab!\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/logic/exception/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "package seedu.address.ui.logic.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " * Signals that there was an error in parsing."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "public class ParseException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    private String msg;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public ParseException(String msg) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        this.msg \u003d msg;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        return this.msg;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/util/ArgumentMultimap.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EvonDong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EvonDong": 1,
      "kangyeelim": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/util/ArgumentTokenizer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MichaelaTSH": 2,
      "kangyeelim": 1,
      "-": 145
    }
  },
  {
    "path": "src/main/java/seedu/address/util/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple transaction tab commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final Prefix PREFIX_DATETIME \u003d new Prefix(\"dt/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final Prefix PREFIX_AMOUNT \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final Prefix PREFIX_PERSON \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final Prefix PREFIX_QUANTITY \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final Prefix PREFIX_COST \u003d new Prefix(\"co/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final Prefix PREFIX_PRICE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final Prefix PREFIX_BUDGET \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final Prefix PREFIX_EXPENSE \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    public static final Prefix PREFIX_SALES \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 3,
      "kangyeelim": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/util/OverallCommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "public class OverallCommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private String feedbackToUser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    private boolean exit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public OverallCommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.exit \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public OverallCommandResult(String feedbackToUser, boolean exit) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * Returns the feedback to the user."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     * @return feedback to user."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return this.exit;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        if (!(other instanceof OverallCommandResult)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        OverallCommandResult otherCommandResult \u003d (OverallCommandResult) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                //\u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        return Objects.hash(feedbackToUser, /*showHelp,*/ exit);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/util/Prefix.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/resources/view/Cashier.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"cashier\" prefHeight\u003d\"532.0\" prefWidth\u003d\"690.0\" stylesheets\u003d\"@Extensions.css\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "      \u003cTableView fx:id\u003d\"tableView\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        \u003ccolumns\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "          \u003cTableColumn fx:id\u003d\"idCol\" prefWidth\u003d\"60.0\" text\u003d\"No.\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "          \u003cTableColumn fx:id\u003d\"descriptionCol\" prefWidth\u003d\"330.0\" text\u003d\"Item Description\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            \u003cTableColumn fx:id\u003d\"priceCol\" text\u003d\"Price\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            \u003cTableColumn fx:id\u003d\"quantityCol\" text\u003d\"Quantity\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EvonDong"
        },
        "content": "            \u003cTableColumn fx:id\u003d\"subtotalCol\" prefWidth\u003d\"120.0\" text\u003d\"Subtotal\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        \u003c/columns\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "      \u003c/TableView\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 14,
      "EvonDong": 5
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /*-fx-background-color: derive(#1d1d1d, 20%);*/"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /*-fx-border-color: derive(#1d1d1d, 10%);*/"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /*-fx-background-color: derive(#1d1d1d, 20%);*/"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /*-fx-border-color: derive(#1d1d1d, 10%);*/"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /*-fx-size: 35;*/"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    /*-fx-font-size: 20pt;*/"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/*.grid-pane {*/"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/*    -fx-background-color: #1d1d1d;*/"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/*    -fx-font-family: \"Segoe UI Light\";*/"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/*    -fx-font-size: 13pt;*/"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/*    -fx-text-fill: white;*/"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/*    -fx-border-color: #383838 #383838 #ffffff #383838;*/"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "/*}*/"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 17,
      "-": 350
    }
  },
  {
    "path": "src/main/resources/view/Home.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"home\" prefWidth\u003d\"690.0\" stylesheets\u003d\"@Extensions.css\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "          \u003cTableView fx:id\u003d\"tableView\" prefHeight\u003d\"532.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "              \u003ccolumns\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                  \u003cTableColumn fx:id\u003d\"idCol\" prefWidth\u003d\"44.0\" text\u003d\"ID\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                  \u003cTableColumn fx:id\u003d\"dateCol\" prefWidth\u003d\"93.60003662109375\" text\u003d\"Date/Time\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                  \u003cTableColumn fx:id\u003d\"descriptionCol\" prefWidth\u003d\"200.0\" text\u003d\"Description\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                  \u003cTableColumn fx:id\u003d\"categoryCol\" prefWidth\u003d\"124.0\" text\u003d\"Category\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                  \u003cTableColumn fx:id\u003d\"amountCol\" prefWidth\u003d\"79.20001220703125\" text\u003d\"Amount\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                  \u003cTableColumn fx:id\u003d\"personCol\" minWidth\u003d\"0.0\" prefWidth\u003d\"120.0\" text\u003d\"Person\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "              \u003c/columns\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "          \u003c/TableView\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 12,
      "kangyeelim": 8
    }
  },
  {
    "path": "src/main/resources/view/Inventory.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"inventory\" prefWidth\u003d\"690.0\" stylesheets\u003d\"@Extensions.css\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "       \u003cTableView fx:id\u003d\"tableView\" prefHeight\u003d\"532.0\" prefWidth\u003d\"690.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "           \u003ccolumns\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "               \u003cTableColumn fx:id\u003d\"idCol\" prefWidth\u003d\"36.00000059604645\" text\u003d\"ID\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "               \u003cTableColumn fx:id\u003d\"descriptionCol\" prefWidth\u003d\"140.80003356933594\" text\u003d\"Description\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "               \u003cTableColumn fx:id\u003d\"categoryCol\" prefWidth\u003d\"100.39996337890625\" text\u003d\"Category\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "               \u003cTableColumn fx:id\u003d\"quantityCol\" prefWidth\u003d\"44.60000228881836\" text\u003d\"Qty\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "               \u003cTableColumn fx:id\u003d\"costCol\" prefWidth\u003d\"77.50003051757812\" text\u003d\"Cost/Unit\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "               \u003cTableColumn fx:id\u003d\"totalCostCol\" prefWidth\u003d\"77.5\" text\u003d\"Total Cost\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "               \u003cTableColumn fx:id\u003d\"priceCol\" minWidth\u003d\"0.0\" prefWidth\u003d\"47.50006103515625\" text\u003d\"Price\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "               \u003cTableColumn fx:id\u003d\"expectedRevenueCol\" prefWidth\u003d\"130.5\" text\u003d\"Expected Revenue\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "           \u003c/columns\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "       \u003c/TableView\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 12,
      "MichaelaTSH": 8,
      "kangyeelim": 2
    }
  },
  {
    "path": "src/main/resources/view/Lion.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003cVBox fx:id\u003d\"Lion\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"572.0\" prefWidth\u003d\"215.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "      \u003cLabel alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" minHeight\u003d\"25.0\" prefWidth\u003d\"216.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "         \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "      \u003cScrollPane fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" prefHeight\u003d\"545.0\" prefWidth\u003d\"205.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        \u003ccontent\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "          \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                  \u003cLabel fx:id\u003d\"response\" alignment\u003d\"TOP_LEFT\" layoutX\u003d\"14.0\" layoutY\u003d\"14.0\" maxHeight\u003d\"466.0\" maxWidth\u003d\"167.0\" prefHeight\u003d\"362.0\" prefWidth\u003d\"167.0\" text\u003d\"Hi! I am Leo your trusty helper!\" wrapText\u003d\"true\" AnchorPane.leftAnchor\u003d\"14.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                  \u003cImageView fx:id\u003d\"lionMascot\" fitHeight\u003d\"120.0\" fitWidth\u003d\"120.0\" layoutX\u003d\"38.0\" layoutY\u003d\"402.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                     \u003cimage\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                        \u003cImage url\u003d\"@../images/TempMascot.png\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                     \u003c/image\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                  \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        \u003c/content\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "         \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "         \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "         \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "         \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 31,
      "kangyeelim": 12
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\u003c!--onCloseRequest\u003d\"#handleExit\"--\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003cfx:root minHeight\u003d\"660.0\" minWidth\u003d\"920.0\" title\u003d\"treasurerPro (tP)\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "               \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                  \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                  \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "               \u003c/stylesheets\u003e\u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "               \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                  \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                  \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "               \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            \u003cGridPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "              \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"SOMETIMES\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"215.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "              \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "              \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                \u003cRowConstraints vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "              \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                  \u003cTabPane fx:id\u003d\"tabPane\" tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    \u003ctabs\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                      \u003cTab id\u003d\"homeTab\" fx:id\u003d\"homeTab\" text\u003d\"Home\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003ccontent\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                          \u003cAnchorPane fx:id\u003d\"homePlaceholder\" prefWidth\u003d\"690.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                 \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                    \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                    \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                 \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                                 \u003cpadding\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                    \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" top\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                 \u003c/padding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                              \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003c/content\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                      \u003c/Tab\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                        \u003cTab id\u003d\"membersTab\" fx:id\u003d\"membersTab\" text\u003d\"Members\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                          \u003ccontent\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                            \u003cAnchorPane fx:id\u003d\"membersPlaceholder\" prefWidth\u003d\"690.0\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                 \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                    \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                    \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                 \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                 \u003cpadding\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                    \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                 \u003c/padding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                              \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                          \u003c/content\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                        \u003cTab id\u003d\"reimbursementsTab\" fx:id\u003d\"reimbursementsTab\" text\u003d\"Reimbursements\"\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                          \u003ccontent\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                            \u003cAnchorPane fx:id\u003d\"reimbursementsPlaceholder\" prefWidth\u003d\"690.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                 \u003cpadding\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" top\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                 \u003c/padding\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                 \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                    \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                    \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                 \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                              \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                          \u003c/content\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                      \u003cTab id\u003d\"inventoryTab\" fx:id\u003d\"inventoryTab\" text\u003d\"Inventory\"\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003ccontent\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                          \u003cAnchorPane fx:id\u003d\"inventoryPlaceholder\" prefWidth\u003d\"692.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                 \u003cpadding\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                    \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" top\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                 \u003c/padding\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                 \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                    \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                    \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                 \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                              \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003c/content\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                      \u003c/Tab\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                        \u003cTab id\u003d\"cashierTab\" fx:id\u003d\"cashierTab\" text\u003d\"Cashier\"\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                          \u003ccontent\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                            \u003cAnchorPane fx:id\u003d\"cashierPlaceholder\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                 \u003cpadding\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                    \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" top\u003d\"6.0\" /\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                 \u003c/padding\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                 \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                    \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                    \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                 \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                              \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                          \u003c/content\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "                        \u003cTab id\u003d\"overviewTab\" fx:id\u003d\"overviewTab\" text\u003d\"Overview\"\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                          \u003ccontent\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                            \u003cAnchorPane fx:id\u003d\"overviewPlaceholder\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                 \u003cpadding\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                    \u003cInsets top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                 \u003c/padding\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                 \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                    \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                    \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                                 \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                              \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                          \u003c/content\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003c/Tab\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                    \u003c/tabs\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                     \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003cInsets /\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                     \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                     \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                     \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                  \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                  \u003cVBox fx:id\u003d\"lionPlaceholder\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                     \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                     \u003c/stylesheets\u003e\u003c/VBox\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "               \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                  \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                  \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "               \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "               \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                  \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                  \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "               \u003c/stylesheets\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "               \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "               \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "         \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "         \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 130,
      "kangyeelim": 14,
      "-": 29
    }
  },
  {
    "path": "src/main/resources/view/Overview.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.chart.BarChart?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.chart.LineChart?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.chart.PieChart?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"home\" prefWidth\u003d\"690.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "      \u003cGridPane fx:id\u003d\"overview\" alignment\u003d\"CENTER\" layoutY\u003d\"2.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "          \u003cColumnConstraints halignment\u003d\"CENTER\" hgrow\u003d\"ALWAYS\" maxWidth\u003d\"688.0\" minWidth\u003d\"10.0\" prefWidth\u003d\"677.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "          \u003cRowConstraints maxHeight\u003d\"243.0\" minHeight\u003d\"8.0\" prefHeight\u003d\"20.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"440.0\" valignment\u003d\"CENTER\" vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            \u003cLabel contentDisplay\u003d\"CENTER\" text\u003d\"Summary of finances\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "               \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                  \u003cInsets /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "               \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                  \u003cFont size\u003d\"18.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "               \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                  \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                  \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "               \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            \u003cGridPane GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "              \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "              \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "              \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "              \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                  \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" style\u003d\"-fx-border-color: grey;\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003cLabel text\u003d\"Expense Summary\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                           \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                              \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                           \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                              \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003cLabel fx:id\u003d\"totalExpenseValue\" text\u003d\"Total Spent:\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                           \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                              \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                           \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003cPieChart fx:id\u003d\"expensePieChart\" style\u003d\"-fx-background-insets: 0; -fx-border-width: 0;\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                           \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                              \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                           \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003c/PieChart\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                  \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" style\u003d\"-fx-border-color: grey;\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003cLabel text\u003d\"Inventory Summary\"\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                           \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                              \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                           \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                              \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003cLabel fx:id\u003d\"totalInventoryValue\" text\u003d\"Inventory Value:\"\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                           \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                              \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                           \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003cPieChart fx:id\u003d\"inventoryPieChart\"\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                           \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                              \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                           \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003c/PieChart\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                  \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"339.0\" style\u003d\"-fx-border-color: grey;\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003cLabel text\u003d\"Sales Summary\"\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                           \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                              \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                           \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                              \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003cLabel fx:id\u003d\"totalSalesValue\" text\u003d\"Total Sales:\"\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                           \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                              \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                           \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003cBarChart fx:id\u003d\"salesBarChart\"\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                          \u003cxAxis\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                            \u003cCategoryAxis fx:id\u003d\"salesXAxis\" side\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                          \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                          \u003cyAxis\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                            \u003cNumberAxis fx:id\u003d\"salesYAxis\" side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                          \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                           \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                              \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                           \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003c/BarChart\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                  \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" style\u003d\"-fx-border-color: grey;\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003cLabel text\u003d\"Budget Overview\"\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                           \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                              \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                           \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                              \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003cLabel fx:id\u003d\"totalAmountRemaining\" text\u003d\"Amount Remaining:\"\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                           \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                              \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                           \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003cLineChart fx:id\u003d\"budgetBarChart\"\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                          \u003cxAxis\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                            \u003cCategoryAxis side\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                          \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                          \u003cyAxis\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                            \u003cNumberAxis side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                          \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                           \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                              \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                           \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                        \u003c/LineChart\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "               \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                  \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "                  \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "               \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "         \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "            \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "         \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "   \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "      \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "      \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "   \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 168
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "  \u003cListView fx:id\u003d\"personListView\" minHeight\u003d\"532.0\" prefWidth\u003d\"690.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "      \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "         \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"8.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "      \u003c/VBox.margin\u003e\u003c/ListView\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 5,
      "kangyeelim": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/Reimbursements.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.control.TableColumn?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.control.TableView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dawo5010"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"reimbursements\" prefWidth\u003d\"690.0\" stylesheets\u003d\"@Extensions.css\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "      \u003cTableView fx:id\u003d\"tableView\" prefHeight\u003d\"520.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                 AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        \u003ccolumns\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "          \u003cTableColumn fx:id\u003d\"idCol\" prefWidth\u003d\"57.0\" text\u003d\"ID\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "          \u003cTableColumn fx:id\u003d\"personCol\" prefWidth\u003d\"157.0\" text\u003d\"Person\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            \u003cTableColumn fx:id\u003d\"amountCol\" prefWidth\u003d\"75.5\" text\u003d\"Amount\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            \u003cTableColumn fx:id\u003d\"descriptionCol\" minWidth\u003d\"0.0\" prefWidth\u003d\"191.0\" text\u003d\"Description\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            \u003cTableColumn fx:id\u003d\"deadlineCol\" prefWidth\u003d\"196.5\" text\u003d\"Deadline\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "        \u003c/columns\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "      \u003c/TableView\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dawo5010"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "dawo5010": 13,
      "CoderStellaJ": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/person/commons/core/ConfigTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/person/commons/core/VersionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 134
    }
  },
  {
    "path": "src/test/java/seedu/address/person/commons/core/index/IndexTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/person/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/address_book_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/person/commons/util/CollectionUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 2,
      "-": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/person/commons/util/ConfigUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 3,
      "-": 113
    }
  },
  {
    "path": "src/test/java/seedu/address/person/commons/util/FileUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/person/commons/util/JsonUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/person/commons/util/StringUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 142
    }
  },
  {
    "path": "src/test/java/seedu/address/person/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.util.InventoryList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.person.storage.*;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.reimbursement.model.ReimbursementList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.transaction.util.TransactionList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private static final String FILE_PATH_REIMBURSEMENT \u003d \"data/reimbursementInformation.txt\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private static final String FILE_PATH_TRANSACTION \u003d \"data/transactionHistory.txt\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private static final String FILE_PATH_INVENTORY \u003d \"data/inventoryInformation.txt\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        TransactionList transactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        ReimbursementList reimbursementList \u003d new ReimbursementList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        InventoryList inventoryList \u003d new InventoryList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.cashier.util.InventoryList cashierList \u003d new seedu.address.cashier.util.InventoryList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        //For Person Storage and Manager"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.person.model.Model personModel \u003d new seedu.address.person.model.ModelManager();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.person.storage.StorageManager personManager\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.person.storage.StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        //For Transaction Storage and Manager"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.transaction.model.Model transactionModel \u003d new seedu.address.transaction.model.ModelManager(transactionList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.transaction.storage.StorageManager transactionManager \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.transaction.storage.StorageManager(FILE_PATH_TRANSACTION, personModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        //For Reimbursement Storage and Manager"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.reimbursement.model.Model reimbursementModel\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.reimbursement.model.ModelManager(reimbursementList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.reimbursement.storage.StorageManager reimbursementManager \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.reimbursement.storage.StorageManager("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                        FILE_PATH_REIMBURSEMENT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        //For Cashier Storage and Manager"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.cashier.model.ModelManager cashierModel \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.cashier.model.ModelManager(cashierList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.cashier.storage.StorageManager cashierManager \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.cashier.storage.StorageManager(FILE_PATH_INVENTORY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                        FILE_PATH_TRANSACTION, personModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        //For Inventory Storage and Manager"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.inventory.model.ModelManager inventoryModel \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.inventory.model.ModelManager(inventoryList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.inventory.storage.StorageManager inventoryManager \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.inventory.storage.StorageManager(FILE_PATH_INVENTORY);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        //All related logics"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.transaction.logic.Logic transactionLogic \u003d new seedu.address.transaction.logic.LogicManager(transactionModel, transactionManager, personModel, personManager,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                reimbursementModel, reimbursementManager);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.reimbursement.logic.Logic reimbursementLogic \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.reimbursement.logic.LogicManager(reimbursementModel, reimbursementManager,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                        transactionModel, transactionManager, personModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.cashier.logic.Logic cashierLogic \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.cashier.logic.LogicManager(cashierModel, cashierManager, personModel,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                        personManager, reimbursementModel, reimbursementManager, transactionModel,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                        transactionManager, inventoryModel, inventoryManager);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.inventory.logic.Logic inventoryLogic \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.inventory.logic.LogicManager(cashierModel, cashierManager, inventoryModel,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                        inventoryManager);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        logic \u003d new LogicManager(model, personManager, transactionLogic, reimbursementLogic,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                cashierLogic, inventoryLogic);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "//"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "//        logic \u003d new LogicManager(model, personManager, transactionLogic, reimbursementLogic,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "//                cashierLogic, inventoryLogic);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException, IOException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MichaelaTSH": 58,
      "kangyeelim": 17,
      "CoderStellaJ": 5,
      "-": 138
    }
  },
  {
    "path": "src/test/java/seedu/address/person/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 7,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/person/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.util.InventoryList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.person.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.person.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.person.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.person.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.reimbursement.model.ReimbursementList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.logic.Logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.logic.LogicManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.model.ModelManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.transaction.storage.StorageManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.transaction.util.TransactionList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private static final String FILE_PATH_REIMBURSEMENT \u003d \"data/reimbursementInformation.txt\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private static final String FILE_PATH_TRANSACTION \u003d \"data/transactionHistory.txt\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "    private static final String FILE_PATH_INVENTORY \u003d \"data/inventoryInformation.txt\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        TransactionList transactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        ReimbursementList reimbursementList \u003d new ReimbursementList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        InventoryList inventoryList \u003d new InventoryList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.cashier.util.InventoryList cashierList \u003d new seedu.address.cashier.util.InventoryList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        Path userPrefPath \u003d Paths.get(\"data/test/userPrefs.txt\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        Path addressPath \u003d Paths.get(\"data/test/address.txt\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(userPrefPath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(addressPath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        //For Person Storage and Manager"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.person.model.Model personModel \u003d new seedu.address.person.model.ModelManager();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.person.storage.StorageManager personManager\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.person.storage.StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        //For Transaction Storage and Manager"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.transaction.model.Model transactionModel \u003d new ModelManager(transactionList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.transaction.storage.StorageManager transactionManager \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new StorageManager(FILE_PATH_TRANSACTION, personModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        //For Reimbursement Storage and Manager"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.reimbursement.model.Model reimbursementModel\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.reimbursement.model.ModelManager(reimbursementList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.reimbursement.storage.StorageManager reimbursementManager \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.reimbursement.storage.StorageManager("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                        FILE_PATH_REIMBURSEMENT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        //For Cashier Storage and Manager"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.cashier.model.ModelManager cashierModel \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.cashier.model.ModelManager(cashierList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.cashier.storage.StorageManager cashierManager \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.cashier.storage.StorageManager(FILE_PATH_INVENTORY,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                        FILE_PATH_TRANSACTION, personModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        //For Inventory Storage and Manager"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.inventory.model.Model inventoryModel \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.inventory.model.ModelManager(inventoryList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.inventory.storage.StorageManager inventoryManager \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.inventory.storage.StorageManager(FILE_PATH_INVENTORY);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        //All related logics"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        Logic logic \u003d new LogicManager(transactionModel, transactionManager, personModel, personManager,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                reimbursementModel, reimbursementManager);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.reimbursement.logic.Logic reimbursementLogic \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.reimbursement.logic.LogicManager(reimbursementModel, reimbursementManager,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                        transactionModel, transactionManager, personModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.cashier.logic.Logic cashierLogic \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.cashier.logic.LogicManager(cashierModel, cashierManager, personModel,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                        personManager, reimbursementModel, reimbursementManager, transactionModel,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                        transactionManager, inventoryModel, inventoryManager);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new AddCommand(validPerson).execute(modelStub, logic, reimbursementLogic, cashierLogic);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        TransactionList transactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        ReimbursementList reimbursementList \u003d new ReimbursementList();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        InventoryList inventoryList \u003d new InventoryList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.cashier.util.InventoryList cashierList \u003d new seedu.address.cashier.util.InventoryList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        Path userPrefPath \u003d Paths.get(\"data/test/userPrefs.txt\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        Path addressPath \u003d Paths.get(\"data/test/address.txt\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(userPrefPath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(addressPath);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        //For Person Storage and Manager"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.person.model.Model personModel \u003d new seedu.address.person.model.ModelManager();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.person.storage.StorageManager personManager\u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.person.storage.StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        //For Transaction Storage and Manager"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.transaction.model.Model transactionModel \u003d new ModelManager(transactionList);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.transaction.storage.StorageManager transactionManager \u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new StorageManager(FILE_PATH_TRANSACTION, personModel);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        //For Reimbursement Storage and Manager"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.reimbursement.model.Model reimbursementModel\u003d"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.reimbursement.model.ModelManager(reimbursementList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.reimbursement.storage.StorageManager reimbursementManager \u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.reimbursement.storage.StorageManager("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                        FILE_PATH_REIMBURSEMENT);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        //For Cashier Storage and Manager"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.cashier.model.ModelManager cashierModel \u003d"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.cashier.model.ModelManager(cashierList);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.cashier.storage.StorageManager cashierManager \u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.cashier.storage.StorageManager(FILE_PATH_INVENTORY,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                        FILE_PATH_TRANSACTION, personModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        //For Inventory Storage and Manager"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.inventory.model.Model inventoryModel \u003d"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.inventory.model.ModelManager(inventoryList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.inventory.storage.StorageManager inventoryManager \u003d"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.inventory.storage.StorageManager(FILE_PATH_INVENTORY);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        //All related logics"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        Logic logic \u003d new LogicManager(transactionModel, transactionManager, personModel, personManager,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                reimbursementModel, reimbursementManager);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.reimbursement.logic.Logic reimbursementLogic \u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.reimbursement.logic.LogicManager(reimbursementModel, reimbursementManager,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                        transactionModel, transactionManager, personModel);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.cashier.logic.Logic cashierLogic \u003d"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.cashier.logic.LogicManager(cashierModel, cashierManager, personModel,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                        personManager, reimbursementModel, reimbursementManager, transactionModel,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                        transactionManager, inventoryModel, inventoryManager);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                () -\u003e addCommand.execute(modelStub, logic, reimbursementLogic, cashierLogic));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        public Person getPersonByName(String name) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MichaelaTSH": 113,
      "kangyeelim": 20,
      "CoderStellaJ": 2,
      "-": 185
    }
  },
  {
    "path": "src/test/java/seedu/address/person/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 6,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/person/logic/commands/CommandResultTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/person/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.inventory.util.InventoryList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.person.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.person.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.person.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.person.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.reimbursement.model.ReimbursementList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.transaction.logic.Logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.transaction.logic.LogicManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.transaction.model.ModelManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.transaction.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.transaction.util.TransactionList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            TransactionList transactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            ReimbursementList reimbursementList \u003d new ReimbursementList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            InventoryList inventoryList \u003d new InventoryList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            seedu.address.cashier.util.InventoryList cashierList \u003d new seedu.address.cashier.util.InventoryList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            Path userPrefPath \u003d Paths.get(\"data/test/userPrefs.txt\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            Path addressPath \u003d Paths.get(\"data/test/address.txt\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(userPrefPath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(addressPath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            //all related ModelManagers"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            seedu.address.transaction.model.Model transactionModel \u003d new ModelManager(transactionList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            seedu.address.person.model.Model personModel \u003d new seedu.address.person.model.ModelManager();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            seedu.address.reimbursement.model.Model reimbursementModel \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                    new seedu.address.reimbursement.model.ModelManager(reimbursementList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            seedu.address.cashier.model.ModelManager cashierModel \u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                    new seedu.address.cashier.model.ModelManager(cashierList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            seedu.address.inventory.model.Model inventoryModel \u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                    new seedu.address.inventory.model.ModelManager(inventoryList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            //all related StorageManagers"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            seedu.address.transaction.storage.StorageManager transactionManager \u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                    new StorageManager(\"\", personModel);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            seedu.address.person.storage.StorageManager personManager \u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                    new seedu.address.person.storage.StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            seedu.address.reimbursement.storage.StorageManager reimbursementManager \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                    new seedu.address.reimbursement.storage.StorageManager("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                            \"data/test/reimbursement.txt\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            seedu.address.cashier.storage.StorageManager cashierManager \u003d new seedu.address.cashier.storage.StorageManager("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                    \"data/test/inventory.txt\", \"data/test/transaction.txt\", personModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            seedu.address.inventory.storage.StorageManager inventoryManager \u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                    new seedu.address.inventory.storage.StorageManager(\"data/test/inventory.txt\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            Logic logic \u003d new LogicManager(transactionModel, transactionManager, personModel, personManager,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                    reimbursementModel, reimbursementManager);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            seedu.address.reimbursement.logic.Logic reimbursementLogic \u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                    new seedu.address.reimbursement.logic.LogicManager(reimbursementModel, reimbursementManager,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                            transactionModel, transactionManager, personModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            seedu.address.cashier.logic.Logic cashierLogic \u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                    new seedu.address.cashier.logic.LogicManager(cashierModel, cashierManager, personModel,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                            personManager, reimbursementModel, reimbursementManager, transactionModel,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                            transactionManager, inventoryModel, inventoryManager);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, logic, reimbursementLogic, cashierLogic);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        } catch (CommandException | IOException ce) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        TransactionList transactionList \u003d new TransactionList();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        ReimbursementList reimbursementList \u003d new ReimbursementList();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        InventoryList inventoryList \u003d new InventoryList();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.cashier.util.InventoryList cashierList \u003d new seedu.address.cashier.util.InventoryList();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        Path userPrefPath \u003d Paths.get(\"data/test/userPrefs.txt\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        Path addressPath \u003d Paths.get(\"data/test/address.txt\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(userPrefPath);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(addressPath);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        //all related ModelManagers"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.transaction.model.Model transactionModel \u003d new ModelManager(transactionList);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.person.model.Model personModel \u003d new seedu.address.person.model.ModelManager();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.reimbursement.model.Model reimbursementModel \u003d"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.reimbursement.model.ModelManager(reimbursementList);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.cashier.model.ModelManager cashierModel \u003d"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.cashier.model.ModelManager(cashierList);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.inventory.model.Model inventoryModel \u003d"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.inventory.model.ModelManager(inventoryList);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        //all related StorageManagers"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.transaction.storage.StorageManager transactionManager \u003d"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new StorageManager(\"\", personModel);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.person.storage.StorageManager personManager \u003d"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.person.storage.StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.reimbursement.storage.StorageManager reimbursementManager \u003d"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.reimbursement.storage.StorageManager("
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "                        \"data/test/reimbursement.txt\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.cashier.storage.StorageManager cashierManager \u003d new seedu.address.cashier.storage.StorageManager("
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                \"data/test/inventory.txt\", \"data/test/transaction.txt\", personModel);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.inventory.storage.StorageManager inventoryManager \u003d"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.inventory.storage.StorageManager(\"data/test/inventory.txt\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        Logic logic \u003d new LogicManager(transactionModel, transactionManager, personModel, personManager,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                reimbursementModel, reimbursementManager);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.reimbursement.logic.Logic reimbursementLogic \u003d"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.reimbursement.logic.LogicManager(reimbursementModel, reimbursementManager,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                        transactionModel, transactionManager, personModel);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        seedu.address.cashier.logic.Logic cashierLogic \u003d"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                new seedu.address.cashier.logic.LogicManager(cashierModel, cashierManager, personModel,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                        personManager, reimbursementModel, reimbursementManager, transactionModel,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                        transactionManager, inventoryModel, inventoryManager);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "                logic, reimbursementLogic, cashierLogic));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MichaelaTSH": 111,
      "kangyeelim": 7,
      "CoderStellaJ": 3,
      "-": 113
    }
  },
  {
    "path": "src/test/java/seedu/address/person/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * {@code DeleteIndexCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 11,
      "-": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/person/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 17,
      "-": 156
    }
  },
  {
    "path": "src/test/java/seedu/address/person/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 9,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/person/logic/commands/ExitCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/person/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 7,
      "-": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/person/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/person/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 6,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/person/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 35,
      "-": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/person/logic/parser/AddressBookParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 15,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/person/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.util.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.util.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import seedu.address.util.Prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MichaelaTSH": 3,
      "kangyeelim": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/address/person/logic/parser/CommandParserTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/person/logic/parser/DeleteCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * outside of the DeleteIndexCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": " * same path through the DeleteIndexCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 7,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/person/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MichaelaTSH": 1,
      "kangyeelim": 35,
      "-": 175
    }
  },
  {
    "path": "src/test/java/seedu/address/person/logic/parser/FindCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 6,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/person/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 8,
      "-": 188
    }
  },
  {
    "path": "src/test/java/seedu/address/person/model/AddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 5,
      "-": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/person/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 10,
      "-": 120
    }
  },
  {
    "path": "src/test/java/seedu/address/person/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/person/model/person/AddressTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/person/model/person/EmailTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/person/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/person/model/person/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/person/model/person/PersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 6,
      "-": 89
    }
  },
  {
    "path": "src/test/java/seedu/address/person/model/person/PhoneTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/person/model/person/UniquePersonListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 5,
      "-": 165
    }
  },
  {
    "path": "src/test/java/seedu/address/person/model/tag/TagTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/person/storage/JsonAdaptedPersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 7,
      "-": 103
    }
  },
  {
    "path": "src/test/java/seedu/address/person/storage/JsonAddressBookStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 4,
      "-": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/person/storage/JsonSerializableAddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 4,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/person/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 4,
      "-": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/person/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 5,
      "-": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/person/ui/TestFxmlObject.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/person/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.person.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 2,
      "-": 113
    }
  },
  {
    "path": "src/test/java/seedu/address/reimbursement/model/ReimbursementTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "package seedu.address.reimbursement.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "public class ReimbursementTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Reimbursement(null));"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CoderStellaJ"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CoderStellaJ": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 2,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 7,
      "-": 80
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 7,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "MichaelaTSH"
        },
        "content": "import static seedu.address.util.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "MichaelaTSH": 5,
      "kangyeelim": 4,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 3,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static seedu.address.person.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import seedu.address.person.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 12,
      "-": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/transaction/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "package seedu.address.transaction.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import static org.junit.jupiter.api.Assertions.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "class AddCommandTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    void execute() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 12
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\u003c?import seedu.address.person.transactionMessages.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kangyeelim"
        },
        "content": "\u003cfx:root type\u003d\"seedu.address.person.transactionMessages.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "kangyeelim": 1,
      "-": 5
    }
  }
]
